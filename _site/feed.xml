<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-Hans"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-Hans" /><updated>2024-11-05T18:24:16+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ennis’s Blog</title><subtitle>Willing to be a question, willing to be an answer.
</subtitle><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><entry><title type="html">Adaptive Note RAG 论文笔记</title><link href="http://localhost:4000/2024/11/05/Retriever-and-Memory-Towards-Adaptive-Note-Enhanced-Retrieval-Augmented-Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="Adaptive Note RAG 论文笔记" /><published>2024-11-05T00:00:00+08:00</published><updated>2024-11-05T00:00:00+08:00</updated><id>http://localhost:4000/2024/11/05/Retriever-and-Memory%20Towards%20Adaptive%20%20Note-Enhanced%20Retrieval-Augmented%20Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/2024/11/05/Retriever-and-Memory-Towards-Adaptive-Note-Enhanced-Retrieval-Augmented-Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.html"><![CDATA[<h1 id="retriever-and-memory-towards-adaptive--note-enhanced-retrieval-augmented-generation论文笔记">Retriever-and-Memory: Towards Adaptive  Note-Enhanced Retrieval-Augmented Generation论文笔记</h1>

<!---more-->

<blockquote>
  <p>论文来源：师兄给的</p>

  <p>问题：</p>
</blockquote>

<h2 id="不懂的知识">不懂的知识</h2>

<h3 id="long-form-qa--multi-hop-qa--open-qa">long-form QA / multi-hop QA / open QA</h3>

<p>Multi-hop QA、Long-form QA 和 OpenQA 是问答系统中的三种不同类型，各自有不同的关注点和特点，但在实际应用中，它们可以彼此融合或互补。以下是它们之间的关系及对比：</p>

<ol>
  <li>
    <p><strong>OpenQA</strong>：</p>

    <ul>
      <li><strong>定义</strong>：OpenQA 是开放领域问答系统，旨在回答任何主题的自然语言问题，通常依赖于大型知识库或非结构化文本（如网页和维基百科）进行信息检索。</li>
      <li><strong>核心特点</strong>：在不限定领域的前提下，OpenQA系统能够从大量数据中搜索、抽取和生成答案。其主要挑战在于从庞大的数据源中找到准确、相关的信息。</li>
      <li><strong>任务目标</strong>：快速准确地回答广泛、开放的问题，通常是简短、事实性的回答，但也可以是较长的内容。</li>
    </ul>
  </li>
  <li>
    <p><strong>Multi-hop QA</strong>：</p>

    <ul>
      <li><strong>定义</strong>：Multi-hop QA 是一种专注于多步推理的问答任务，需要从多个信息片段中获取和连接线索来得到答案。</li>
      <li><strong>核心特点</strong>：在信息整合和推理链条构建方面具有挑战性，因为要在多个文本或逻辑链条之间进行连接。尽管信息可能在不同的文本片段中分散，但系统需要整合它们来形成最终答案。</li>
      <li><strong>任务目标</strong>：通过多个步骤的推理来回答问题，适用于需要多层逻辑或因果关系的问题，通常生成简短且确定的答案。</li>
    </ul>
  </li>
  <li>
    <p><strong>Long-form QA</strong>：</p>

    <ul>
      <li><strong>定义</strong>：Long-form QA 关注生成详细、解释性的回答，尤其适用于需要背景、分析或综合性回答的问题。</li>
      <li><strong>核心特点</strong>：强调生成连贯的长篇内容，回答需要深入的解释和背景信息，而不仅仅是单一的事实答案。系统需要具备较强的文本生成能力，以确保回答的内容丰富性和逻辑连贯性。</li>
      <li><strong>任务目标</strong>：提供深度的回答，回答内容类似一篇小文章，适合用户寻求综合性、解释性或教育性答案的场景。</li>
    </ul>
  </li>
</ol>

<p>三者的对比与关系</p>

<table>
  <thead>
    <tr>
      <th>特点</th>
      <th><strong>OpenQA</strong></th>
      <th><strong>Multi-hop QA</strong></th>
      <th><strong>Long-form QA</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>目标</strong></td>
      <td>回答开放领域问题</td>
      <td>通过多步推理找到准确答案</td>
      <td>生成详细解释和背景的回答</td>
    </tr>
    <tr>
      <td><strong>关注点</strong></td>
      <td>信息检索与相关性</td>
      <td>多步逻辑推理和信息整合</td>
      <td>深度生成与连贯性</td>
    </tr>
    <tr>
      <td><strong>答案类型</strong></td>
      <td>简短或事实性答案</td>
      <td>简短但需要多步推理的答案</td>
      <td>连贯的长篇内容</td>
    </tr>
    <tr>
      <td><strong>关系</strong></td>
      <td>可结合 Multi-hop QA 或 Long-form QA 实现开放领域中的多步推理或长篇回答</td>
      <td>可以在 OpenQA 系统中实现多步推理</td>
      <td>可用于 OpenQA 系统中生成解释性答案</td>
    </tr>
  </tbody>
</table>

<p><strong>整合方式</strong>：
在复杂问答系统中，这三者可以结合使用。例如：</p>

<ul>
  <li><strong>OpenQA + Multi-hop QA</strong>：在开放领域中使用多步推理来找到答案，例如跨文档推理问题。</li>
  <li><strong>OpenQA + Long-form QA</strong>：在开放领域中生成解释性或背景丰富的长篇回答，例如百科式回答。</li>
</ul>

<p><strong>总结</strong>：</p>

<ul>
  <li><strong>OpenQA</strong> 关注领域广泛的问题。</li>
  <li><strong>Multi-hop QA</strong> 关注多步信息推理。</li>
  <li><strong>Long-form QA</strong> 关注详细、解释性的回答。</li>
</ul>

<h3 id="llm基本任务">LLM基本任务</h3>

<table>
  <thead>
    <tr>
      <th>任务</th>
      <th>英文名称</th>
      <th>简写</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>问答</td>
      <td>Question Answering</td>
      <td>QA</td>
    </tr>
    <tr>
      <td>文本生成</td>
      <td>Text Generation</td>
      <td>TG</td>
    </tr>
    <tr>
      <td>文本总结</td>
      <td>Text Summarization</td>
      <td>TS</td>
    </tr>
    <tr>
      <td>语言翻译</td>
      <td>Machine Translation</td>
      <td>MT</td>
    </tr>
    <tr>
      <td>文本分类</td>
      <td>Text Classification</td>
      <td>TC</td>
    </tr>
    <tr>
      <td>实体识别</td>
      <td>Named Entity Recognition</td>
      <td>NER</td>
    </tr>
    <tr>
      <td>文本改写与纠错</td>
      <td>Text Rewriting and Error Correction</td>
      <td>TREC</td>
    </tr>
    <tr>
      <td>对话生成</td>
      <td>Dialogue Generation</td>
      <td>DG</td>
    </tr>
    <tr>
      <td>代码生成和分析</td>
      <td>Code Generation and Analysis</td>
      <td>CGA</td>
    </tr>
    <tr>
      <td>知识提取</td>
      <td>Knowledge Extraction</td>
      <td>KE</td>
    </tr>
    <tr>
      <td>个性化推荐</td>
      <td>Personalized Recommendation</td>
      <td>PR</td>
    </tr>
    <tr>
      <td>文本推理</td>
      <td>Textual Inference</td>
      <td>TI</td>
    </tr>
  </tbody>
</table>

<h2 id="摘要">摘要</h2>

<blockquote>
  <p>除了QA任务还有哪些？</p>
</blockquote>

<h3 id="当前的rag">当前的RAG</h3>

<p>RAG：检索增强生成（RAG）通过引入外部知识，缓解大型语言模型（LLMs）在开放域问答任务（OpenQA）中产生的事实错误和虚构输出问题。</p>

<p>现有的RAG方法使用LLMs来预测检索时机，<strong>所以RAG的现有问题</strong>：</p>

<ul>
  <li>直接使用检索到的信息进行生成而不考虑检索时机是否准确反映实际信息需求</li>
  <li>也没有足够考虑先前检索到的知识</li>
  <li>后果：<strong>这可能导致信息收集和交互不足，产生质量低下的答案。</strong></li>
</ul>

<h3 id="解决办法">解决办法</h3>

<p><strong>Adaptive Note-Enhance RAG（Adaptive-Note）</strong>,用于复杂的QA任务</p>

<ul>
  <li>迭代信息收集器</li>
  <li>自适应记忆审阅器</li>
  <li>任务导向生成器</li>
</ul>

<p>新的范式：<strong>Retriever-and-Memory</strong></p>

<p>具体：</p>

<ol>
  <li>给出了一个总体的的方法观点来解决知识增长的问题
    <ol>
      <li>以note的形式迭代收集新信息</li>
      <li>并将其更新到现有的最佳知识结构中，</li>
      <li>目的：从而增强高质量的知识互动。</li>
    </ol>
  </li>
  <li>给出了一种基于注释的自适应停止探索策略，以决定“检索什么以及何时停止”，
    <ol>
      <li>目的：以鼓励充分的知识探索。</li>
    </ol>
  </li>
</ol>

<h3 id="结果实验">结果&amp;实验</h3>

<p>我们在五个复杂的QA数据集上进行了大量实验，结果表明我们的方法及其组件的优越性和有效性。</p>

<h2 id="引言">引言</h2>

<h3 id="rag当前的问题">RAG当前的问题</h3>

<ul>
  <li>LLM遇到幻觉和事实性错误，用RAG解决</li>
  <li>RAG：这是一种利用外部非参数化知识资源来帮助LLMs推动其固有参数知识边界的有前途的技术</li>
  <li>当前的RAG范式：Retriever-and-Reader</li>
  <li>当前RAG的缺点：<strong>无法收集足够的信息来完成long-form QA和 multi-hop QA 这些复杂的QA</strong>
    <ul>
      <li>原因：</li>
      <li>mutil-hop QA：通常涉及广泛或深入的信息检索需求，这些需求可能没有明确反映在初始查询中，或者在单次检索尝试中很容易实现。
        <ul>
          <li>例子：在多跳QA中，要回答“丹麦足球联盟所属组织的首字母缩写是什么？”，我们必须首先搜索首字母缩写“FIFA”，然后搜索“FIFA”代表什么。</li>
        </ul>
      </li>
      <li>long-form QA ：处理<strong>含糊查询</strong>需要探讨各个相关方面并深入细节，生成全面和长格式的答案。</li>
    </ul>
  </li>
</ul>

<h3 id="当前的解决办法">当前的解决办法</h3>

<p>ARAG：为了解决“何时检索以及检索什么内容”的问题，试图通过灵活的知识捕获机制来提升回答质量。</p>

<p>缺点：</p>

<ol>
  <li><strong>逐步生成问题</strong>：每次检索都会立即生成一个输出，这会导致每个输出段仅反映当前检索到的有限知识，而忽略了跨不同检索步骤的信息整合和交互。</li>
  <li><strong>检索时机的预测偏差</strong>：ARAG利用LLM预测检索的时机，但由于LLM的内部认知与实际检索需求的差异，可能会错过关键的检索时机，导致知识收集不充分。</li>
</ol>

<h3 id="作者的解决办法">作者的解决办法</h3>

<p>针对这种复杂的QA问题</p>

<p>提出了基于新范式<strong>Retriever-Memory</strong>的模型<strong>Adaptive Note-Enhance RAG（Adaptive-Note）</strong></p>

<h4 id="模型介绍">模型介绍</h4>

<p>模型由两部分组成：<strong>Iterative Information Collector (IIC)</strong>、 <strong>Adaptive Memory Reviewer (AMR)</strong></p>

<p>作用：自适应地从一个成长的视角收集信息，并灵活地将新知识与所有已收集的知识整合，实现良好的性能。</p>

<h5 id="iic模块">IIC模块</h5>

<blockquote>
  <p>note 是哪种形式呢？</p>

  <p>知识结构是如何被优化的？</p>

  <p>IIC是怎么确保最大化调整与原始查询相关的所有细节？</p>

  <p>新note是如何被加入原本note中的？</p>
</blockquote>

<ol>
  <li><strong>知识整合问题</strong>：为解决不同检索步骤间信息交互不足的问题，IIC引入了“笔记（note）”作为知识的存储载体，而不是在每次检索后立即生成结果。</li>
  <li><strong>最大化搜索：</strong>IIC不是在检索后立即生成结果，而是最大化调整与原始查询相关的所有细节，并将它们存储在笔记中。</li>
  <li><strong>动态更新</strong>：每当有新的检索信息，IIC会将其以文本形式适应性地添加到已有的笔记中，以保证知识结构的连续性和优化。（知识结构会被持续更新和优化，整合之前所有检索步骤中有效的信息，使得最终的知识结构更全面、更准确。）</li>
</ol>

<p>总之，这段描述了IIC如何通过笔记存储和持续优化的方式，使得各检索步骤之间的信息能够有效整合，避免了因即时生成输出而导致的知识片面性。</p>

<h5 id="amr模块">AMR模块</h5>

<blockquote>
  <p>疑问一：<strong>和主动检索有什么区别呢？</strong></p>

  <p>论文中的 <strong>note-based stop-exploration strategy（基于笔记的停止探索策略）</strong> 和 <strong>active retrieval（主动检索）</strong> 的区别在于知识收集的方式和控制检索过程的策略：</p>

  <ol>
    <li>
      <p><strong>检索触发方式</strong>：</p>

      <ul>
        <li><strong>Active Retrieval</strong>：模型在回答过程中动态地判断是否需要额外检索，依据的是当前回答生成的反馈或置信度来决定是否触发新的检索。</li>
        <li><strong>Note-based Stop-Exploration</strong>：则是基于一个“笔记”作为知识的存储和整合载体。在检索过程中，所有获得的有用信息都会被存储到笔记中，并逐步整合和优化。当模型发现笔记中已有的知识结构已经足够完善时，就会触发停止条件，从而不再继续检索。</li>
      </ul>
    </li>
    <li>
      <p><strong>停止机制</strong>：</p>

      <ul>
        <li><strong>Active Retrieval</strong> 关注的是在生成过程中的动态需求，检索可能是分阶段触发的，不一定有明确的停止点，因此容易受到时机偏差（timing bias）的影响。</li>
        <li><strong>Note-based Stop-Exploration</strong> 使用一个“笔记”来不断积累和评估知识的完整性，只有在知识增长不足或达到特定条件时才停止检索。这种方法可以有效规避时机偏差，确保所有检索的知识都得到充分整合，停止条件更明确和系统化。</li>
      </ul>
    </li>
    <li>
      <p><strong>使用目的</strong>：</p>

      <ul>
        <li><strong>Active Retrieval</strong> 更适合用于逐步生成答案时需要特定信息的情况。</li>
        <li><strong>Note-based Stop-Exploration</strong> 则更适合在复杂问题中进行广泛信息整合和更新，以确保所有相关知识都完整且无冗余地存储在笔记中，用于提供高质量、全面的回答。</li>
      </ul>
    </li>
  </ol>

  <p>总结来说，active retrieval 是一种动态的、基于反馈的检索触发机制，而 note-based stop-exploration 是一种通过笔记积累和评估来确定停止检索的策略，更侧重于避免检索过度并确保知识整合的全面性。</p>

  <p>疑问二：<strong>the timing bias of active retrieval predictions是什么意思？</strong></p>

  <p>模型在回答过程中会主动判断何时需要检索额外信息，但由于模型对检索需求的预测可能不准确，可能会导致以下两种情况：</p>

  <ol>
    <li><strong>过早或过晚检索</strong>：模型可能在不需要时启动检索，或在需要时却未能及时检索，导致检索结果的时机与实际信息需求不匹配。</li>
    <li><strong>知识缺失</strong>：错过关键检索时机会造成知识收集不充分，影响最终回答的质量。</li>
  </ol>

</blockquote>

<p>用自适应基于note的停止搜索策略（note-base stop-exploration strategy）替换不确定的主动检索</p>

<p>具体：</p>

<ol>
  <li>它确定最佳笔记作为最佳记忆，并用它来决定“什么时候检索以及何时停止”</li>
  <li>我们的自适应策略允许首先进行贪婪勘探。如果在特定时刻，笔记不再获得知识增益，则信息收集停止。</li>
</ol>

<p>好处：这种策略有效地避免了主动检索预测的时机偏见，并确保持续的知识增益</p>

<h3 id="实验结果">实验&amp;结果</h3>

<blockquote>
  <p>零样本就可，无需少样本训练是怎么实现的？</p>
</blockquote>

<h4 id="实验">实验</h4>

<p>我们在五个复杂的QA数据集上进行了大量实验，涉及总体性能比较、定量消融研究和参数分析。结果突出了Adaptive-Note的优越性、有效性和普适性，同时确认了核心组件的有效性。</p>

<h4 id="贡献">贡献</h4>

<ol>
  <li><strong>模型：</strong>我们探索了LLMs处理复杂QA任务的能力，并首次提出了一种基于新范式（Retrieverand-Memory）的称为Adaptive-Note的方法。大量实验结果表明，Adaptive-Note在五个复杂QA数据集上显著超越现有方法，改进达到了8.8%。</li>
  <li><strong>策略：</strong>我们引入了一种基于笔记的自适应知识探索策略，通过知识增长的视角加强。因此，Adaptive-Note可以持续收集相关知识并自适应地记忆最优知识，产生高质量答案。</li>
  <li><strong>设计实现：</strong>我们将Adaptive-Note设计为一种通用且即插即用的方法，可以轻松适应任何现有的LLMs而无需额外训练，而且它可以在仅仅零样本设置下取得出色的性能，而无需使用精心设计的少样本示例。</li>
</ol>

<h2 id="相关工作">相关工作</h2>

<h3 id="openqa">OpenQA</h3>

<p>开放域问答（OpenQA）。开放域问答（OpenQA）（Voorhees 1999）旨在利用大规模和非结构化信息以自然语言形式回答与领域无关的问题（Zhu et al. 2021）。</p>

<p>现代开放QA任务的方法通常遵循Retriever和Reader范式（Chen et al. 2017; Das et al. 2019; Wang et al. 2024）。</p>

<h4 id="retriever">Retriever</h4>

<p>“Retriever”负责根据给定的问题检索相关文档，主流方法包括：</p>

<ol>
  <li>基于稀疏向量的检索，如TFIDF和BM25；</li>
  <li>最近开发的基于密集向量的检索，如DPR（Karpukhin等人，2020）和Contriever（Izacard等人，2022）。</li>
</ol>

<h4 id="reader">Reader</h4>

<p>Reader致力于理解检索到的段落，然后推断出正确答案。</p>

<p>过去几年，Reader广泛采用了Fine-tuned预训练模型，建立在基于transformer的体系结构之上。</p>

<p>最近，<strong>LLMs涌现的能力-无需微调</strong>，<strong>基于提示的上下文学习</strong>（ICL）（Brown等人，2020）。这使得LLMs仅仅通过提供少量演示样本便能在OpenQA任务中取得极具竞争力的表现。</p>

<p>我们的工作主要集中在利用LLMs解决OpenQA任务，并提出了一种新颖有效的范式，即Retriever-and-Memory。</p>

<h3 id="rag">RAG</h3>

<p>这段内容讨论了<strong>检索增强生成（RAG）</strong>技术的演变及其在复杂问答任务中的应用和挑战，并引入了<strong>自适应检索增强生成（ARAG）</strong>概念作为改进。具体解释如下：</p>

<ol>
  <li><strong>传统RAG方法及其局限</strong>：
    <ul>
      <li>传统的RAG方法基于“检索器-阅读器”结构，检索器（Retriever）从外部知识库中检索到与问题相关的段落，然后将这些段落输入到语言模型（LLM）中生成答案。</li>
      <li>早期的方法是单次检索（single-time RAG），即一次性检索所需的段落并直接生成答案。但在复杂的问答任务（如multi-hop QA和long-form QA）中，单次检索往往不足以获取完整的信息，导致回答内容不充分。</li>
    </ul>
  </li>
  <li><strong>多次检索（multi-time RAG）方法的尝试和问题</strong>：
    <ul>
      <li>为了解决单次检索信息不足的问题，一些方法（如Trivedi et al. 2023；Borgeaud et al. 2022）在生成过程中尝试多次检索，即在生成答案时连续检索新的信息。</li>
      <li>但是，多次检索可能导致模型不加区分地持续获取信息，这样如果某个检索步骤引入了错误或不相关的信息，会导致低质量的回答。</li>
    </ul>
  </li>
  <li><strong>自适应RAG（ARAG）方法的提出</strong>：
    <ul>
      <li>为了解决上述问题，提出了自适应RAG（ARAG）方法。ARAG方法通过不同的反馈机制自动决定“何时检索、检索什么”，以更加精准地满足问题的知识需求。</li>
      <li>目前主流的ARAG方法包括<strong>Flare</strong>（Jiang et al. 2023）和<strong>Self-RAG</strong>（Asai et al. 2024）。例如，Flare方法在生成过程中，如果检测到低置信度的词汇（即不确定的词），则会触发检索；但这种置信度判断可能无法完全反映实际检索需求。Self-RAG方法则通过自反性（self-reflective）的标记来判断是否需要检索及评估检索内容的质量，但这对LLM生成的自反性输出准确性要求较高。</li>
    </ul>
  </li>
  <li><strong>本文提出的解决办法</strong>：
    <ul>
      <li>由于上述ARAG方法在时机判断上的局限性，作者的目标是从“知识增长”的角度建立一个更高效、稳定的自适应RAG框架，以更加合理地控制检索过程，提高回答质量。</li>
    </ul>
  </li>
</ol>

<h2 id="方法">方法</h2>

<blockquote>

  <p>最佳记忆是什么意思？Mopt</p>

  <p>AMR怎么触发的终止条件？</p>
</blockquote>

<p>模型分为三部分：一个迭代信息收集器，一个自适应记忆审阅者和一个面向任务的生成器。</p>

<h3 id="总体工作流程">总体工作流程</h3>

<h4 id="初始化阶段">初始化阶段</h4>

<ol>
  <li>输入问题q，然后在IIC中进行检索，得到前k个段落p</li>
  <li>然后k个段落输入到LLm中生成一个初始note$N_0$</li>
  <li>$N_0$作为初始记忆$M_0$，视为$M_{opt}$</li>
</ol>

<h4 id="迭代阶段">迭代阶段</h4>

<ol>
  <li>利用当前的$M_{opt}$和原始查询q生成第t步时的新查询$q_t$</li>
  <li>然后检索新的相关文章$p_t^i \in P_t$ 然后作为现在当前的状态$N_t$</li>
  <li>然后AMR 对$N_t$和$M_{opt}$进行多维度评估得到一个二进制结果
    <ol>
      <li>如果为true表示$N_t$应该替换记忆的内容</li>
      <li>反之就不用</li>
    </ol>
  </li>
  <li>直到AMR触发迭代的终止条件。</li>
</ol>

<h4 id="最终阶段">最终阶段</h4>

<p>使用面向任务的生成器，用$M_{opt}$作为上下文输入，通过LLM zero-shot 上下文学习（ICL）输出最终答案$a\in A$</p>

<h3 id="模块1iic模块">模块1：IIC模块</h3>

<p><img src="/assets/posts_assets/Retriever-and-Memory%20Towards%20Adaptive%20%20Note-Enhanced%20Retrieval-Augmented%20Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241102171606149.png" alt="image-20241102171606149" /></p>

<h4 id="阶段一note初始化">阶段一：Note初始化</h4>

<ol>
  <li>
    <p>将q作为输入给BM25得到k个文章 $P_0$</p>
  </li>
  <li>
    <p>然后用LLM生成note $N_0$并且作为$M_0$直接赋给$M_{opt}$,将被用作后续迭代信息收集阶段的输入</p>

    <p><strong>(作者没有对笔记的具体格式或特定信息方面施加限制，并且使用的是zero-shot的LLM)</strong>
\(N_{0}=\mathrm{LLM}(prompt_{init}(q,P_{0}))
\\N_{0}=M_{0}\rightarrow M_{opt}\)</p>
  </li>
</ol>

<h4 id="阶段二迭代的信息检索">阶段二：迭代的信息检索</h4>

<p>我们利用最佳记忆来预测下一个查询。</p>

<blockquote>
  <p>基于现有信息准确预测下一个高质量查询对有效探索语料库未知语义空间至关重要。</p>

  <p>类似于人类行为，我们根据当前的最佳理解提出新问题。</p>

  <p>这些promt都是什么？</p>

  <p>怎么判断Nt相对于Mopt是否具有新的或额外的非冗余信息</p>
</blockquote>

<p>输入：原始查询q，$M_{opt}$ 和已经问过的问题列表（防止重复问）</p>

<p>生成下一步的query
\(q_{t}=\mathrm{LLM}(prompt_{q}(q,M_{opt},Q_{ask})),q_{t}\notin Q_{ask}\\Q_{ask}=\{q_{1},q_{2},\ldots,q_{t-1}\}\)
$prompt_q$表示用于产生下一个检索的提示模板。已提问的查询列表$Q_{ask}$包含所有先前生成的查询。</p>

<h4 id="阶段三更新note阶段">阶段三：更新note阶段</h4>

<p>目标：利用新的查询来探索语料库中潜在的与查询相关的语义子空间，并将新检索到的段落无缝地整合到现有知识中。</p>

<h5 id="怎么设定prompt">怎么设定prompt？</h5>

<p><strong>无固定模式</strong>：与笔记初始化阶段类似，在整合新知识时，不会预定义特定的模式（如简单地附加或插入信息），以避免限制大语言模型（LLM）的多样性和灵活性。这意味着新信息的整合过程是开放的，可以根据实际需求灵活调整。</p>

<p><strong>信息增长的视角</strong>：该方法的核心在于如何有效促进信息的增长，而不是强制遵循固定的结构。这种灵活性允许模型在处理复杂信息时，能够收集、提炼和更新知识，而无需严格的格式限制。</p>

<h5 id="流程">流程</h5>

<ol>
  <li>我们首先使用新查询$q_t$检索k个新段$P_t$。</li>
  <li>接下来，我们将q、$Pt$和$M_{opt}$输入到LLM中，采用zero-shot上下文学习（ICL），最终生成更新的笔$N_t$。</li>
</ol>

\[N_{t}=\mathrm{LLM}(prompt_{update}(q,P_{t},M_{opt}))\]

<p>$prompt_{update}(·)$表示用于更新笔记的提示模板，在三个关键方面为LLM提供多维指导：</p>

<ol>
  <li>忠实性。所收集的信息应符合检索文档的风格，尽可能地使用原始摘录；</li>
  <li>有效性。所收集的信息应有助于解决原始查询；</li>
  <li>可扩展性。所收集的信息不应已包含在内存中；换句话说，只需添加新的语义内容。我们还提供了信息增长的观点来描述这一更新过程，即基于现有的$M_{opt}$知识收集新信息，生成更新的$Nt$。</li>
</ol>

\[N_t=M_{opt}\cup\left(\bigcup_{i=1}^{k}p_{t}^{i}\right)\]

<p>这里，$M_{opt}$是通过逐步更新得出的，逐渐比较和选择最高质量的笔记作为记忆，而不是依赖于一次性的比较。</p>

<h3 id="模块2amr模块">模块2：AMR模块</h3>

<p>自适应记忆审核者专注于两个关键问题：“$M_{opt}$是什么”和“何时停止检索”。</p>

<h4 id="m_opt是什么样子的">$M_{opt}$是什么样子的</h4>

<p>我们指导LLM仔细审查在笔记更新阶段生成的更新笔记$N_t$的内容和最佳记忆$M_{opt}$的内容，然后比较它们的内容质量。</p>

<p>如果$N_t$的质量高于$M_{opt}$，则$N_t$将替换原始记忆内容成为最新的最佳记忆。</p>

<p>否则，$M_{opt}$的内容保持不变。
\(f_{c}(N_{t},M_{opt})=\begin{cases}\mathrm{True},&amp;\mathrm{if~}N_{t}\mathrm{~is~better~than~}M_{opt}\\\mathrm{False},&amp;\mathrm{if~}M_{opt}\mathrm{~is~better~than~}N_{t}\end{cases}\\ \\
N_{t}\to M_{opt}, \mathrm{if} f_{c}(N_{t},M_{opt})=\mathrm{True}\)
其中，$f_c(.)$ 表示内容质量比较函数，→ 表示“存储在”。</p>

<ol>
  <li>
    <p>首先判断Nt相对于Mopt是否具有新的或额外的非冗余信息。</p>
  </li>
  <li>
    <p>此外，为了进行多维度比较，我们在$f_c(.)$的prompt中使用zero-shot 设置制定质量比较的评价标准。</p>

    <p>评价标准包括：</p>

    <ol>
      <li>内容是否包含与问题直接相关的关键信息</li>
      <li>内容是否具有多个方面</li>
      <li>内容是否包含充分的细节</li>
      <li>内容是否足够实用。</li>
    </ol>
  </li>
</ol>

<h4 id="什么时候停">什么时候停?</h4>

<p>我们建立了三个停止条件来自适应地控制笔记更新，从而间接控制信息收集。</p>

<h5 id="三种停止条件">三种停止条件：</h5>

<p>条件 1：信息更新质量不佳</p>

<ul>
  <li><strong>描述</strong>：如果更新后的笔记质量未能超过当前最佳记忆 $M_{\text{opt}} $的质量，则视为一次无效的信息收集。</li>
  <li><strong>无效更新计数（IU）</strong>：设定一个无效更新计数阈值 $ T_{\text{IU}} $，即允许的最大无效信息收集轮数。如果无效更新次数达到此阈值，则停止迭代。</li>
</ul>

<p>条件 2：信息收集步数过多</p>

<ul>
  <li><strong>描述</strong>：某些查询可能涉及大量细节性信息（“长尾知识”），这些信息在多次迭代后会不断增加到笔记中。然而，这些细节可能对回答原始问题并无帮助。</li>
  <li><strong>收集迭代计数（CI）</strong>：设定一个最大信息收集步数阈值 $ T_{\text{CI}} $，即允许的最大信息收集步骤数。如果迭代步数达到此阈值，则停止迭代。</li>
</ul>

<p>条件 3：检索的段落数过多</p>

<ul>
  <li><strong>描述</strong>：如果检索的段落数持续增加，但信息对回答原始问题没有显著帮助，也会导致信息冗余。</li>
  <li><strong>检索段落计数（RP）</strong>：设定一个最大去重检索段落数阈值 $ T_{\text{RP}} $，即最多允许去重后的段落数。如果检索的段落数达到此阈值，则停止迭代。</li>
</ul>

<h5 id="停止机制">停止机制：</h5>

<ul>
  <li>这三个阈值（$ T_{\text{IU}} $、$ T_{\text{CI}} $ 和 $ T_{\text{RP}} $）作为迭代停止条件。如果满足其中任一条件，即会触发终止机制，停止信息收集和更新过程。</li>
</ul>

\[\langle\mathbf{Stop}\rangle=\mathbf{1}\left\{IU\geq T_{IU}\vee CI\geq T_{CI}\vee RP\geq T_{RP}\right\}\]

<ul>
  <li>停止符号⟨Stop⟩是一个布尔值，表示是否停止迭代过程。符号≥表示满足任何触发条件都会返回1。</li>
</ul>

<h3 id="模块3面向任务的生成器">模块3：面向任务的生成器</h3>

<p>任务导向型生成器读取最佳内存$M_{opt}$，并输出原始查询q的答案α。</p>

<p>由于不同QA任务的输出风格（例如长或短的生成），我们将prompt定制为任务导向型。</p>

<blockquote>
  <p>例如，多跳QA任务需要简短精确的输出，通常只有几个词，而我们内存中的知识则呈现为长文本。因此，我们指导LLM仅输出关键答案，不包括多余的词语。相比之下，对于长篇QA任务，我们指导响应风格而非严格的限制。</p>
</blockquote>

\[\alpha=\mathrm{LLM}(prompt_{g}(q,M_{opt}))\]

<p>$prompt_g(·) $代表任务导向生成器的promt模板集合</p>

<h2 id="实验-1">实验</h2>

<h3 id="数据集和评估指标">数据集和评估指标</h3>

<ul>
  <li>
    <p><strong>Multi-hop QA任务</strong>：选择了三个具有挑战性的英语数据集进行评估，即 HotpotQA、2WikiMultiHopQA（2WikiMQA）和 MuSiQue。每个数据集使用了Trivedi等（2023）发布的一个包含500个随机选择样本的子集。评估指标包括F1分数（F1）和精确匹配（EM），用于衡量答案的准确性和完整性。</p>
  </li>
  <li>
    <p><strong>Long-form QA任务</strong>：选择了一个英语数据集ASQA和一个中文数据集CRUD。ASQA数据集使用ALCE（Gao等，2023）重新编译的948个查询，并使用其官方的评估指标，即字符串精确匹配（str-em）和字符串命中率（str-hit）。对于CRUD数据集，只使用其QA任务的数据集（包含单文档和多文档QA样本），并采用CRUD提出的RAGQuestEval评估指标，包括问题级别的召回率（Q-R）、标记级别的F1（T-F1）、召回率（T-R）和精确率（T-P）。</p>
  </li>
</ul>

<h3 id="基线模型和llms">基线模型和LLMs</h3>

<ul>
  <li>比较了三种基线模型：
    <ol>
      <li><strong>No Retrieval (NoR)</strong>：直接将查询输入到LLM中生成答案，不进行任何检索过程。</li>
      <li><strong>Single-time RAG (STRAG)</strong>：一次性检索知识用于回答原始查询。</li>
      <li><strong>Adaptive RAG (ARAG)</strong>：采用自适应的前向探索策略，逐步检索知识以提升答案质量。</li>
    </ol>
  </li>
  <li>使用GPT-3.5作为NoR的内置LLM。对于STRAG，选择了Vanilla RAG、Chain-of-note、Self-refine和Self-rerank作为对比模型。ARAG中包含FLARE、Self-RAG和ReAct三种方法进行比较。具体实现方面，Self-RAG和ReAct使用了Langchain框架。此外，还进行了多种LLM的实验，包括GPT-3.5-turbo-0125、Qwen2-7b和Llama3-8b，默认情况下使用GPT-3.5作为模型。</li>
</ul>

<h3 id="检索器和语料库">检索器和语料库</h3>

<ul>
  <li>为了确保所有基线模型之间的公平比较，在每个数据集中对检索器和语料库进行了统一设置。</li>
  <li>对于所有Multi-hop数据集，使用BM25作为检索器（通过Elasticsearch实现），语料库为Trivedi等（2023）发布的数据集对应语料。</li>
  <li>对于ASQA，使用密集检索器GTR-XXL，并使用ALCE提供的语料库（基于2018年12月20日的Wikipedia快照，分割为100词的段落）。</li>
  <li>对于CRUD，使用了包含80000个中文新闻文档的语料库，遵循CRUD的检索配置（块大小为512，top-k为2）。除CRUD外，其他数据集的默认top-k为5。</li>
</ul>

<h3 id="提示的设置">提示的设置</h3>

<ul>
  <li>实验方法在零-shot的设置下进行所有LLM推理。由于不同数据集需要不同的输出格式，因此为每个数据集设计了相应的提示（prompt）。为确保所有方法在同一数据集上的公平性，统一了生成时的提示。</li>
  <li>对于三个具有相似输出格式的Multi-hop QA数据集，设计了相同的提示，引导LLM基于给定内容直接生成答案，减少不必要的词语。对于ASQA和CRUD，遵循作者提供的提示配置，去掉了ALCE的引用输出功能和CRUD的few-shot设置。</li>
</ul>

<h3 id="自适应过程的设置">自适应过程的设置</h3>

<ul>
  <li>在自适应过程中，为了在较低预算内达到最佳效果，将检索段落数量（RP）限制为15。默认情况下，收集器迭代计数（CI）和无效更新计数（IU）分别设置为3和1。</li>
</ul>

<h2 id="结果与分析">结果与分析</h2>

<p><img src="/assets/posts_assets/Retriever-and-Memory%20Towards%20Adaptive%20%20Note-Enhanced%20Retrieval-Augmented%20Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241102233616465.png" alt="image-20241102233616465" /></p>

<h3 id="1-主要结果">1. <strong>主要结果</strong></h3>
<ul>
  <li><strong>与单次检索RAG方法的比较</strong>：使用GPT-3.5作为所有方法的内置LLM，实验结果显示，所提出的方法显著优于单次检索方法。特别是在2WikiMQA数据集上，相比Vanilla RAG，性能提升达12.2%。这是因为单次检索方法依赖于单次检索的质量，而Adaptive-Note方法则可以在语料库中自适应地探索更多知识，提升答案质量。</li>
  <li><strong>与其他自适应RAG方法的比较</strong>：与FLARE、Self-RAG和ReAct等自适应RAG方法相比，Adaptive-Note在多跳QA和长篇QA任务上持续取得最高表现。这是因为Adaptive-Note方法采用了贪婪的信息收集策略，充分整合每个检索到的段落，避免了忽略关键知识的问题。</li>
</ul>

<h3 id="2-不同llm上的表现">2. <strong>不同LLM上的表现</strong></h3>
<ul>
  <li>为验证方法的通用性，作者在GPT-3.5、Qwen2-7b和Llama3-8b上进行了实验，结果表明Adaptive-Note在所有模型上均显著优于Vanilla RAG，验证了方法的鲁棒性和通用性。</li>
</ul>

<h3 id="3-公平top-k下的深入比较">3. <strong>公平top-k下的深入比较</strong></h3>

<p>Vanilla RAG 在公平的 top-k 设置下的整体性能。</p>

<p><img src="/assets/posts_assets/Retriever-and-Memory%20Towards%20Adaptive%20%20Note-Enhanced%20Retrieval-Augmented%20Generation%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241104150516311.png" alt="image-20241104150516311" /></p>

<p>由于自适应RAG方法（如Adaptive-Note）在检索过程中会进行多次、动态的检索，可能最终获取的信息量比一次性检索的RAG（如Vanilla RAG）要多，直接比较两者的检索结果会存在不公平性。因此，为了进行公平比较，作者引入了“公平top-k”的概念。</p>

<ul>
  <li>为了在相同top-k设置下进行更公平的性能比较，作者计算了自适应检索步骤中去重后的平均检索段落数量作为“公平top-k”。结果显示，在所有数据集上，Adaptive-Note在公平top-k设置下的表现仍然优于Vanilla RAG。</li>
</ul>

<h3 id="4-消融实验">4. <strong>消融实验</strong></h3>
<ul>
  <li><strong>迭代信息收集器（IIC）的有效性</strong>：实验表明，仅使用IIC模块就能提升性能，尤其在多跳QA任务中效果更明显，因为该模块能生成基于前序知识的新查询，有助于多跳推理。</li>
  <li><strong>自适应记忆审查器（AMR）的有效性</strong>：与不使用AMR模块相比，加入AMR可以进一步提高性能，因为AMR模块能够在高质量笔记生成后提前停止检索，减少不相关噪音。</li>
</ul>

<h3 id="5-参数分析">5. <strong>参数分析</strong></h3>
<ul>
  <li><strong>CI和IU的影响</strong>：在固定IU为1的情况下，CI增加时，多跳QA数据集的性能提升；对于长篇QA任务，CI=2已能达到最佳性能。</li>
  <li><strong>top-k的影响</strong>：在不同top-k设置下，Adaptive-Note始终优于Vanilla RAG，验证了其在不同检索段落数量下的稳定性。</li>
</ul>

<p>总结来说，Adaptive-Note在复杂QA任务中展现了显著的性能优势和良好的通用性，通过有效的信息收集和整合策略，提升了答案的准确性和覆盖度。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="nlp" /><category term="自然语言处理" /><category term="论文笔记" /><summary type="html"><![CDATA[Retriever-and-Memory: Towards Adaptive Note-Enhanced Retrieval-Augmented Generation论文笔记]]></summary></entry><entry><title type="html">WebCPM 论文精读</title><link href="http://localhost:4000/2024/10/28/WEBCPM-Interactive-Web-Search%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="WebCPM 论文精读" /><published>2024-10-28T00:00:00+08:00</published><updated>2024-10-28T00:00:00+08:00</updated><id>http://localhost:4000/2024/10/28/WEBCPM%20Interactive%20Web%20Search%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/2024/10/28/WEBCPM-Interactive-Web-Search%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.html"><![CDATA[<h1 id="webcpm-interactive-web-search-for-chinese-long-form-question-answering-论文笔记">WEBCPM: Interactive Web Search for Chinese Long-form Question Answering 论文笔记</h1>

<p><!---more--></p>

<blockquote>
  <p>论文来源：老师发的</p>

</blockquote>

<h2 id="摘要">摘要</h2>

<h3 id="背景"><strong>背景：</strong></h3>

<ul>
  <li>长格式问题回答（LFQA）：用详细的段落长度的回答来回答复杂的开放性问题。
    <ul>
      <li>LFQA的事实范式需要两个步骤：信息检索，搜索相关支持事实，信息综合，将这些事实整合成连贯的答案。</li>
    </ul>
  </li>
</ul>

<h3 id="工作"><strong>工作：</strong></h3>

<ul>
  <li>我们介绍了WebCPM，这是第一个中文LFQA数据集。
    <ul>
      <li>WebCPM的一个独特特点是，它的信息检索基于实时交互式网络搜索，与搜索引擎进行互动。</li>
      <li>数据来源：在WebGPT的基础上，我们开发了一个网络搜索界面。我们招募注释员使用我们的界面进行相关信息的搜索，然后回答问题。同时，我们会记录注释员的网络搜索行为。总共，我们收集了5500个高质量的问题-回答对，以及15372条支持性事实和125954个网络搜索操作。</li>
    </ul>
  </li>
  <li>
    <p>我们对预训练语言模型进行微调，以模仿人类行为进行网络搜索，并生成基于收集到的事实的答案。</p>

    <p>结果：我们的LFQA流程是基于这些经过微调的模型构建的，在我们的数据集和DuReader（He等人，2018）中的案例分别在32.5%和47.5%的情况下生成的答案不比人类编写的答案差。</p>
  </li>
</ul>

<h2 id="引言">引言</h2>

<h3 id="lfqa">LFQA：</h3>

<ul>
  <li>长篇问题回答（LFQA）（Fan等，2019）的目标是用详细的段落长度回答复杂的开放式问题。</li>
  <li>当前的LFQA解决方案通常遵循检索-综合范式，包括两个核心要素：信息检索和信息综合。</li>
  <li>前者搜索外部知识源（例如网络）以获取各种相关支持事实，后者将收集到的事实整合到一致的答案中。</li>
</ul>

<p>缺点：传统LFQA范式的一个缺陷是通常倾向于使用非交互式检索方法，即使用原问题作为查询来检索一大堆未筛选的信息。</p>

<p>改进：人类能够通过与搜索引擎实时互动进行交互式网络搜索。</p>

<ul>
  <li>对于复杂问题，人类往往会将其分解成多个子问题，并按顺序提问。通过识别和浏览相关信息，人类可以改善对主题的理解，并通过提出后续问题或相关术语来完善他们的搜索。</li>
  <li>这一迭代过程能够扩大他们的搜索范围并提升他们的搜索结果。<strong>总的来说，交互式网络搜索不仅提供了多样的信息来源，而且反映了人类解答问题的认知过程，从而提高了可解释性。</strong></li>
</ul>

<h3 id="webgpt">WebGPT</h3>

<p>关于交互式网络搜索大模型的研究WebGPT：</p>

<ul>
  <li>优点：在实验中，WebGPT展现出了优异的LFQA能力，甚至超过了人类专家。</li>
  <li>问题：尽管其性能令人印象深刻，但WebGPT对于社区仍然是个谜。这是因为WebGPT的界面、数据集和训练模型并不公开，其核心设计元素的内部运作仍然不透明。这些因素使得社区很难理解LFQA互动网络搜索的挑战，并继续探索这一研究领域。</li>
</ul>

<h3 id="所做的工作">所做的工作</h3>

<ol>
  <li>
    <p>构建了一个接口</p>

    <p>用户可以执行预定义的操作来进行多轮搜索和浏览。当在网页上找到相关信息时，他们可以将其记录为支持事实。同时，他们的网络浏览行为将被记录下来。收集到足够的信息后，用户可以完成网络搜索并基于所收集的事实回答问题。</p>
  </li>
  <li>
    <p>构建数据集WebCPM</p>

    <p>基于界面，我们选择中文作为测试平台，并构建WebCPM，重点关注具有中文预训练模型的交互式Web搜索。WebCPM是第一个涉及交互式网络搜索的公共QA数据集，也是针对中文LFQA的第一个数据集。WebCPM包含5,500个问答对，以及15,372个支持事实和125,954个网络搜索操作。表1总结了WebCPM与相关QA数据集之间的差异。在现有的中文QA数据集中，WebCPM具有最长的问题、支持事实和答案，显示出问题的复杂性和答案的丰富性。</p>
  </li>
</ol>

<p><img src="/assets/posts_assets/WEBCPM%20Interactive%20Web%20Search%20for%20Chinese%20Long-form%20Question%20Answering%20%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241023162941047.png" alt="image-20241023162941047" /></p>

<ol>
  <li>构建模型，提出模型架构
    <ol>
      <li>一个搜索模型，模拟人类网络搜索行为进行信息检索。具体来说，搜索模型包括三个模块，在我们的界面上执行一系列预定义的操作：动作预测模块、搜索查询生成模块和支持事实提取模块；</li>
      <li>一个综合模型，根据收集到的事实生成连贯的答案。</li>
    </ol>
  </li>
</ol>

<h4 id="结果">结果</h4>

<p>选择了8个代表性的预训练语言模型（PLMs），参数规模高达10B，并评估它们在交互式网络搜索和信息合成方面的能力。</p>

<ul>
  <li>人类评估显示，我们的管道在测试集上的答案生成比人类差的情况占32.5％。当应用于问题的答案标注长度超过400个汉字的DuReader（He等，2018）时，我们的管道在47.5％的情况下生成比黄金标注答案更好的答案，表现出令人满意的超出分布的泛化性能。</li>
  <li>我们还展示了我们的搜索模型超越了传统的非交互检索方法。</li>
</ul>

<p>最后，我们分析了我们的框架的核心设计元素以及我们的模型获得的类人行为的贡献。我们希望这些资源可以作为其他研究主题的试验平台，比如行为克隆（Bain和Sammut，1995）和工具学习（Qin等，2023）。</p>

<h2 id="相关工作">相关工作</h2>

<h3 id="信息检索">信息检索</h3>

<ul>
  <li>
    <p>以往的工作通常借助本地存储库（例如，维基百科）。最近，利用整个网络作为知识源的兴趣激增</p>
  </li>
  <li>
    <p>如何将检索到的事实结构化为LFQA中合理且细致的答案仍然未被深入探索。</p>

    <p>一些研究了人类如何构建复杂答案，通过研究长篇答案的功能结构（徐等，2022年）或探索如何在答案中组织举例（王等，2022年）; 其他人重新考虑了LFQA的现有评估标准（Krishna等，2021年）。</p>
  </li>
</ul>

<h3 id="与webgpt的比较">与WebGPT的比较</h3>

<p>我们在很大程度上遵循了WebGPT，并提出了改进的设计元素（详细内容见附录E），包括</p>

<ul>
  <li>接口：我们修改了WebGPT定义的动作，使其更易于模型学习和更用户友好；</li>
  <li>框架：我们将网络搜索分解为3个子任务，并实现了一个模块化的搜索模型。我们还探讨了如何教导合成模型忽略无关的事实（§6.3）并生成新内容（附录F.1）；</li>
  <li>评估和分析：除了按照WebGPT评估整个流水线（§6.2）之外，我们还评估了每个单独的模块（§6.1和§6.3）。这种细粒度的评估有助于我们更好地了解我们框架的核心设计元素和模型学习的人类行为所做出的贡献。</li>
</ul>

<h3 id="工具学习">工具学习</h3>

<p>PLM具有有希望的工具操作能力，即工具学习（Qin等，2023年）。</p>

<p>PLM可以在复杂的交互环境中做出顺序决策，例如在机器人任务规划（Huang等，2022a; Ahn等，2022; Huang等，2022b）、搜索引擎操作（Nakano等，2021）、在电子商务网站上购物（Yao等，2022）等方面。</p>

<p>通过利用预训练期间学到的丰富世界知识，PLM能执行扎根行动与真实世界进行互动。</p>

<p>我们期望我们的基准能够成为未来在这一领域进行探索的试验田。</p>

<h2 id="web-search">Web Search</h2>

<p>我们搭建了一个纯文本界面，用于记录人类在长篇问题中收集相关信息时的网络搜索行为。我们的界面由Bing搜索API支持，支持如图1所示的10种主流网络搜索操作。当执行某个操作时，我们的界面会响应窗口的变化。</p>

<ul>
  <li>
    <p>当执行搜索操作时，界面进入搜索模式（图1），显示了Bing针对特定查询<query>推荐的链接。</query></p>
  </li>
  <li>
    <p>每个链接由标题和特定网页的简要快照组成。</p>
  </li>
  <li>
    <p>每个窗口一次显示三个链接，可以通过执行向下滚动操作访问更多链接。</p>
  </li>
  <li>
    <p>当在当前窗口中找到第i个链接与相关时，用户可以执行加载页面 <i> 操作（i ∈ {1, 2, 3}）。</i></p>
  </li>
  <li>
    <p>界面将进入浏览模式（见附录的图6）并呈现从第<i>个网页的HTML中清除的文本。</i></p>

    <p>窗口中用户一次可以查看的内容限制在500个中文字符，可以使用滚动操作访问更多内容。用户可以利用引用操作提取当前窗口中的连续句子作为支持事实。</p>
  </li>
  <li>
    <p>为了提取跨两个窗口的文字，合并操作旨在将最后两个事实合并为一个事实（更多细节见附录A.2）。我们还为用户显示所有已提取的支持事实。</p>
  </li>
  <li>
    <p>浏览第i页后，用户可以使用“返回”动作返回到先前的搜索模式，以访问其他链接。同时</p>
  </li>
</ul>

<h2 id="数据收集">数据收集</h2>

<p>我们雇用了来自不同领域，有搜索引擎操作经验的23名注释员。我们要求他们首先利用我们的界面搜索相关信息，然后撰写细致的答案来回答长篇问题。为了质量控制，我们招募了8名熟悉QA研究领域的专家作为质量检查员。</p>

<h3 id="问题构建">问题构建</h3>

<ul>
  <li>从头开始创作新的长篇问题而没有任何参考是事倍功半的，因此我们转向公共问答论坛作为问题的来源。</li>
  <li>我们请批注者参考一个名为Reddit的英文问答论坛上的问题，并创造用中文书写的新问题。</li>
</ul>

<p>结果：通过这种方式创作的问题通常需要多轮搜索和浏览来收集足够的信息。</p>

<h3 id="交互式网络搜索">交互式网络搜索</h3>

<ul>
  <li>
    <p>给定一个问题，我们要求标注者使用我们的界面从可信的来源搜索准确和相关的信息。这个过程可能涉及多次向必应发送精炼的查询，以及探索他们认为相关的各种网页。</p>

    <p>我们要求标注者在提取信息之前仔细判断信息的事实准确性。</p>
  </li>
  <li>
    <p>搜索过程直到收集到足够的支持性事实为止。</p>
  </li>
  <li>
    <p>在我们创建的问题中，26.2%是无法回答的，最终被丢弃，因为标注者找不到足够有用的信息。</p>
  </li>
</ul>

<h3 id="答案标注">答案标注</h3>

<p>在收集到足够的支持性事实后，标注员将根据他们收集到的信息编写自包含的答案。</p>

<p>我们为他们提供答案标注的指导，包括写与问题相关且内容丰富的答案，保持逻辑一致性、清晰度和连贯性，并以公正的方式提供观点。</p>

<h3 id="质量控制">质量控制</h3>

<p>每个带注释的实例在被选入最终数据集之前都要经过质量检查员的检查和批准。</p>

<ul>
  <li>首先，检查员会手动检查在接口上记录的操作序列，并丢弃质量低劣的序列（例如，在提出的查询中存在明显的行政错误的序列）。</li>
  <li>其次，他们会仔细检查收集到的支持事实。如果这些事实明显不足以回答问题，与问题无关或事实错误，相应的操作序列将被放弃。</li>
  <li>以上流程会删除25%的收集实例。</li>
  <li>对于剩下的实例，检查员会仔细检查其注释答案。如果答案与上述要求相矛盾，检查员会将其退回给注释员，并指出哪个要求没有得到满足。注释员可能会多次修改答案，直到修改后的答案符合标准为止。</li>
</ul>

<h3 id="数据统计">数据统计</h3>

<p>最终，我们收集了5,500个实例，每个实例以(question,网页搜索行为,支持事实,答案)的元组格式记载，并记录每个动作执行的观察结果。</p>

<p>我们在图2中提供了一个示例，其中我们呈现以下内容：原始问题、简化的动作序列、收集到的支持事实和标注的答案。</p>

<p>我们将数据集划分为{4,700,400,400}个训练、开发和测试集。</p>

<p>平均而言，每个问题需要执行22.9个动作，发送2.5个查询，并加载3.3个网页。每个动作的详细比例见附录的图7。</p>

<h2 id="模型结构">模型结构</h2>

<h3 id="搜索模型">搜索模型</h3>

<p>我们将网络搜索分为3个子任务：动作预测，搜索查询生成和支持事实提取。</p>

<blockquote>
  <p>每个任务都被构造为文本到文本格式，我们使用生成式PLM训练3个单独的模块。</p>
</blockquote>

<p>如果该模块预测搜索或引用，则调用其他两个模块生成查询内容或支持事实。每个模块执行的推理都受到条件的限制。</p>

<p>每个模块都是根据当前状态$S_t$进行条件推断。</p>

<blockquote>
  <p>S_t 的内容</p>

  <ul>
    <li>$Q_0$ 原始问题，$Q_t$当前查询问题 原始问题，$Q_t$当前查询</li>
    <li>$A_t = {a_1,\dots a_{t-1} }$过去动作序列</li>
    <li>窗口Wt−1和Wt中显示的上一个和当前内容，</li>
    <li>
      <table>
        <tbody>
          <tr>
            <td>当前支持事实Ft = {f1, …, f</td>
            <td>Ft</td>
            <td>}，</td>
          </tr>
        </tbody>
      </table>
    </li>
    <li>剩余动作的数量</li>
  </ul>
</blockquote>

<p>执行了一个动作，St的组成部分将会更新。</p>

<blockquote>
  <p>W可以是搜索模式中的三个链接，也可以是浏览模式中的具体页面内容。我们只保留窗口中显示的最近两个观察值（Wt−1和Wt），而不是连接所有过去的观察值，因为后者可能会超过大型语言模型的输入长度限制。</p>
</blockquote>

<h4 id="动作预测模块">动作预测模块</h4>

<p>本模块预测下一步执行的操作。</p>

<p>由于总共有10种可能的操作，因此动作预测可以看作是一个10类别的分类任务。</p>

<p>以搜索操作为例，将{x1, …, xN}表示为动作名称“搜索”的令牌化序列，其中x∗表示特定的令牌。搜索操作的概率可以分解如下：这个公式描述了在给定当前状态 $ S_t $的情况下，“Search”动作的整体概率是如何计算的。公式分解了生成“Search”标记序列的概率，具体解释如下：</p>

<p>\(\mathcal{P}(\text{Search} \mid S_t) = \mathcal{P}(x_1 \mid S_t) \times \prod_{i=2}^{N} \mathcal{P}(x_i \mid S_t, x_1, ..., x_{i-1})\)
公式分解</p>

<ol>
  <li>
\[\mathcal{P}(x_1 \mid S_t)\]
    <ul>
      <li>这个部分表示在当前状态 $ S_t $下，第一个标记 $ x_1 $出现的概率。</li>
      <li>它是生成序列的起点。</li>
    </ul>
  </li>
  <li>
\[\prod_{i=2}^{N} \mathcal{P}(x_i \mid S_t, x_1, ..., x_{i-1})\]
    <ul>
      <li>这里的乘积符号 \(\prod\) 表示从第2个标记 \(x_2\) 一直到第 $ N $个标记的条件概率的连乘积。</li>
      <li>每一个 \(\mathcal{P}(x_i \mid S_t, x_1, ..., x_{i-1})\) 表示在当前状态 \(S_t\)以及之前生成的所有标记 \(x_1, ..., x_{i-1}\)给定的情况下，第 i个标记 $x_i$出现的概率。</li>
      <li>这个部分反映了生成整个序列的过程是一步步进行的，后续的标记生成依赖于之前已经生成的标记。</li>
    </ul>
  </li>
</ol>

<p>这个公式描述的是如何在当前状态下逐步生成一个完整的“Search”动作名称的标记序列，并且最终的“Search”动作概率是由所有标记的条件概率相乘得到的。</p>

<p>在推断过程中，我们选择具有最高概率的操作来在界面上执行。</p>

<blockquote>
  <p>如何将分类任务变成了生成任务？</p>
</blockquote>

<h4 id="查询问题模块">查询问题模块</h4>

<p>根据St生成query</p>

<h4 id="事实提取模块">事实提取模块</h4>

<table>
  <tbody>
    <tr>
      <td>在 <strong>Supporting Fact Extraction</strong> 模块中，假设当前处于浏览模式，内容窗口 $ \mathcal{W}<em>t $包含了一系列词 $ {w_1, …, w</em>{</td>
      <td>\mathcal{W}_t</td>
      <td>}}$。目标是从 $ \mathcal{W}_t$ 中提取一个支持事实 $ f = {w_i, …, w_j} $，其中 $ 1 \leq i \leq j \leq</td>
      <td>\mathcal{W}_t</td>
      <td>$。</td>
    </tr>
  </tbody>
</table>

<p>模块的关键点</p>

<ol>
  <li>
    <p><strong>问题</strong>：一个简单的方案是逐步生成 $ f $的所有标记，但这种自回归的方式在实践中推理速度较慢。</p>
  </li>
  <li>
    <p><strong>替代方案</strong>：为了提高效率，该模块仅生成 $ f $的起始和末尾几个标记（记作 $ N_f $），并在给定状态 $ S_t $下最大化概率：
\(\mathcal{P}([\text{s}], w_i, ..., w_{i+N_f-1}, [\text{e}], w_{j-N_f+1}, ..., w_j \mid S_t)\)</p>
  </li>
</ol>

<p>其中，$ [\text{s}] $和 $ [\text{e}] $分别表示支持事实的起始和结束标记。</p>

<p>具体步骤</p>

<ul>
  <li>在推理过程中，当起始和结束标记被解码后，通过文本匹配可以定位到所需的序列。</li>
  <li>如果起始或结束标记出现在 $ \mathcal{W}_t $的多个位置，该模块会提取最长的序列。</li>
  <li>增大 $ N_f $可以减少这种多位置问题的频率。</li>
  <li>如果需要从 $ \mathcal{W}_t $中提取不连续的片段，则可以连续执行多个 <strong>Quote</strong> 动作。</li>
</ul>

<h3 id="综合模型">综合模型</h3>

<p>信息综合任务学习将一系列支持事实组织成连贯的答案。</p>

<h4 id="训练">训练</h4>

<p>训练有素的搜索模型偶尔会收集无关的噪音，这会影响生成答案的质量。</p>

<p>为了解决这个问题，我们通过引入噪音来破坏综合模型的训练数据中收集到的事实。</p>

<p>具体而言，给定一系列人类提取的事实{f1，…，fN}，我们随机从其他训练实例中选择几个不相关的事实{f1’，…，f’N’}。在随机排列所有事实后，我们将它们连接起来作为最终输入。</p>

<p>在训练过程中，模型被优化为在受损的支持事实条件下生成人工注释的答案，</p>

<p>即最大化</p>

<table>
  <tbody>
    <tr>
      <td>$P(Answer</td>
      <td>Q0, f1, …, fN, f1′, …, f′N′)$。</td>
    </tr>
  </tbody>
</table>

<p>由于注释的答案不包含f∗′的信息，模型学习忽略无关的事实，仅关注生成过程中的重要信息。</p>

<h2 id="实验">实验</h2>

<h3 id="模块单独评估">模块单独评估</h3>

<h4 id="t5">T5</h4>

<ul>
  <li>$mT5_{BASE}$，mC4</li>
  <li>$mT0<em>{BASE}$,  fine tunes  $mT5</em>{BASE}$ on diverse downstream tasks.</li>
  <li>$Mengzi-T5_{BASE}$ : a 220M model pre-trained on 300G internet corpora.</li>
</ul>

<h4 id="bart">BART</h4>

<ul>
  <li>$mBart_{LARGE}$ : a 680M model pre-trained on monolingual corporaa of mutiple languages.</li>
  <li>$C-BART_{LARGE}$: a 406M model pre-trained on 200G web texts</li>
</ul>

<h4 id="cpm">CPM</h4>

<ul>
  <li>$CPM_{2.6B}$</li>
  <li>$CPM_{7B}$</li>
  <li>$CPM_{10B}$</li>
</ul>

<h4 id="评估指标">评估指标</h4>

<p>对于评估指标，我们将动作预测视为一个包含10个类别的分类任务，并选择Micro-F1和Macro-F1作为指标。</p>

<p>我们将另外三个任务视为文本生成，并计算生成序列和参考答案的Rouge-L</p>

<h4 id="结果-1">结果</h4>

<p><img src="/assets/posts_assets/WEBCPM%20Interactive%20Web%20Search%20for%20Chinese%20Long-form%20Question%20Answering%20%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241024201517303.png" alt="image-20241024201517303" /></p>

<ol>
  <li>mT0BASE在动作预测、查询生成和支持事实提取方面优于mT5BASE，但在信息综合方面表现较差。我们推测这是因为mT0BASE在多任务微调过程中更加注重与前三个任务相关的语言技能增强，而信息综合能力可能已经减弱。此外，尽管参数较少，孟子- T5BASE在所有任务上表现良好；</li>
  <li>总体而言，mBARTLARGE和C-BARTLARGE的性能都不及其他所有PLM，只是mBARTLARGE在信息综合方面表现出色；</li>
  <li>比较CPM2.6B，CPM7B和CPM10B的结果，我们发现随着模型大小的增加，性能总体上得到了改善。根据缩放定律（Kaplan et al。，2020），较大的PLM具有更强的理解和生成能力，并能实现更好的下游性能。</li>
</ol>

<h3 id="整体评估">整体评估</h3>

<h4 id="参考">参考</h4>

<p>对于WebCPM的每个测试问题，我们将注释的答案与我们综合模型生成的3种类型的答案进行比较。</p>

<p>具体来说，这3种类型的答案在支持事实的来源上有所不同，包括</p>

<ol>
  <li>
    <p>我们的搜索模型收集的事实，</p>
  </li>
  <li>
    <p>真实人类收集的事实</p>
  </li>
  <li>
    <p>使用常用的非交互式网络搜索方法收集的事实。</p>

    <p>我们直接将原问题输入到必应中，提取所有检索链接中的段落，并使用TF-IDF对它们进行排名。然后我们将排名靠前的前k个段落连接在一起，直到总字数超过3072个令牌</p>
  </li>
</ol>

<h4 id="评估方法">评估方法</h4>

<p>我们邀请8名注释者根据人类偏好手动比较不同的答案。给定一个问题和一对答案，我们要求他们进行整体评估，并根据多种因素，包括整体有用性、连贯性和与问题的相关性，决定他们更喜欢哪个答案。</p>

<p>由于所有三种检索方法使用相同的搜索引擎，它们收集的事实有时具有很高的重叠性，导致类似的答案。因此，如果两个答案质量相当，我们允许注释者将两个答案标记为等效。</p>

<h4 id="结果-2">结果</h4>

<p><img src="/assets/posts_assets/WEBCPM%20Interactive%20Web%20Search%20for%20Chinese%20Long-form%20Question%20Answering%20%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241024211212289.png" alt="image-20241024211212289" /></p>

<ul>
  <li>我们从图4(a)的结果中得出以下结论：(1)纯粹通过我们的流程获得的答案在19.0%+13.5% = 32.5%的时间内被认为是首选或可比的。这一结果暗示着我们的流程在将来的努力中有充分的提升机会，这在附录G中进行了讨论。</li>
  <li>将我们的合成模型应用于人工收集的事实时，性能增长至16.0%+29.5% = 45.5%的优先级或等同级，这是由于收集到的事实质量的提高。</li>
  <li>通过非交互式搜索收集到的事实的性能略差（7.5%+18% = 25.5%）于我们的搜索模型。我们的搜索模型优于非交互式搜索的原因可能是：
    <ul>
      <li>(a)我们的模型多次向Bing发送不同的查询，以便检索更丰富的信息，</li>
      <li>(b)它决定一个网页是否包含重要信息的能力很关键，这要比TF-IDF效果更好。</li>
    </ul>
  </li>
</ul>

<p>接下来，我们将我们的管道（搜索模型和合成模型）应用于来自DuReader的2个中文QA数据集，即知道和搜索。尽管DuReader不是专门为LFQA设计的，但它包含各种类型的问题，我们随机抽取了400个测试问题，这些问题的注释答案超过400个中文字符。</p>

<p>对于这些问题，我们请标注员将我们的管道生成的答案与DuReader的黄金注释进行比较。从图4（b）中的结果可以看出，我们的管道在搜索和知道上有44.0%和51.0%的时间比注释优秀（平均为47.5%），显示出令人满意的分布外泛化性能。</p>

<p>同一个管道在我们的数据集上超过的人工书面答案少于DuReader也反映了我们注释答案的高质量。请注意，等价比例为0％，因为这两个答案基于完全不同的支持事实，很容易确定哪一个更好。</p>

<h3 id="其他分析">其他分析</h3>

<h4 id="消融分析1">消融分析1</h4>

<p>我们评估了通过引入无关事实来破坏综合模型的训练数据是否可以提高其忽略噪声事实的能力。我们训练一个基准模型，没有破坏训练数据，并保持其他设置与我们的模型相同。对于每个测试问题，我们将搜索模型收集的支持事实馈送给两个综合模型，并生成两个答案。评估员将评估哪个答案更相关于原始问题（允许选取等效选项）。</p>

<p>根据图4（c），通过破坏训练数据，我们的模型的性能比基准模型更好的情况占43.7％，而更差的情况占18.0％。这表明我们的方法确实增强了模型忽略嘈杂信息的能力，使生成的答案与原问题更相关。在附录F.1中，我们进一步探讨了另一种灵活平衡生成新内容和复制支持事实的破坏方法的使用。</p>

<h4 id="消融分析2">消融分析2</h4>

<p><img src="/assets/posts_assets/WEBCPM%20Interactive%20Web%20Search%20for%20Chinese%20Long-form%20Question%20Answering%20%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0.assets/image-20241024215714230.png" alt="image-20241024215714230" /></p>

<p>St组件的影响。我们对St的几个组件进行了消融研究，以检验它们对搜索模型的每个模块是如何做出贡献的。这是通过修改每个模块的训练和评估数据来实现的。对于动作预测和支持事实提取，我们移除以下内容之一：已有的收集事实Ft，上一个窗口Wt−1中显示的内容，或者过去的动作At−1。对于查询生成，我们从St中移除以下内容：已有的收集事实Ft，已经搜索过的查询，或者以前浏览过的链接的标题。最后两个项目的信息都包含在At−1中。具体来说，对于过去的动作Search / Load Page，At−1不仅包括动作名称，还记录了具体搜索的查询 / 加载的页面的标题。</p>

<p>结果列在表3中，从中我们观察到：</p>

<ul>
  <li>(1)对于动作预测，移除Ft或Wt−1只会导致最小的性能变化，而移除At−1会导致显著的性能下降。这表明过去的动作对于动作预测来说是关键因素；</li>
  <li>(2)对于支持事实提取，只有移除Ft会显著地影响性能(-5.1)。这表明，与人类一致，该模块考虑了已提取的信息来决定下一步提取哪些信息；</li>
  <li>(3)对于查询生成，移除At−1中的已搜索查询或已访问链接的标题会造成很大的负面影响(-2.5)，这意味着该模块可能已经学会根据已搜索和新观察到的信息来生成查询。此特性是类人的，因为人类也考虑了信息，以避免发送重复的查询，并就已访问链接进行后续问题的提问。</li>
</ul>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="nlp" /><category term="自然语言处理" /><category term="论文笔记" /><summary type="html"><![CDATA[WEBCPM: Interactive Web Search for Chinese Long-form Question Answering 论文笔记]]></summary></entry><entry><title type="html">StructRAG 论文精读</title><link href="http://localhost:4000/2024/10/21/StructRAG-Boosting-Knowledge-Intensive-Reasoning-of-LLMs-via-Inference-time-Hybrid-Information-Structurization-%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.html" rel="alternate" type="text/html" title="StructRAG 论文精读" /><published>2024-10-21T00:00:00+08:00</published><updated>2024-10-21T00:00:00+08:00</updated><id>http://localhost:4000/2024/10/21/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB</id><content type="html" xml:base="http://localhost:4000/2024/10/21/StructRAG-Boosting-Knowledge-Intensive-Reasoning-of-LLMs-via-Inference-time-Hybrid-Information-Structurization-%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.html"><![CDATA[<h1 id="structrag-boosting-knowledge-intensive-reasoning-of-llms-via-inference-time-hybrid-information-structurization-论文精读">StructRAG: Boosting Knowledge Intensive Reasoning of LLMs via Inference-time Hybrid Information Structurization 论文精读</h1>

<!---more-->

<blockquote>
  <p>论文来源：刘老师发的</p>

  <p>方向：RAG</p>

  <p>遇到的问题：</p>

</blockquote>

<h2 id="背景知识">背景知识</h2>

<h3 id="知识密集型推理任务knowledeg--intensive-reasoning-task">知识密集型推理任务（knowledeg- intensive reasoning task）:</h3>

<p>知识密集型推理任务（knowledge-intensive reasoning task）指的是需要大量先验知识或专业领域知识来进行推理和解决的任务。在这种任务中，推理和决策需要依赖于广泛的、深入的领域知识，通常涉及多个概念和关系的复杂推理过程。
举例来说，医学诊断就是一个知识密集型推理任务的典型案例。医生在对患者进行诊断时，需要结合患者的症状、病史、实验室检查结果等信息，并借助广泛的医学知识进行推理和判断，以最终做出准确的诊断。这种任务需要医生综合运用大量的医学知识，对病情进行推理和归纳，而且通常也需要考虑患者的个体差异和复杂情况，因此属于知识密集型推理任务的范畴</p>

<h3 id="认知负荷理论">认知负荷理论</h3>

<p>认知负荷理论是由John Sweller在1988年提出的，用于解释人类认知处理和学习的理论框架。该理论指出，<strong>人脑的认知系统有着有限的处理能力，因此在学习和完成任务时会面临认知负荷的问题。</strong>认知负荷理论通过研究认知处理的本质和人类学习的方式，提出了如何最大限度地减轻认知负荷，以便更有效地进行学习和任务处理。
认知负荷理论分为三种认知负荷：</p>

<ol>
  <li>内在认知负荷：指的是完成任务所必须的认知处理和思考负担。例如，当学习新的知识或解决复杂问题时，人们会面临内在认知负荷。</li>
  <li>外在认知负荷：指的是执行任务所需要的外部支持和资源。例如，学习辅助工具、老师的讲解和指导等都可以帮助分担外在认知负荷。</li>
  <li>增量认知负荷：指的是学习者额外承担的负担，用于处理不必要的信息和过多的任务要求。
认知负荷理论的应用包括设计更有效的教学方法、界面设计、工作流程等，以减轻学习者或用户在执行任务时所面临的认知负荷，从而提高学习效果和任务执行效率。</li>
</ol>

<h3 id="hotpotqa等多跳任务">HotpotQA等多跳任务</h3>

<p>HotpotQA是一项旨在评估自然语言处理模型多跳推理（multi-hop reasoning）能力的问答任务。多跳推理指的是模型在回答问题时，需要跨越多个中间步骤，整合来自不同来源的信息，才能得出正确的答案。</p>

<p><strong>HotpotQA的主要特点：</strong></p>

<ol>
  <li>
    <p><strong>多段落推理</strong>：问题需要从多个文档或段落中提取信息，而不仅仅是从单一来源。这要求模型能够关联和综合不同信息片段。</p>
  </li>
  <li>
    <p><strong>支持证据</strong>：除了提供答案外，模型还需要指出支持答案的证据段落。这增强了模型的可解释性，便于评估其推理过程。</p>
  </li>
  <li>
    <p><strong>多样化的问题类型</strong>：包括比较类、桥接类等问题，涉及不同的推理路径和策略。</p>
  </li>
  <li>
    <p><strong>开放域问答</strong>：问题涉及广泛的主题，要求模型具备广博的知识和灵活的推理能力。</p>
  </li>
</ol>

<p><strong>其他多跳任务：</strong></p>

<p>除了HotpotQA，还有其他一些多跳推理任务和数据集，用于评估和提高模型的推理能力：</p>

<ol>
  <li>
    <p><strong>WikiHop</strong>：需要从维基百科的多个文档中进行推理，找到连接问题和答案的路径。</p>
  </li>
  <li>
    <p><strong>ComplexWebQuestions</strong>：基于WebQuestions数据集，问题更复杂，需要多步推理才能回答。</p>
  </li>
  <li>
    <p><strong>QAngaroo</strong>：包括WikiHop和MedHop两个子数据集，专注于跨文档的多跳推理。</p>
  </li>
  <li>
    <p><strong>OpenBookQA</strong>：要求模型结合常识和科学知识，进行多步推理来回答问题。</p>
  </li>
  <li>
    <p><strong>NarrativeQA</strong>：基于故事和情节的问题，需要理解上下文并进行深度推理。</p>
  </li>
</ol>

<p><strong>多跳任务的挑战：</strong></p>

<ul>
  <li>
    <p><strong>信息整合</strong>：模型需要有效地从多个来源检索和整合信息。</p>
  </li>
  <li>
    <p><strong>推理路径</strong>：需要找到正确的推理路径，避免干扰信息。</p>
  </li>
  <li>
    <p><strong>计算复杂性</strong>：多跳推理增加了计算和时间成本，挑战模型的效率。</p>
  </li>
  <li>
    <p><strong>可解释性</strong>：提供清晰的推理过程和证据对于模型的可信度至关重要。</p>
  </li>
</ul>

<p><strong>研究意义：</strong></p>

<p>多跳任务对于推进自然语言理解和人工智能推理能力具有重要意义。它们促使模型超越简单的模式匹配，发展出更深层次的理解和推理能力。这对于构建更智能、更可靠的AI系统，如智能问答、对话系统和决策支持系统，具有深远的影响。</p>

<p><strong>总结：</strong></p>

<p>HotpotQA等多跳任务通过设计需要跨越多个信息源的问题，评估模型的推理和信息整合能力。这些任务推动了自然语言处理领域在理解、推理和可解释性方面的研究和发展。</p>

<h3 id="loong基准">Loong基准</h3>

<p><strong>Loong基准</strong>（Loong Benchmark）是一个专门为测试大语言模型（LLMs）的长上下文理解能力而设计的评估框架，重点是多文档问答（QA）任务，旨在创建更符合现实的复杂场景。这一基准与传统的长上下文评估不同，它从金融报告、法律案件和学术论文这三个领域精心选择文档，以确保上下文的完整性和相关性。</p>

<p>Loong基准包含四个主要评估类别：</p>
<ol>
  <li><strong>聚光定位</strong>（Spotlight Locating） - 测试模型在多个文档中定位关键信息的能力。</li>
  <li><strong>比较</strong>（Comparison） - 评估模型跨文档比较信息的能力。</li>
  <li><strong>聚类</strong>（Clustering） - 基于语义相似性对相关信息进行分组。</li>
  <li><strong>推理链</strong>（Chain of Reasoning） - 检验模型在长上下文下进行逻辑推理的能力。</li>
</ol>

<p>此外，Loong任务集覆盖了不同长度的输入，从10K到超过200K个token，允许对模型在不同上下文长度和任务复杂性下的性能进行细粒度评估。任务以中英文形式呈现，更接近实际应用场景【20†source】【21†source】【23†source】。</p>

<h3 id="pocast-transcripts">Pocast Transcripts</h3>

<p><strong>Podcast Transcripts</strong> 数据集是专为音频媒体的自然语言处理（NLP）任务而设计的，旨在研究和处理播客的语音转录文本。这个领域最近受到了越来越多的关注，因为播客内容形式丰富，涉及新闻、对话、故事讲述等多种风格。以下是几种主要的 Podcast Transcripts 数据集：</p>

<ol>
  <li>
    <p><strong>Spotify Podcast Dataset</strong>：这是一个规模较大的数据集，包含约10万集播客，包含音频文件及其对应的自动语音识别（ASR）转录文本。该数据集包含来自全球不同地区的播客，涵盖多种音质和长度的音频内容，总时长超过5万小时【32†source】【33†source】。</p>
  </li>
  <li>
    <p><strong>PodcastFillers Dataset</strong>：该数据集专注于英语播客中的语气词和填充词标注，包含199集完整播客，共计145小时的音频。这些转录文本也由自动语音识别系统生成，专门用于分析语音中的自然停顿和填充词【32†source】。</p>
  </li>
</ol>

<p>这些数据集不仅提供了音频文件和转录文本，还包括丰富的元数据，如播客节目的标题、描述、时长、发布者等信息，有助于多维度的分析和处理，尤其适合于语音识别、文本摘要和对话建模等研究方向【34†source】。</p>

<h2 id="摘要">摘要</h2>

<blockquote>
  <p>思考的问题：</p>

  <p>原始文档-&gt;结构化的信息是怎么样的?</p>

  <p>怎么利用结构化的信息的？</p>
</blockquote>

<p>背景：检索增强生成（RAG）是在许多基于知识的任务中有效增强大型语言模型（LLM）的关键手段</p>

<p>面对的问题：</p>

<ul>
  <li>现有的RAG方法在知识密集型推理任务中存在困难，因为这些任务所需的有用信息分散且不规律</li>
  <li>这一特点使得现有的RAG方法很难准确识别关键信息并进行全局推理，因为存在噪声干扰</li>
</ul>

<p>解决办法：</p>

<ul>
  <li>本文通过人类在应对知识密集型推理时将原始信息转化为各种<strong>结构化知识</strong>的认知理论的启发，提出了一个新的框架，名为StructRAG</li>
  <li>该框架可以在进行任务时识别最佳结构类型，将原始文档重新构建为这种结构化格式，并根据生成的结构进行推理得出答案</li>
</ul>

<p>实验结果</p>

<ul>
  <li>在各种知识密集型任务上进行的大量实验表明，StructRAG实现了最先进的性能</li>
  <li>特别擅长在具有挑战性的场景中表现，展示了它作为增强LLMs在复杂现实世界应用中的有效解决方案的潜力。</li>
</ul>

<h2 id="引言">引言</h2>

<blockquote>
  <p>知识密集型推理任务（knowledeg- intensive reasoning task）是什么意思？</p>

  <p>怎么根据根据任务需求以最合适的结构？</p>

  <p>作者的LLM分散知识化结构 LLM-based scattered knowledge structurize是什么？</p>

  <p>怎么构建偏好训练数据的？</p>

  <p>数据是怎么样的？</p>

  <p>如何使用DPO训练混合结构路由器？</p>
</blockquote>

<h3 id="rag背景">RAG背景</h3>

<ul>
  <li>随着深度学习技术的进步，大规模语言模型（LLMs）在自然语言任务中展现出相当的优势，并广泛应用于复杂的现实世界场景（OpenAI等，2024年；Yang等，2024年a）。</li>
  <li>然而，由于缺乏领域特定知识、实时更新信息和专有知识，它们在事实任务中仍然存在局限性</li>
  <li>解决办法：RAG，通常，RAG方法涉及将原始文档分割成较短的部分，根据查询检索出最相关的部分，用这些部分使LLMs能够生成可靠的答案。</li>
</ul>

<h3 id="本文针对的rag问题背景">本文针对的RAG问题背景</h3>

<ul>
  <li>
    <p>当前的RAG方法无法有效处理<strong>知识密集型推理任务</strong>，因为解决这些任务所需的相关信息的分散性质</p>

    <ul>
      <li>
        <p>具体来说，知识密集型推理任务通常需要大量有用的信息，这些信息分散在提供的文档中的许多位置</p>
      </li>
      <li>
        <p>与此同时，模型需要在检索到有用信息后执行综合推理</p>

        <blockquote>
          <p>以财务报告分析为例，考虑到大量的财务文件和比较多家公司发展趋势的需求，LLM需要挖掘原始文件中散落的所有相关财务指标，然后通过仔细比较和全面分析这些指标来生成见解。</p>
        </blockquote>
      </li>
    </ul>
  </li>
  <li>
    <p>标准的RAG方法面临着精确检索所有相关文本块的挑战</p>

    <ul>
      <li>这些文本块可能包含大量噪音</li>
      <li>并且集成多个关键信息用于推理，导致这些任务的性能不尽如人意。</li>
    </ul>
  </li>
</ul>

<h3 id="人类的思考方式的启发">人类的思考方式的启发</h3>

<p>人们并不是通过简单阅读原始文本来解决知识密集型的推理任务</p>

<ul>
  <li>正如认知负荷理论所建议的，人类通常将文档中的零散信息总结为结构化知识，进而缩短推理路径并实现更准确的判断</li>
  <li>认知匹配理论表明，人类更喜欢在不同任务中使用不同类型的结构化知识，例如表格用于统计分析任务，图表用于长链推理</li>
</ul>

<p>启发LLMs推理采用人类的思维过程，<strong>将零散信息转化为各种结构格式，从而更好地服务于知识密集型的推理任务。</strong></p>

<h3 id="作者提出的解决办法">作者提出的解决办法</h3>

<p>我们提出了StructRAG，它采用<strong>混合信息结构化机制，根据任务需求以最合适的格式构建和利用结构化知识。</strong></p>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/%E6%88%AA%E5%B1%8F2024-10-19%2011.20.30.png" alt="结构图" /></p>

<p>StructRAG框架包括三个模块，旨在顺序识别最合适的结构类型，构建以该格式的结构化知识，并利用该结构化知识来推断最终答案。</p>

<ul>
  <li>首先，认识到不同的结构类型适用于不同的任务，提出了混合结构路由器，以根据当前任务的问题和文档信息确定最适当的结构类型。</li>
  <li>其次，考虑到构建结构化知识是复杂的，并需要强大的理解和生成能力，采用了基于LLM的分散知识结构化程序，将原始文档转换为最佳类型的结构化知识。</li>
  <li>最后，由于知识密集推理任务中的问题通常是复杂的组合问题，难以直接解决，所以使用了结构化知识利用程序，对问题进行分解，并进行精确知识提取，以便更准确地推断答案。</li>
</ul>

<h3 id="具体的主要工作">具体的主要工作</h3>

<p>混合结构路由器能够准确选择每个输入任务的最适合结构类型</p>

<ul>
  <li>
    <p>为了赋予路由器这种能力，我们提出了一种<strong>混合结构路由器的训练方法</strong>：受到强化学习在训练LLMs进行决策任务方面成功应用的启发，我们采用DPO算法来训练路由器模块，该算法遵循强化学习原则，无需额外的奖励模型。</p>
  </li>
  <li>
    <p>然而，模型学习如何选择最佳结构类型的训练数据不足，而且在现实世界中收集足够的这类数据也具有挑战性。</p>
    <ul>
      <li>为了解决这个问题，<strong>我们引入了一种新颖的流程</strong>，用于<strong>构建偏好训练数据</strong>，其中包括任务合成、解决方案模拟和偏好判断，以创建高质量的合成数据，从而增强路由器选择适当结构类型的能力。</li>
    </ul>
  </li>
</ul>

<h3 id="实验">实验</h3>

<p>在我们的实验中，我们评估了StructRAG在各种知识密集型推理任务中的表现，并将其与几个强大的RAG基线进行了比较。结果表明，StructRAG取得了最先进的性能，<strong>在任务复杂性增加时改进更加显著。</strong></p>

<p>此外，与最近的图形RAG方法相比，StructRAG不仅在更广泛的任务范围内表现出卓越性能，而且平均操作速度也更快。</p>

<h2 id="相关工作">相关工作</h2>

<blockquote>
  <p><strong>HotpotQA等多跳任务是什么意思？</strong></p>
</blockquote>

<h3 id="rag">RAG</h3>

<p>RAG技术通过提供外部知识来帮助回答问题并减少幻觉，在LLM时代取得了良好的表现</p>

<ul>
  <li>RAG的初始策略涉及使用检索器根据查询搜索和保留知识库中高度相关的块，然后将这些块作为外部知识输入到生成模块中，以提高性能</li>
  <li>为了改善RAG的效果，一些方法引入了迭代RAG，提出了各种增强方法，如查询扩展和重写</li>
  <li>其他尝试改进检索和生成之间的协作</li>
  <li>尽管现有方法在HotpotQA等多跳任务上取得了强大的性能，基于块的RAG在知识密集型任务上仍面临困难</li>
</ul>

<h3 id="graph-rag">Graph RAG</h3>

<ul>
  <li>一种方法利用预先构建的知识图，根据查询提取子图，然后将其编码为软提示或压缩成纯文本，用于生成模块。</li>
  <li>另一种方法涉及根据查询要求从给定文本文档中提取实体关系三元组以构建图结构，然后用于知识增强。</li>
  <li>尽管这些方法明显改善了多跳问答任务的性能，但它们仅关注基于图的知识通过三元组的格式，因此限制了它们在各种领域和知识密集型推理任务应用中的实际适用性。</li>
</ul>

<h2 id="通过混合信息结构化来构建structrag">通过混合信息结构化来构建STRUCTRAG</h2>

<blockquote>
  <p>要是不能表示成该结构怎么办？</p>

  <p>感觉就是把原本LLM黑盒中的一些部分拿出来，单独训练，在组合在一起。</p>

  <p>核心内容C是怎么来的</p>
</blockquote>

<h3 id="任务建模">任务建模</h3>

\[a = F(q,D),where \ D = \{d^{(i)}\}^m_{i=1}\]

<ul>
  <li>
    <p>知识密集型推理任务提供了一个问题 q 和一个大量的文档集合 D 作为输入，其目标是根据提供的文档得出答案 a</p>
  </li>
  <li>
    <p>m 是文档的数量，可以超过 20，导致总token数达到 200K</p>
  </li>
  <li>
    <p>这些任务最明显的特征是有用信息分散在提供的文档中，要求模型基于大规模相关数据进行复杂推理。</p>

    <blockquote>
      <p>例如，在比较使用一批财务报告的几家公司的发展趋势时，任务需要检索分布在文档中的各种财务指标，然后详细比较这些指标。这涉及考虑不同指标的相对重要性以及数值差异的大小等因素。因此，知识密集型推理任务具有重大挑战。</p>
    </blockquote>
  </li>
</ul>

<h3 id="hybird-structure-router">Hybird Structure Router</h3>

\[t = R(q,C),where \ C = \{ c^{(i)}\}^m_{i=1}\]

<p><strong>混合结构路由器R来选择最佳的结构类型。</strong></p>

<ul>
  <li>
    <p>路由器利用问题q和文档D的核心内容C来做出决策并生成最适合的结构类型t，因为一次性处理整个文档集是不现实的。</p>
  </li>
  <li>C 是来自每个文档 d(i) 的标题或前几句话的集中体现。</li>
  <li>t 有五种候选结构类型，分别适用于五种知识密集型任务：
    <ul>
      <li><strong>表格</strong>适用于统计任务</li>
      <li><strong>图表</strong>适用于长链任务</li>
      <li><strong>算法</strong>适用于规划任务</li>
      <li><strong>目录</strong>适用于总结任务</li>
      <li>以及<strong>块</strong>适用于简单的单跳任务。</li>
    </ul>
  </li>
  <li>考虑到路由器在整体框架中的核心作用，我们的工作设计了一种基于DPO的训练方法，以开发一个在知识类型决策方面表现优异的路由器，详情请参考第4节。</li>
</ul>

<h3 id="scattered-knowledge-structurizer">Scattered Knowledge Structurizer</h3>

\[k^{(i)}_t,b^{(i)}_t=S(q,t,d^{(i)})\]

<p><strong>从原始文档中提取分散的文本知识，并将其重构为结构化知识</strong></p>

<p>StructRAG采用了基于LLM的分散知识结构器</p>

<ul>
  <li>结构化器S将问题q、选定的类型t和每个原始文档$d^{(i)}$作为输入，</li>
  <li>并通过LLM强大的理解和生成能力从文档中提取结构化知识$k^{(i)}_t$。此外，还生成了结构化知识$k^{(i)}_t$的描述$b^{(i)}_t$。</li>
  <li>然后，所有输出的结构化知识将被收集为整体知识$K_t = {k^{(i)}<em>t }^m</em>{i=1}$，并且整体结构化知识的描述将被构建为$B_t = {b^{(i)}<em>t }^m</em>{i=1}$。</li>
</ul>

<p>结构的形式</p>

<ul>
  <li>表格使用markdown语法</li>
  <li>图表使用头部-关系-尾部三元组列表，</li>
  <li>块使用普通文本</li>
  <li>算法使用伪代码</li>
  <li>目录使用带有层次编号的文本（例如，第一节，1.1，1.1.2）作为明确的章节标识符。</li>
</ul>

<h3 id="structured-knowledge-utilizer">Structured Knowledge Utilizer</h3>

<p>基于LLM的结构化知识利用器来促进问题分解、精确知识提取和最终答案推理
\(\hat{Q} = U_{decompose}(q, B_t) = \{\hat{q}^{(j)}\}^n_{j=1} \\ 
\hat{K_t} = {U_{extract}(\hat{q}^{(j)}, K_t)}^n_{j=1} = \{\hat{k}^{(j)}_t \}^n_{j=1}  \\
a = U_{infer}(q, \hat{Q}, \hat{K}_t)\)</p>

<ul>
  <li>利用者的分解过程以原始问题q和结构化知识$B_t$的整体描述作为输入，将问题分解为几个简单直观的子问题$\hat{q}^{(j)}$。</li>
  <li>接下来，提取过程旨在从整个结构化知识$K_t$中为每个子问题$\hat{q}{(j)}$找到精确的知识$\hat{k}^{(j)}_t$。最后，推理过程整合所有子问题及其提取的精确知识，生成最终答案a，</li>
  <li>N 是子问题的数量，$\hat{Q}$是所有子问题的集合，$\hat{K}<em>t$是所有子问题的完整精确知识，而$U</em>{decompose}$、$U_{extract}$和$U_{infer}$分别是分解、提取和推理过程。</li>
</ul>

<h2 id="训练混合结构路由器">训练混合结构路由器</h2>

<ul>
  <li>训练方法：鉴于强化学习在决策场景中具有强大的能力，我们使用DPO算法训练路由器，该算法实现了类似于强化学习的结果，同时避免了额外奖励模型的需求。</li>
  <li>训练数据：由于不存在用于最佳结构类型选择任务的现有偏好数据，我们设计了一种<strong>合成-模拟-判断</strong>方法，以便高效地构建训练的优先对。在以下段落中提供了详细的解释，附录A.1中提供了示例和提示。</li>
</ul>

<h3 id="数据构建">数据构建</h3>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/%E5%9B%BE%E7%89%87.png" alt="图片" /></p>

<ol>
  <li>给定涵盖可能结构类型的几个手工收集的种子任务</li>
  <li>首先使用LLMs通过上下文学习方法合成一组新任务，其中每个任务包含一个问题和文档的核心内容。</li>
  <li>然后，对于每个合成任务，LLMs被用来模拟以不同类型的结构知识解决此任务的过程，从而获得不同的模拟解决方案</li>
  <li>最后，基于LLM的评委比较这些模拟解决方案来解决任务，生成关于结构类型的偏好对。</li>
</ol>

<p>结果：每个构建的数据条目包括一个问题，文档的核心内容，选择的结构类型和拒绝的结构类型
\(D_{synthenic}= \{q^{(k)},C^{(k)},t_w^{(k)},t_l^{k}\}^N_{k=1}\)
$t_w$和$t_l$分别是选择的结构类型和被拒绝的结构类型。合成偏好对包括英语和中文数据，以提高普适性。</p>

<h3 id="偏好训练">偏好训练</h3>

<p>这个公式是关于<strong>DPO (Direct Preference Optimization)</strong> 的损失函数，通常用于训练强化学习中的策略模型。该损失函数的目标是使模型更符合用户偏好。</p>

<p>\(\mathcal{L}_{\text{DPO}}(\pi_\theta; \pi_{\text{ref}}) = -\mathbb{E}_{(q, C, t_w, t_l) \sim D_{\text{synthetic}}} \left[ \log \sigma \left( \beta \log \frac{\pi_\theta(t_w \mid q, C)}{\pi_{\text{ref}}(t_w \mid q, C)} - \beta \log \frac{\pi_\theta(t_l \mid q, C)}{\pi_{\text{ref}}(t_l \mid q, C)} \right) \right]\)
πθ和πref分别是目标策略和参考策略，β是超参数。</p>

<p>如后分析，这种偏好训练使模型能够区分各种类型的知识以及它们对于特定任务的适用性，从而实现更好的性能，相较于零样本和少样本设置。</p>

<h2 id="实验-1">实验</h2>

<h3 id="评估数据集">评估数据集</h3>

<ul>
  <li>Loong benchmark</li>
  <li>Pocast Transcripts</li>
</ul>

<h3 id="实现细节">实现细节</h3>

<p>我们基于Qwen2系列模型构建了框架（杨等人，2024a）。</p>

<ul>
  <li>
    <p>对于混合结构路由器，StructRAG使用Qwen2-7B-Instruct作为基础模型，并通过trl2实现DPO训练。</p>

    <p>关于混合结构路由器训练的细节，StructRAG构建并使用了总共900份偏好数据，将学习率设置为1e-5，将训练轮数设置为3，β参数保持默认。</p>
  </li>
  <li>
    <p>对于散乱知识结构化器和结构化知识利用器，StructRAG直接使用Qwen2-72B-Instruct作为基础模型，并使用vllm3将模型部署为API，按照Loong（王等人，2024a）的设置进行</p>
  </li>
</ul>

<h3 id="实验结果">实验结果</h3>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/%E5%9B%BE%E7%89%87-9508638.png" alt="图片" /></p>

<ul>
  <li>StructRAG对于复杂任务尤为合适，性能提升在信息更分散的场景中变得更加重要。</li>
  <li>StructRAG是应对知识密集型推理任务的强大解决方案。</li>
</ul>

<h3 id="消融实验">消融实验</h3>

<p>消融（即逐步移除）模型中的不同模块或组件，来观察模型性能的变化。这样可以帮助他们了解模型中不同部分对最终性能的贡献，并且有助于确定哪些模块对模型性能起到了关键作用</p>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/image-20241021193022347.png" alt="image-20241021193022347" /></p>

<p>“w/o router”指的是随机路由，“w/o structurizer”意味着仅使用块，“w/o utilizer”是指直接将结构化知识与原始问题连接起来以生成答案。以下是结论：</p>

<p>结论</p>

<ul>
  <li>所有三个模块都对整体框架起到积极的作用。</li>
  <li>选择合适的结构类型并将文件构建为结构化知识比设计复杂的利用方法更为重要。</li>
</ul>

<h3 id="其他细节分析">其他细节分析</h3>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/image-20241021200255458.png" alt="image-20241021200255458" /></p>

<p>为了探讨构建数据和进行DPO培训的必要性，以及混合结构路由器的性能与整体StructRAG之间的关系，我们首先将我们的路由器与原始LLMs进行比较，然后绘制路由器的曲线和整体StructRAG分数。得出以下结论：</p>

<ol>
  <li>
    <p><strong>对于没有接受特殊培训的原始LLMs来说，根据任务选择最佳类型的知识是具有挑战性的。</strong></p>

    <p>根据表4中的实验结果，基于Qwen2-7B-Instruct模型训练的路由器在少样本设置下明显优于72B模型。这表明，即使模型规模达到72B，LLMs仍需要接受一些特殊培训才能具备根据任务需求选择最佳结构类型的能力。</p>
  </li>
  <li>
    <p><strong>混合结构路由器的性能与StructRAG最终性能有显著相关性。</strong>如图3所示，我们选择Qwen2-72B-Instruct（零样本）作为弱路由器，并设计了一个完全随机的路由器和一个完全不正确的糟糕路由器。图中的曲线明确显示了路由器准确性与StructRAG框架整体性能之间的正相关关系。这进一步证明，在知识密集型推理任务中，选择与任务需求相匹配的知识类型对于增强至关重要。</p>
  </li>
</ol>

<h4 id="固定结构的缺点分析">固定结构的缺点分析</h4>

<p>仅使用一种固定类型的知识无法在多样化的任务上取得良好表现。</p>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/image-20241021195930009.png" alt="image-20241021195930009" /></p>

<h4 id="几个em表现不佳的原因">几个EM表现不佳的原因</h4>

<p>根据表1中的实验结果，StructRAG在总体得分上超过了基准线，但在七种子情况的确切匹配率上表现不佳。</p>

<p>因此，我们分析了一些StructRAG方法得分较高但未能达到精确匹配的情况。</p>

<p>原因主要是关于结构化过程可能会改变原始信息的文本格式。如表5所示，结构化知识和原始信息之间存在一些措辞的差异（例如，从原始“$1,308,463”变为表中的“138463”）。直观上，这符合常识，结构化程序是一种概率语言模型，而不是基于规则的模型，因此可能无法避免一些可能的文本损失，GraphRAG方法的输出也存在类似问题。</p>

<h3 id="性能报告">性能报告</h3>

<p><img src="/assets/posts_assets/StructRAG%20Boosting%20Knowledge%20Intensive%20Reasoning%20of%20LLMs%20via%20Inference-time%20Hybrid%20Information%20Structurization%20%E8%AE%BA%E6%96%87%E7%B2%BE%E8%AF%BB.assets/image-20241021201118603.png" alt="image-20241021201118603" /></p>

<p>第一部分是构建延迟，指的是为RQ-RAG迭代检索块，为GraphRAG构建图形，并确定最佳知识类型并为StructRAG构建相应结构的过程。</p>

<p>第二部分是阅读延迟，指的是使用增强知识生成最终答案的过程。与RQ-RAG相比，StructRAG的延迟略高，但显然比GraphRAG快。</p>

<p>因此，StructRAG是一种具有可用实现速度的高性能框架。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="nlp" /><category term="自然语言处理" /><category term="论文笔记" /><summary type="html"><![CDATA[StructRAG: Boosting Knowledge Intensive Reasoning of LLMs via Inference-time Hybrid Information Structurization 论文精读]]></summary></entry><entry><title type="html">博客的开头</title><link href="http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4.html" rel="alternate" type="text/html" title="博客的开头" /><published>2024-10-10T00:00:00+08:00</published><updated>2024-10-10T00:00:00+08:00</updated><id>http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4</id><content type="html" xml:base="http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4.html"><![CDATA[<h1 id="博客的开头">博客的开头</h1>
<p>一直想要搞一个博客，但是奈何没有时间，现在终于闲下来了，找到网上的教程，做了这么个简陋的博客。
记忆会消失，文字不会，所以想要用博客来记录自己的成长，记录自己的学习，同时希望可以能帮助到你。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><summary type="html"><![CDATA[博客的开头 一直想要搞一个博客，但是奈何没有时间，现在终于闲下来了，找到网上的教程，做了这么个简陋的博客。 记忆会消失，文字不会，所以想要用博客来记录自己的成长，记录自己的学习，同时希望可以能帮助到你。]]></summary></entry><entry><title type="html">物联网期末复习</title><link href="http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html" rel="alternate" type="text/html" title="物联网期末复习" /><published>2024-06-26T00:00:00+08:00</published><updated>2024-06-26T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0</id><content type="html" xml:base="http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0.html"><![CDATA[<h1 id="物联网">物联网</h1>

<p>分成三层</p>

<p>每一层分成几个模块</p>

<p>功能和流程是不一样的</p>

<p>功能是要达到的效果</p>

<p>🌻对着框架讲流程 再讲每部分功能 每个模块怎么实现 再展示是什么样子的</p>

<p>🌻设计思想—&gt; 架构—&gt;流程—&gt;每一块的功能</p>

<p>至少讲清楚每一层用了什么</p>

<p>eg RFID WSN</p>

<p>eg 有线 无线</p>

<!---more-->
<p>🌻实现的代码 类似实验中用python实现可视化</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 可视化代码 基础是实现功能 读数据 界面内容都是自定义    关键代码
</code></pre></div></div>

<p>找端口 读端口数据 解析数据 让人可可以可视化的内容</p>

<p>假设一个口 串口还是485总线还是网线</p>

<p>硬件都是自己设计的 根据自己设计的来写 1用什么硬件 怎么设计软件</p>

<p>二进制转换为字符的 没有API的情况怎么实⁄现</p>

<p>十个选择题</p>

<p>两个大题 各种应用和设计</p>

<p>要素够逻辑正确内容精简</p>

<p>课后着重选择题 思考题思考一下怎么答</p>

<p>[TOC]</p>

<h2 id="第一章物联网概论">第一章物联网概论</h2>

<h3 id="物联网发展的社会背景">物联网发展的社会背景</h3>

<h4 id="物联网概念的提出">物联网概念的提出</h4>

<ol>
  <li>比尔盖茨与电子别针</li>
  <li>Auto-ID实验室、RFID与物联网概念</li>
  <li>ITU与物联网概念的提出</li>
</ol>

<h4 id="物联网与智慧地球">物联网与智慧地球</h4>

<p>智慧地球=互联网+物联网</p>

<ol>
  <li>智慧地球将传感器嵌入和装备到电网、铁路、桥梁、隧道、公路、建筑、供水系统、大坝、油气管道等各种物体中，并通过超级计算机和云计算组成物联网，实现“人-机-物”的融合</li>
  <li>通过在基础设施和制造业中大量嵌入传感器，捕捉运行过程中的各种信息，然后通过无线网络接入到互联网，通过计算机分析、处理和发出指令，反馈给控制器，远程执行指令</li>
  <li>通过智慧地球技术的实施，人类可以以更加精细和动态的方式管理生产与生活，提高资源利用率和生产能力改善人与自然的关系</li>
</ol>

<h4 id="欧盟与各国政府物联网产业的发展规划">欧盟与各国政府物联网产业的发展规划</h4>

<p>欧盟发展物联网产业的规划</p>

<ol>
  <li>第一阶段（2010年前）：基于RFID技术实现低功耗、低成本的单个物体间的互联，并在物流、零售、制药等领域开展局部的应用</li>
  <li>第二阶段（2010～2015年）：利用传感网与无处不在的RFID标签实现物与物之间的广泛互联，针对特定的产业制定技术标准，并完成部分网络的融合</li>
  <li>第三阶段（2015～2020年）：具有可执行指令的RFID标签广泛应用，物体进入半智能化，物联网中异构网络互联的标准制定完成，网络具有高速数据传输能力</li>
  <li>第四阶段（2020年之后）：物体具有完全的智能响应能力，异构系统能够实现协同工作，人、物、服务与网络达到深度地融合</li>
</ol>

<h4 id="物联网与我国战略性新兴产业">物联网与我国战略性新兴产业</h4>

<p>——————</p>

<h3 id="物联网发展的技术背景">物联网发展的技术背景</h3>

<ol>
  <li>从人类对技术需求的角度认识物联网发展的必然性</li>
  <li>从互联网技术发展的角度认识物联网发展的必然性</li>
  <li>从普适计算研究的角度认识物联网发展的必然性 普适计算（Pervasive Computing）— 无处不在的计算</li>
  <li>从CPS(信息物理系统）研究的角度认识物联网发展的必然性</li>
</ol>

<h4 id="普适计算的特征">普适计算的特征</h4>

<ul>
  <li>强调“无处不在”与“不可见”</li>
  <li>核心是“以人为本”</li>
  <li>提供自适应的网络服务</li>
  <li>关键是智能</li>
</ul>

<p>普适计算的思想就是使计算机从用户的意识中彻底“消失”，在物理世界中结合计算处理能力与控制能力，将人与人、人与机器、机器与机器的交互最终统一为<strong>人与自然</strong>的交互，达到“<strong>环境智能化</strong>”的境界</p>

<p>普适计算与物联网的关系</p>

<ol>
  <li>普适计算与物联网从研究目标、研究的内容，到工作模式上都有很多相同之处</li>
  <li>普适计算的研究方法与研究成果，对于物联网技术的研究有着重要的借鉴与启示作用</li>
  <li>物联网的出现也使我们在实现普适计算的道路上前进了一大步</li>
</ol>

<p><strong>物联网、互联网、传感网与泛在网的关系</strong></p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240628143005778.png" alt="image-20240628143005778" /></p>

<h4 id="cps主要技术特征">CPS主要技术特征</h4>

<blockquote>
  <p>自动泊车是无人驾驶汽车重要的功能与研究内容之一，它是感<strong>知、智能、</strong> <strong>计算、通信与控制技术</strong>交叉融合的产物，是一种典型的信息物理融合的CPS系统</p>
</blockquote>

<ul>
  <li>CPS是“人-机-物”深度融合的系统</li>
  <li>CPS是“3C”与物理设备深度融合的系统（Computation Communication and Control）</li>
  <li>CPS 是环境感知、嵌入式计算、网络通信深度融合的系统</li>
</ul>

<p>CPS的主要功能</p>

<ul>
  <li>“感”：多感知器协同感知物理世界的状态信息</li>
  <li>“联”：连接物理世界与信息世界的各种对象，实现信息交互</li>
  <li>“知”：通过对感知信息的智能处理，正确、全面地认知物理世界</li>
  <li>“控”：根据正确的认知，确定控制策略，发出指令，指挥执行器协同控制物理世界</li>
</ul>

<p>CPS 是环境感知、嵌入式计算、网络通信深度融合的系统</p>

<p>CPS与物联网的关系</p>

<ul>
  <li>CPS研究的目标与物联网未来发展方向是一致的。CPS与物联网所催生的智能技术与设备、协同工作体系、柔性化生产方式、精细化管理模式，将重塑现代产业体系的新格局</li>
  <li>CPS因控制技术与信息技术融合而起，将随着物联网在各行各业的应用，智能工业、智能农业、智能医疗的应用而迅速发展</li>
  <li>CPS理论研究与技术研究的成果，对物联网未来的发展有着重要的启示与指导作用</li>
</ul>

<h3 id="物联网定义与主要技术特征">物联网定义与主要技术特征</h3>

<h4 id="物联网的定义">物联网的定义</h4>

<p>什么是物联网</p>

<p><strong>按照规定的协议，将具有“感知、通信、计算”功能的智能物体、系统、信息资源</strong> <strong>互联起来，实现对物理世界“泛在感知、可靠传输、智慧处理”的智能服务系统</strong></p>

<ul>
  <li>物联网是在互联网基础上发展起来的，它与互联网在基础设施上有一定程度的重合，但是它不是互联网概念、技术与应用的简单扩展</li>
  <li>互联网扩大了人与人之间信息共享的深度与广度，物联网更加强调它在人类社会生活的各个方面、国民经济的各个领域广泛与深入地应用</li>
  <li>物联网主要特征是：泛在感知、可靠传输、智慧处理</li>
</ul>

<h4 id="物联网的主要技术特征">物联网的主要技术特征</h4>

<ul>
  <li>物联网的智能物体具有感知、通信与计算能力</li>
  <li>物联网可以提供所有对象在任何时间、任何地点的互联</li>
  <li>物联网的目标是实现物理世界与信息世界的融合任何时间连接任何地点连接任</li>
</ul>

<h4 id="物联网与互联网的比较">物联网与互联网的比较</h4>

<ol>
  <li>物联网与互联网的相通之处</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240628180300966.png" alt="image-20240628180300966" /></p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240628180329640.png" alt="image-20240628180329640" /></p>

<ol>
  <li>物联网与互联网的不同之处
    <ol>
      <li>物联网提供行业性、专业性与区域性的服务，互联网提供全球性公共信息服务</li>
      <li>物联网数据主要是通过自动方式获取的 ，互联网数据主要是以人工方式生成的</li>
      <li>物联网是可反馈、可控制的“闭环”系统</li>
    </ol>
  </li>
</ol>

<h4 id="物联网与互联网的关系">物联网与“互联网+”的关系</h4>

<ol>
  <li>“互联网+”是对我国社会与经济发展思路高度凝练的表述，它涵盖着互联网、移动互联网与物联网与各行各业、社会各个层面“跨界融合”的丰富内容</li>
  <li>物联网是支撑“互联网+” 发展的核心技术之一</li>
  <li>推进“互联网+” 将为物联网产业开辟更加广阔的发展空间</li>
</ol>

<h3 id="物联网的体系结构">物联网的体系结构</h3>

<h4 id="物联网体系结构基本概念">物联网体系结构基本概念</h4>

<p>物联网三层结构模型</p>

<ol>
  <li>应用层
    <ol>
      <li>行业应用层</li>
      <li>管理服务层</li>
    </ol>
  </li>
  <li>网络层
    <ol>
      <li>核心交换层</li>
      <li>汇聚层</li>
      <li>接入层</li>
    </ol>
  </li>
  <li>感知层</li>
</ol>

<h4 id="感知层">感知层</h4>

<p>感知层设备分类：</p>

<ul>
  <li>自动感知设备</li>
  <li>人工生成信息设备</li>
</ul>

<p>感知能力和控制能力</p>

<p>从一块简单的RFID标签、一个温度传感器或测控装置，到一个复杂的智能机器人，它们之间最重要的区别表现在：</p>

<p><strong>是不是需要同时具备感知能力和控制、执行能力，以及需要什么样的控制、执行能力</strong></p>

<h4 id="网络层">网络层</h4>

<ol>
  <li>接入层：连接各种传感器、传感网、感知设备与执行设备，将感知数据传送到汇聚层并将控制指令反馈给执行设备</li>
  <li>汇聚层：聚合接入层的用户流量，实现感知数据与控制指令的路由、转发与交换</li>
  <li>核心交换层：连接应用层，为物联网提供一个高速、安全与保证服务质量的数据传输环境</li>
</ol>

<p>汇聚层</p>

<p>核心交换层不可能直接接入大量的感知与执行设备，借鉴互联网处理大规模接入的经验，需要在接入层与核心交换层之间插入汇聚层</p>

<ul>
  <li>汇接接入层的用户流量，进行数据分组传输的汇聚、转发与交换</li>
  <li>根据接入层的用户流量，进行本地路由、过滤、流量均衡、优先级管理，以及安全控制、地址转换、流量整形等处理</li>
  <li>根据处理结果把用户流量转发到核心交换层或在本地进行路由处理</li>
</ul>

<h4 id="应用层">应用层</h4>

<ol>
  <li>
    <p>管理服务层：</p>

    <ol>
      <li>管理服务层通过中间件，在物理上隔离物联网应用系统与RFID或传感器硬件、网络技术的差异性，在逻辑上实现应用层与低的无缝连接</li>
      <li>管理服务层要提供物联网海量数据存储、融合、查询、检索的服务功能</li>
    </ol>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240628212015051.png" alt="image-20240628212015051" /></p>
  </li>
</ol>

<h4 id="物联网共性服务">物联网共性服务</h4>

<ol>
  <li>网络安全</li>
  <li>网络管理</li>
  <li>对象名字服务</li>
  <li>服务质量保障</li>
</ol>

<h3 id="物联网关键技术及其涵盖的基本内容">物联网关键技术及其涵盖的基本内容</h3>

<ol>
  <li>
    <p>感知技术</p>

    <ul>
      <li>
        <p>RFID标签选型与读写器设计</p>
      </li>
      <li>
        <p>传感器的选型与传感器节点结构设计</p>
      </li>
      <li>
        <p>传感网的设计与实现</p>
      </li>
      <li>
        <p>中间件与数据处理软件的设计与实现</p>
      </li>
    </ul>
  </li>
  <li>
    <p>嵌入式技术</p>

    <ul>
      <li>
        <p>专用芯片设计制造</p>
      </li>
      <li>
        <p>嵌入式硬件结构设计与实现</p>
      </li>
      <li>
        <p>嵌入式操作系统</p>
      </li>
      <li>
        <p>嵌入式应用软件</p>
      </li>
    </ul>
  </li>
  <li>
    <p>无线通信技术</p>

    <ul>
      <li>
        <p>无线通信技术的选型</p>
      </li>
      <li>
        <p>无线通信网络系统设计</p>
      </li>
      <li>
        <p>M2M协议与应用</p>
      </li>
    </ul>
  </li>
  <li>
    <p>网络技术</p>

    <ul>
      <li>
        <p>网络技术选型</p>
      </li>
      <li>
        <p>网络结构设计</p>
      </li>
      <li>
        <p>异构网络互联</p>
      </li>
      <li>
        <p>异构网络管理</p>
      </li>
    </ul>
  </li>
  <li>
    <p>智能处理技术</p>

    <ul>
      <li>
        <p>中间件与应用软件</p>
      </li>
      <li>
        <p>海量数据存储与搜索</p>
      </li>
      <li>
        <p>数据融合与知识发现</p>
      </li>
      <li>
        <p>智能决策</p>
      </li>
    </ul>
  </li>
  <li>
    <p>控制技术</p>

    <ul>
      <li>
        <p>环境感知</p>
      </li>
      <li>
        <p>信息融合</p>
      </li>
      <li>
        <p>规划与决策</p>
      </li>
      <li>
        <p>智能控制</p>
      </li>
    </ul>
  </li>
  <li>
    <p>定位技术</p>

    <ul>
      <li>
        <p>位置信息</p>
      </li>
      <li>
        <p>定位技术</p>
      </li>
      <li>
        <p>位置服务</p>
      </li>
    </ul>
  </li>
  <li>
    <p>信息安全技术</p>

    <ul>
      <li>
        <p>感知层安全</p>
      </li>
      <li>
        <p>传输层安全</p>
      </li>
      <li>
        <p>应用层安全</p>
      </li>
      <li>
        <p>隐私保护</p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="第二章rfid与物联网应用">第二章RFID与物联网应用</h2>

<h3 id="自动识别技术的发展">自动识别技术的发展</h3>

<p>条形码-&gt;磁卡-&gt; IC卡 -&gt; RFID 标签</p>

<h4 id="条形码">条形码</h4>

<ul>
  <li>信息容量大</li>
  <li>纠错能力强 保密性好</li>
  <li>应用范围广</li>
  <li>成本低</li>
  <li>容错能力强</li>
</ul>

<p>条码阅读器扫描条码时必须能够“看到”“清晰”的条码图形</p>

<ul>
  <li>Ø“看到”是指阅读器与条码之间没有遮挡，必须是“可视”</li>
  <li>Ø清晰”是指条码图形没有遮挡、折叠或破损</li>
</ul>

<h4 id="rfid标签">RFID标签</h4>

<ul>
  <li>RFID是利用无线射频信号空间耦合的方式，实现无接触的标签信息自动传输与识别的技术</li>
  <li>RFID标签又称为“电子标签（tag）”或“射频标签”</li>
</ul>

<h5 id="特点">特点：</h5>

<ul>
  <li>RFID芯片存储的数据量大，最多可以多达几千个字节</li>
  <li>RFID读写器读取RFID标签数据的距离可以是几厘米，甚至是上百米</li>
  <li>RFID标签可以贴在货物的内部、包装箱、运输托盘或安装在运输车辆上</li>
  <li>RFID读写器通过无线方式读取RFID标签数据，不需要与货物接触，也不限定货物摆放在特定的位置与特定的角度</li>
  <li>RFID读写器读取RFID标签数据可以在多种环境中完成，工作环境可以在白天或夜晚的黑暗状态中</li>
  <li>RFID标签数据的读写过程是通过无线通信方式自动完成的</li>
</ul>

<h5 id="应用">应用</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240628233951750.png" alt="image-20240628233951750" /></p>

<h5 id="分类">分类</h5>

<ol>
  <li>
    <p>按标签供电方式可以分为：无源与有源RFID标签</p>

    <ul>
      <li>
        <p>Ø 无源RFID标签内不含电池，它的能量要从RFID读写器获取</p>
      </li>
      <li>
        <p>Ø 当无源RFID标签靠近RFID读写器时，无源RFID标签的天线将接收到的电磁波能量转化成电能，激活RFID标签中的芯片，并将芯片中存储的数据发送到RFID读写器</p>
      </li>
      <li>
        <p>Ø 无源RFID标签的优点是<strong>体积小、重量轻、成本低、寿命长，</strong>可以制作成薄片或挂扣等不同形状，应用于不同的环境</p>
      </li>
      <li>
        <p>Ø 有源RFID标签由内部电池提供能量</p>
      </li>
      <li>
        <p>Ø 有源RFID标签的优点是作用<strong>距离远，可以达到几十米，甚至是上百米</strong></p>
      </li>
      <li>
        <p>Ø 有源RFID标签的缺点是<strong>体积大、成本高，使用时间受到</strong>电池寿命的限制</p>
      </li>
    </ul>
  </li>
  <li>
    <p>按工作模式RFID标签可以分为：主动式、被动式与半主动式</p>

    <ul>
      <li>
        <p>Ø 主动式RFID标签依靠自身的能量主动向RFID读写器发送数据</p>
      </li>
      <li>
        <p>Ø 被动式RFID标签从RFID读写器发送的电磁波中获取能量，激活RFID芯片，向RFID读写器发送数据</p>
      </li>
      <li>
        <p>Ø 半主动式RFID标签自身的能量只提供给RFID标签中的电路使用，并不主动向RFID读写器发送数据；当它接收到RFID读写器发送的电磁波激活之后，才向RFID读写器发送数据</p>
      </li>
    </ul>
  </li>
  <li>
    <p>按标签读写方式RFID标签可以分为：只读式与读写式</p>

    <ul>
      <li>
        <p>只读式RFID标签可以进一步分为三类：</p>

        <ul>
          <li>
            <p>只读标签 —内部使用ROM，只能读出不能写入</p>
          </li>
          <li>
            <p>一次性编程只读标签 —内部使用的是可编程序只读存储器（PROM）、可编程阵列逻辑（PAL），可以通过标签编码打印机写入商品编码信息</p>
          </li>
          <li>
            <p>重复编程只读标签 —内部使用的是可擦除可编程只读存储器（EPROM）或通用阵列逻辑（GAL），可重复编程只读标签的内容经过擦除后，可以重新编程写入，但是在读写器识别过程中只能读出不能写入</p>
          </li>
        </ul>
      </li>
      <li>
        <p>读写式RFID标签：</p>
        <ul>
          <li>读写式RFID标签内部使用的是随机存取存储器（RAM）或可擦可编程只读存储器（EEROM），标签的内容在识别过程中可以被读写器读出，也可以被读写器写入</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>按标签工作频率进行分类</p>

    <ul>
      <li>
        <p>Ø 低频RFID标签</p>
      </li>
      <li>
        <p>Ø 中高频RFID标签</p>
      </li>
      <li>
        <p>Ø 超高频与微波段RFID标签</p>
      </li>
    </ul>
  </li>
  <li>
    <p>按封装材料进行分类</p>

    <ul>
      <li>
        <p>Ø 纸质封装RFID标签</p>
      </li>
      <li>
        <p>Ø 塑料封装RFID标签</p>
      </li>
      <li>
        <p>Ø 玻璃封装RFID标签</p>
      </li>
    </ul>
  </li>
  <li>
    <p>按标签封装的形状进行分类</p>

    <ul>
      <li>
        <p>Ø 粘贴在标识物上的薄膜型的自粘贴式标签</p>
      </li>
      <li>
        <p>Ø 用户携带、类似于信用卡的卡式标签</p>
      </li>
      <li>
        <p>Ø 封装成能够固定在车辆或集装箱上的柱型标签</p>
      </li>
      <li>
        <p>Ø 封装在塑料扣中，用于动物耳标的扣式标签</p>
      </li>
      <li>
        <p>Ø 封装成钥匙扣中，用于随身携带的身份标识标签</p>
      </li>
      <li>
        <p>Ø 封装在玻璃管中，用于人或动物的植入式标签</p>
      </li>
    </ul>
  </li>
</ol>

<h4 id="epc编码标准">EPC编码标准</h4>

<h5 id="核心思想">核心思想</h5>

<ul>
  <li>为每一个产品，而不是一类产品分配一个唯一的EPC产品编码</li>
  <li>EPC编码能够存储在RFID标签的芯片中</li>
  <li>通过无线通信技术，RFID读写器可以通过非接触方式自动读取EPC编码</li>
  <li>通过连接在互联网的服务器，可以完成对EPC编码对应物品详细信息的查询</li>
</ul>

<h5 id="epc编码体系">EPC编码体系</h5>

<p>目标：EPC编码要为全球每一类产品中的每一件产品提供一个唯一的EPC码</p>

<p>编码结构</p>

<ul>
  <li>
    <p>第一个字段：<strong>版本号</strong></p>

    <p>版本号字段值表示产品编码所采用的EPC版本</p>

    <p>从版本号可以知道编码的长度与结构</p>
  </li>
  <li>
    <p>第二个字段：<strong>域名管理</strong></p>

    <p>域名管理字段值用来标识生产厂商</p>

    <p>根据域名管理字段值可以查询出生产厂商服务器在互联网的域名信息</p>
  </li>
  <li>
    <p>第三个字段：<strong>对象分类</strong></p>

    <p>对象分类字段值用来标识产品类型</p>
  </li>
  <li>
    <p>第四个字段：<strong>序列号</strong></p>

    <p>序列号字段值用来标识每一件产品</p>
  </li>
</ul>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/9581903b5aa75d4b3dcd3d3cf1d61836.png" alt="9581903b5aa75d4b3dcd3d3cf1d61836" /></p>

<h5 id="ons服务器体系">ONS服务器体系</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/7ce23fe58e37b10e55c72e5e7ff9f7b2.png" alt="7ce23fe58e37b10e55c72e5e7ff9f7b2" /></p>

<p>与互联网的DNS相似，物联网中ONS服务器体系同样要形成从根ONS服务器、顶级OSN服务器到本地ONS服务器的多层结构</p>

<p>通过层次性的ONS服务器体系的协同工作，为物联网应用系统提供物品名字解析服务，支持智能制造、智能物流等应用系统的运行</p>

<p>ONS服务器体系将成为支撑物联网运行的重要信息基础设施之一</p>

<p>物联网ONS是建立在互联网的DNS之上的，ONS与DNS存在着“依存与协作”的关系</p>

<p>互联网DNS技术为物联网ONS提供成熟的设计、组建与运行管理经验，为物联网发展奠定了坚实的基础</p>

<p>物联网的发展也进一步扩大了互联网的应用范围与作用</p>

<h4 id="rfid-标签读写器">RFID 标签读写器</h4>

<h5 id="基本功能">基本功能</h5>

<ul>
  <li>能够将读取储在RFID标签中的数据，并传送到计算机</li>
  <li>能够将计算机写入的数据或指令发送到RFID芯片</li>
  <li>能够发现标签读写过程中出现的错误</li>
</ul>

<h5 id="rfid标签读写器的分类">RFID标签读写器的分类</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/0507b925f12f8f936dd67eebebb21015.png" alt="0507b925f12f8f936dd67eebebb21015" /></p>

<h5 id="rfid读写器结构">RFID读写器结构</h5>

<ul>
  <li>中心控制器模块—执行对读写器整体运行的控制</li>
  <li>读写模块—实现对标签的数据读出与写入的功能</li>
  <li>存储器模块—存储系统软件、应用软件与标签数据</li>
  <li>人机交互模块—实现手持读写器操作人员的命令，显示命令执行的结果</li>
  <li>接口模块—实现读写器与高层计算机的数据通信</li>
  <li>电源模块—监控手持设备的电源供应与电池电量</li>
</ul>

<h5 id="设计问题">设计问题</h5>

<ul>
  <li>标签身份识别与标签数据传输解密/解密问题</li>
  <li>标签数据传输错误问题</li>
  <li>多标签读取过程中的“冲突”问题</li>
  <li>有源标签电源状态管理问题</li>
  <li>标签与天线位置对读写效果的影响</li>
</ul>

<h2 id="第三章传感器与传感网技术">第三章传感器与传感网技术</h2>

<h3 id="传感器概述">传感器概述</h3>

<p>传感器（sensor）是由敏感元件和转换元件组成的种检测裝置，能感受到被测量，并能将检测和感受到的信息，按一定规律变换成为电信号（电压、电流、频率或相位）输出，以满足感知信息的传输、处理、存储、显示、记录和控制的要求</p>

<p> 结构与工作原理示意图</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/91cd7a639117c06162ca84fc5935e3df.png" alt="91cd7a639117c06162ca84fc5935e3df" /></p>

<h4 id="传感器的分类">传感器的分类</h4>

<p>传感器分类的基本方法：</p>

<ul>
  <li>根据传感器功能分类</li>
  <li>根据传感器工作原理分类</li>
  <li>根据传感器感知的对象分类</li>
  <li>根据传感器的应用领域分类</li>
</ul>

<p>常用的物理传感器与化学传感器</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240701165213343.png" alt="image-20240701165213343" /></p>

<h5 id="物理传感器">物理传感器</h5>

<p>物理传感器的原理是利用力、热、声、光、电、磁、射线等物理效应，将被测信号量的微小变化转换成电信号</p>

<p>物理传感器可以进一步分为：<strong>力</strong>传感器、<strong>热</strong>传感器、声传感器、<strong>光</strong>传感器、<strong>电</strong>传感器、<strong>磁</strong>传感器与<strong>射线</strong>传感器等7类</p>

<h5 id="传感器介绍">传感器介绍</h5>

<blockquote>
  <p>力传感器</p>

  <p><strong>力传感器是能感受外力并将其转换成可用输出信号的传感器</strong></p>

  <p>力传感器是能感受外力并将其转换成可用输出信号的传感器力传感器的种类繁多，常用的力与压力传感器有电阻应变式、半导体应变式、压阻式、电感式、电容式、谐振式压力传感器，以及光纤压力传感器等</p>

  <p>原理示意图：</p>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/a110ce3c6fdcf7572df982996aff86fb.png" alt="a110ce3c6fdcf7572df982996aff86fb" /></p>

  <p>用途:<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/9fbc3c95ee01dec891f4f4c142f219e8.png" alt="9fbc3c95ee01dec891f4f4c142f219e8" /></p>

</blockquote>

<blockquote>
  <p>温度传感器</p>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/0962c3c158a46e1bd6e3f9a27e0a879f.png" alt="0962c3c158a46e1bd6e3f9a27e0a879f" /></p>
</blockquote>

<blockquote>
  <p>声传感器</p>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/635a3a36dcc7f98bc99248c6fbf3b404.png" alt="635a3a36dcc7f98bc99248c6fbf3b404" /></p>
</blockquote>

<blockquote>
  <p>光传感器</p>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/b5a7e19c3a40a762beba1faedf3cad38.png" alt="b5a7e19c3a40a762beba1faedf3cad38" /></p>

  <p><strong>分布式光纤传感系统</strong></p>

  <p>分布式光纤传感系统利用光纤作为传感敏感元件和传输信号介质，探测出沿着光纤不同位置的温度和应变的变化，实现分布、自动、实时、连续、精确的测量</p>

  <p>分布式光纤传感系统应用领域包括：</p>

  <ul>
    <li>Ø 智能电网的电力电缆表面温度检测、事故点定位</li>
    <li>Ø 发电厂和变电站的温度监测、故障点检测和报警</li>
    <li>Ø 水库大坝、河堤安全与渗漏监测</li>
    <li>Ø 桥梁与高层建筑结构安全性监测</li>
    <li>Ø 公路、地铁、隧道地质状况的监测</li>
  </ul>

  <p>分布式光纤温度传感系统可以在易燃、易爆的环境下同时测量上万个，可以对每个温度测量点进行实时测量与定位</p>
</blockquote>

<blockquote>
  <p>电传感器</p>

  <p>电传感器可以分为：电阻式、电容式、电感式传感器</p>

  <ul>
    <li>Ø <strong>电阻式</strong>传感器利用变阻器将非电量转换成电阻信号的原理制成的，电阻式传感器主要用于位移、压力、应变、力矩、气流流速、液面与液体流量等参数的测量</li>
    <li>Ø <strong>电容式</strong>是利用改变电容器的几何尺寸或介质参数，来使电容量变化的原理制成的；电容式传感器主要用于压力、位移、液面、厚度、水分含量等参数的测量</li>
    <li>Ø <strong>电感式</strong>是利用改变电感磁路的几何尺寸或磁体位置，来使电感或互感量变化的原理制成的，主要用于压力、位移、力、振动、加速度等参数的测量</li>
  </ul>
</blockquote>

<blockquote>
  <p>磁传感器</p>

  <ul>
    <li>磁传感器是最古老的传感器，指南针是磁传感器的最早的一种应用</li>
    <li>磁传感器将磁信号转化成为电信号输出</li>
    <li>磁电式传感器目前已经被高性能磁敏感材料的新型磁传感器所替代</li>
  </ul>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c2a2b060e8052cc22c14699b03321f0e.png" alt="c2a2b060e8052cc22c14699b03321f0e" /></p>
</blockquote>

<blockquote>
  <p>射线传感器</p>

  <p>射线传感器是将射线强度转换出可输出的电信号的传感器</p>

  <ul>
    <li>Ø 射线传感器可以分为：X射线传感器、γ射线传感器、β射线传感器、辐射剂量传感器</li>
    <li>Ø 射线传感器已经在环境保护、医疗卫生、科学研究与安全保护领域广泛使用</li>
  </ul>
</blockquote>

<blockquote>
  <p>化学传感器</p>

  <p>化学传感器可以将化学吸附、电化学反应过程中被测信号的微小变化转换成电信号的一类传感器</p>

  <ul>
    <li>Ø 按传感方式的不同，可分为：
      <ul>
        <li>—接触式化学传感器</li>
        <li>—非接触式化学传感器</li>
      </ul>
    </li>
    <li>Ø 按结构形式的不同，可以分为：
      <ul>
        <li>—分离型化学传感器</li>
        <li>—组装一体化化学传感器</li>
      </ul>
    </li>
    <li>Ø 按检测对象的不同，可以分为：
      <ul>
        <li>—气体传感器</li>
        <li>—离子传感器</li>
        <li>—湿度传感器</li>
      </ul>
    </li>
  </ul>
</blockquote>

<blockquote>
  <p>生物传感器</p>

  <p>生物传感器是由生物敏感元件和信号传导器组成</p>

  <p>Ø 生物敏感元件可以是生物体、组织、细胞、酶、核酸或有机物分子</p>

  <p>Ø 不同的生物元件对于光强度、热量、声强度、压力有不同的感应特性</p>

  <p>分类：</p>

  <ul>
    <li>输出信号方式：生物亲和型生物传感器、代谢型生物传感器与催化性生物传感器</li>
    <li>分子识别元件：酶传感器、微生物传感器、组织传感器、细胞传感器与免疫传感器</li>
    <li>信号转换器：电化学生物传感器、半导体生物传感器、测热型生物传感器、测光型生物传感器、测声型生物传感器</li>
  </ul>
</blockquote>

<blockquote>
  <p>纳米传感器</p>

  <p>定义：任何一种传感器只要具备以下属性之一者都可以称为纳米传感器。这些属性是：</p>

  <ul>
    <li>Ø传感器大小是纳米级的</li>
    <li>Ø传感器灵敏度是纳米级的</li>
    <li>Ø传感器与被观测物之间的相互作用距离在纳米级的</li>
  </ul>

  <p>特点：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/927a85aa6687923b2fe6cb9ece0d2892.png" alt="927a85aa6687923b2fe6cb9ece0d2892" /></p>

  <p>例子：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/59bf57c946574fd22624694dbf938653.png" alt="59bf57c946574fd22624694dbf938653" /></p>

  <p>分类：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/8b474e5e85fce9f84363c18e3f60825b.png" alt="8b474e5e85fce9f84363c18e3f60825b" /></p>

  <ul>
    <li>纳米传感器包含利用纳米结构（至少一个维度上横向尺寸小于100nm，同时其他维度上尺寸小于1μm）的环境中传递信息</li>
    <li>Ø从纳米传感器定义可以看出：纳米传感器必须遵循几何尺寸上达到纳米量级的要求</li>
    <li>Ø体积小的纳米传感器可以作为植入式传感器，应用于疾病医疗与健康监测之中</li>
  </ul>
</blockquote>

<h4 id="传感器性能指标">传感器性能指标</h4>

<ul>
  <li>Ø线性度</li>
  <li>Ø灵敏度</li>
  <li>Ø分辨率</li>
  <li>Ø迟滞</li>
  <li>Ø重复性</li>
  <li>Ø漂移</li>
  <li>Ø测量范围</li>
  <li>Ø精度</li>
</ul>

<h3 id="智能传感器">智能传感器</h3>

<p>特点：</p>

<ul>
  <li>Ø自学习、自诊断与自补偿能力</li>
  <li>Ø复合感知能力</li>
  <li>Ø灵活的通信能力</li>
</ul>

<p>MEMS与NEMS技术是MEMS与NEMS是在微电子技术基础上发展起来的多学科交叉的新兴学科，</p>

<p>它以微电子及机械加工技术为依托，研究涉及微电子学、机械学、力学、自动控制科学、材料科学等多个学科</p>

<ul>
  <li>20世纪60年代，科学家开始了MEMS技术的研究</li>
  <li>80年代微型硅加速度计、微型硅陀螺仪、微型硅静电马达相继问世</li>
  <li>90年代科学家开展了NEMS技术的研究与纳米传感器器件制备</li>
</ul>

<h3 id="无线传感器">无线传感器</h3>

<p>UGS的无线传感器的研究与应用</p>

<h4 id="无线传感器网络">无线传感器网络</h4>

<h5 id="从无线分组网到无线自组网">从无线分组网到无线自组网</h5>

<p>IEEE将无线自组网定义为一种特殊的自组织、对等式、多跳、无线移动网络（MANET），它是在无线分组网的基础上发展起来的</p>

<p>无线自组网有多个英文名称，如Ad hoc network 、Self-organizing network、Infrastructureless network 与Multi-hop network</p>

<p>1991年5月，IEEE正式采用“Ad hoc网络”术语， Ad hoc在英语中的含义是“for the specific purpose only”，即“专门为某个特定目的、即兴的、事先未准备的”意思</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c6241efee3a1e5d5159a9d18ee7aad0c.png" alt="c6241efee3a1e5d5159a9d18ee7aad0c" /></p>

<p>无限能自组网的特点：</p>

<ul>
  <li>Ø自组织与独立组网</li>
  <li>Ø无中心</li>
  <li>Ø多跳路由</li>
  <li>Ø动态拓扑</li>
  <li>Ø无线传输的局限与节点能量的限制</li>
  <li>Ø网络生存时间的限制</li>
</ul>

<h5 id="从无线自组网到无线传感器网网络">从无线自组网到无线传感器网网络</h5>

<p>LWIM 与WINS无线传感器网络的研究</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/88f908137c16eaa099a7238051283385.png" alt="88f908137c16eaa099a7238051283385" /></p>

<p>智能尘埃项目的研究</p>

<p>智能尘埃(Smart Dust)项目研究的目标是通过MEMS技术，实现传感、计算与通信能力的集成，用智能传感器技术去增强微型机器人环境感知与智慧处理能力</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d0aa4f357ad4b25164a1c604f44516b5.png" alt="d0aa4f357ad4b25164a1c604f44516b5" /></p>

<p>无线传感器网络技术发展的过程</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/920e49e80c247c0f03b522239d8e309f.png" alt="920e49e80c247c0f03b522239d8e309f" /></p>

<h4 id="无线传感器网络-1">无线传感器网络</h4>

<h5 id="无线传感器网络特点">无线传感器网络特点：</h5>

<ul>
  <li>网络规模</li>
  <li>自组织网络</li>
  <li>拓扑结构的动态变化</li>
  <li>以数据为中心</li>
</ul>

<h5 id="无线传感器网络的基本结构">无线传感器网络的基本结构</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/89497cceaffc6f8faa51825a1ceb6910.png" alt="89497cceaffc6f8faa51825a1ceb6910" /></p>

<h5 id="无线传感器网络节点类型">无线传感器网络节点类型:</h5>

<ul>
  <li>传感器节点</li>
  <li>汇聚节点</li>
  <li>管理节点</li>
</ul>

<blockquote>
  <p>电源能量对无线传感器节点设计的限制</p>

  <p>Ø 无线传感器节点通常是一个微型的嵌入式系统，它的处理能力、存储能力和通信能力相对较弱，通过自身携带的能量有限的电池（钮扣电池或干电池）供电</p>

  <p>Ø 汇聚节点既可以是一个具有增强功能的传感器节点，有足够的能量提供给更多的内存与计算资源，也可以是没有监测功能仅带有无线通信接口的特殊网关设备</p>
</blockquote>

<h5 id="无线传感器网络结构">无线传感器网络结构</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/decbdeda7ecdb419fdc1a1e0d0949b49.png" alt="decbdeda7ecdb419fdc1a1e0d0949b49" /></p>

<h5 id="无线传感器节点模块的功能">无线传感器节点模块的功能</h5>

<ol>
  <li>传感器模块：传感器完成监控区域内信息感知和采集，AC/DC电路将模拟信号转换成数字信号</li>
  <li>处理器模块：负责控制整个传感器节点的操作，存储和处理传感器采集的数据，以及其他节点传送来的数据</li>
  <li>无线通信模块：负责与其他传感器节点进行无线通信，网络层模块负责完成数据包的传输路由选择，介质访问控制模块负责协调多节点对公共通信信道的访问控制，无线收发器模块负责数据信号的发送和接收</li>
</ol>

<h5 id="无线传感器节点设计的原则">无线传感器节点设计的原则</h5>

<ol>
  <li>微型化</li>
  <li>低成本</li>
  <li>低功耗</li>
  <li>灵活性</li>
  <li>鲁棒性</li>
</ol>

<h5 id="研究与发展">研究与发展</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/48ea20129af6f7a215e45d484de1ab85.png" alt="48ea20129af6f7a215e45d484de1ab85" /></p>

<h4 id="无线传感器与执行器网络">无线传感器与执行器网络</h4>

<p>背景导入：</p>

<p>随着WSN在环境监测、智能医疗、智能交通与军事领域应用的深入，人们认识到：在某些应用环境中必须将执行器与传感器结合起来，<strong>无线传感器与执行器网络（Wireless Sensor and Actor Networks，WSAN）</strong>研究被提上日程</p>

<p>小型、智能、自治、低能耗、低成本执行器研发的速度，使得WSAN成为可能；目前WSAN已经在工业生产线的工业机器人、军事上广泛应用的无人机、未来战士、防暴机器人、运输机器人中已经应用</p>

<p>作为物联网主要支撑技术的下一代无线传感器网络，WSAN有望应用于防灾救灾、智能工业、智能农业、智能家居、智能交通、智能医疗等应用领域，同时WSAN的应用又进一步推动了普适计算、CPS与环境智能化研究的发展</p>

<h5 id="基本原理">基本原理</h5>

<p>传感器节点和执行器节点的区别</p>

<ul>
  <li>传感器节点是静态不移动的，执行器节点是移动的</li>
  <li>部署在监控区域的传感器节点数量很多，而执行器节点不需要很多，关键要看它执行能力的强弱</li>
  <li>WSAN要求传感器节点与传感器节点、传感器节点与执行器节点、执行器节点与执行器节点之间要能够协同通信</li>
</ul>

<h5 id="wsan的主要特点">WSAN的主要特点</h5>

<ol>
  <li>异构性</li>
  <li>实时性</li>
  <li>移动性</li>
  <li>协作性</li>
</ol>

<h5 id="wsan的执行机制">WSAN的执行机制</h5>

<p>协同机制</p>

<p>自主机制与半自主机制</p>

<h4 id="无线多媒体传感网络">无线多媒体传感网络</h4>

<p>WMSN（Wireless Multimedia Sensor Network）的基本概念</p>

<p>在军事战场监控与评估、机器人视觉、交通监控、车辆主动安全、医疗监护、智能家居、环境监控、工业工程控制等实际应用中，需要对视频、音频、图像等多媒体信息的感知、传输和处理，需要比传统的WSN更为直观、更清晰的信息</p>

<p>WMSN是在传统的WSN的基础上引入视频、音频、图像等多媒体信息感知、传输与处理功能的新型WSN</p>

<p>WMSN能够更准确、直观地反映现场，感知信息更丰富，它的研究与应用将会推进物联网和普适计算的实现</p>

<h5 id="无线多媒体传感器网络结构设计基本思路">无线多媒体传感器网络结构设计基本思路</h5>

<p>分类、分级结构的WMSN</p>

<ol>
  <li>单层网络结构</li>
  <li>集中式处理的单层网络结构</li>
  <li>异构的多层网络结构</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/25c004cdb40dfb11b8ac3f713dda96e6.png" alt="25c004cdb40dfb11b8ac3f713dda96e6" /></p>

<h4 id="水下无线传感网络">水下无线传感网络</h4>

<p>（Underwater Wireless Sensor Network，UWSN）</p>

<p>引入背景</p>

<p>随着无线传感器网络与水下机器人技术的逐渐成熟，研究人员自然会想到：如何将WSN概念和水下机器人技术结合在一起，应用于海洋自然资源探测、水域污染监控、近海勘探、灾难预警、辅助导航与战术监控等领域中</p>

<ul>
  <li>Ø水下传感器网络主要利用声波实现通信和组网，“水下声传感器网络”或“水下无线传感网络”</li>
  <li>Ø水下无线传感网络中解决间歇性、长时延、高误码率和高包丢失率所引发的容迟问题，是一个困难的研究课题</li>
</ul>

<h5 id="uwsn与陆地wsn的区别">UWSN与陆地WSN的区别</h5>

<ul>
  <li>陆地WSN节点造价相当于水下无线传感网络节点便宜，UWSN要考虑防水、防腐蚀等问题，结构相对复杂，造价必然会高，水下设备更新与维护的费用也相对高一些</li>
  <li>由于UWSN节点的造价高，因此它不可能像陆地WSN部署那么密集，也不可能不加固定的任其漂流，UWSN的传感器节点相对比较少</li>
  <li>声波在海水中传播时衰减很大，在水下通信节点之间的距离与陆地上相同时，需要的能量消耗要大得多，因此水下传感器节点需要储备更多的能量</li>
  <li>陆地WSN一般存储空间都比较小，而水下声波信道是间歇性的，水下传感器节点需要将感知数据存储起来，因此水下传感器节点需要使用容量大一些的存储器</li>
</ul>

<h5 id="水下节点类型">水下节点类型</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/e83549325db8634d835884a0c92ecb65.png" alt="e83549325db8634d835884a0c92ecb65" /></p>

<p>自主式水下航行器（AUV）完成与水下传感器的通信、感知数据查询与网络管理功能</p>

<ul>
  <li>Ø由于自主式水下航行器承担的任务的不同，有些自主式水下航行器像小型的潜水艇，有些水下机器人也可以成为自主式水下航行器</li>
  <li>Ø很多种自主式水下航行器在海里接收水下传感器传送的数据，当浮出水面时将数据通过无线信道传送给水上基站，水上基站再通过水面汇聚节点将数据转发到岸边汇聚节点</li>
</ul>

<h5 id="网络结构">网络结构</h5>

<p>三维水下传感器网络的水下传感器节点悬浮在不同的深度和位置，形成一个能够监测三维海洋信息的传感器网络</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/5c02eb9b959392a0294279398926e4c9.png" alt="5c02eb9b959392a0294279398926e4c9" /></p>

<h4 id="auv传感器网络">AUV传感器网络</h4>

<p>自主式水下航行器（Autonomous Underwater Vehicle，AUV）又称为“水下自主机器人”由水下自主机器人组成的传感器网络称为“移动水下传感器网络”</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/52f1635c915aa829a1e36752a9237a33.png" alt="52f1635c915aa829a1e36752a9237a33" /></p>

<h4 id="地下无线传感器网络wusn">地下无线传感器网络（WUSN）</h4>

<p>地下无线传感器网络（Wireless Underground Sensor Network ，WUSN）</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/0b11e58cff2c071917ac9309d5b7512f.png" alt="0b11e58cff2c071917ac9309d5b7512f" /></p>

<h5 id="特点-1">特点</h5>

<ol>
  <li>噪声</li>
  <li>路径损耗</li>
  <li>反射/折射</li>
  <li>多径衰减</li>
  <li>传播速度降低</li>
</ol>

<h5 id="wusn的结构">WUSN的结构</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/403a823a62b7877a99cee9250c7ec1a9.png" alt="403a823a62b7877a99cee9250c7ec1a9" /></p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/567dfa5cd09116acb7b2dfe3d16e5cda.png" alt="567dfa5cd09116acb7b2dfe3d16e5cda" /></p>

<h5 id="wusn的主要优点">WUSN的主要优点</h5>

<ol>
  <li>隐蔽性好</li>
  <li>易于部署</li>
  <li>实时性好</li>
  <li>可靠性高</li>
  <li>覆盖密度高</li>
</ol>

<h4 id="无线纳米传感器网络">无线纳米传感器网络</h4>

<ol>
  <li>集成纳米传感器系统的研究</li>
</ol>

<ul>
  <li>Ø将适合纳米器件信息处理与传输的信号处理单元与纳米传感器集成的系统称为“集成纳米传感器系统（Integrate NanoSensor System，INS）”</li>
  <li>Ø目前研究人员正在致力于INS的接口标准、自校验、容错与数字补偿的研究，以提高系统的精度、动态范围与可靠性</li>
  <li>Ø集成纳米传感器系统研究为纳米传感器节点的设计与制造技术奠定了基础</li>
</ul>

<ol>
  <li>纳米级器件通信技术的研究</li>
</ol>

<p>预期在纳米级器件通信技术的研究中采用的技术路线主要有两种</p>

<ul>
  <li>Ø第一种是分子通信，即研究分子之间通信的信号编码、发送与接收方法</li>
  <li>Ø第二种是纳米电磁通信，即研究新型纳米材料发送和接收来自组分的电磁辐射</li>
  <li>Ø在纳米传感器电磁通信研究中主要集中在纳米天线与纳米收发器的研究上</li>
</ul>

<ol>
  <li>纳米电池技术的研究</li>
</ol>

<ul>
  <li>Ø为了配合基于主动型纳米传感器的NWSN节点的研究，目前科研人员正在开展锂纳米电池、自供电纳米发动机、太阳能利用技术的研究</li>
  <li>Ø锂纳米电池作为未来纳米传感器的小型电源的可行性已经得到证实</li>
  <li>Ø自供电纳米发动机是研究从环境中收集的能量、化学能、人体的运动、振动、声波、建筑物震动的能量，人讲话、车辆或其他噪声为纳米传感器所用的电能</li>
</ul>

<h2 id="第四章物联网智能硬件与嵌入式">第四章物联网智能硬件与嵌入式</h2>

<h3 id="嵌入式技基本概念">嵌入式技基本概念</h3>

<h4 id="嵌入式系统发展过程">嵌入式系统发展过程</h4>

<ul>
  <li>第一阶段：以可编程序控制器系统为核心的研究阶段</li>
  <li>第二阶段：以嵌入式中央处理器CPU为基础、简单操作系统为核心的阶段</li>
  <li>第三阶段：以嵌入式操作系统为标志的阶段</li>
  <li>第四阶段：基于网络操作的嵌入式系统发展阶段</li>
</ul>

<h4 id="嵌入式系统的体系结构">嵌入式系统的体系结构</h4>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c24a5f7de4c97b28b681904fe7b2f2af.png" alt="c24a5f7de4c97b28b681904fe7b2f2af" /></p>

<h4 id="嵌入式系统的特点">嵌入式系统的特点</h4>

<p>面向特定应用的专用计算机系统</p>

<p>根据应用的具体需求，剪裁计算机的硬件与软件</p>

<p>适应对计算机功能、可靠性、成本、体积、功耗的要求</p>

<h3 id="物联网智能硬件">物联网智能硬件</h3>

<h4 id="智能硬件intelligent-hardware的基本概念">智能硬件（Intelligent Hardware）的基本概念</h4>

<p>体现了“互联网+传感器+计算+通信+智能+控制+大数据+云计算”等多项技术的融合，其核心是<strong>智能技术</strong></p>

<p>标志着硬件技术向着更加智能化、交互方式更加人性化，以及向“云+端”融合方向发展的趋势，预示着智能硬件将成为物联网产业发展新的热点</p>

<p>《智能硬件产业创新发展专项行动(2016-2018年)》明确重点发展的五类智能硬件产品：智能穿戴设备、智能车载设备、智能医疗健康设备、智能服务机器人、工业级智能硬件设备</p>

<h4 id="人工智能">人工智能</h4>

<p>人工智能是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术应用系统的一门科学</p>

<p>人工智能研究的目标是让机器具有像人类一样的思考能力与识别事物、处理事物的能力</p>

<p>人工智能研究的基本内容：</p>

<ol>
  <li>智能感知</li>
  <li>智能推理</li>
  <li>智能推理</li>
  <li>智能行动</li>
</ol>

<h4 id="人机交互">人机交互</h4>

<p>支撑智能硬件的六项技术是：<strong>人机交互、硬件结构、软件应用、设备协同、信息安全与能量控制</strong></p>

<p>“应用创新”是物联网发展的核心，“用户体验”是物联网应用设计的灵魂物联网的用户接入方式多样性、应用环境差异性，决定了物联网智能硬件在人机交互方式上的特殊性</p>

<p>一个成功的物联网智能硬件设计，必须根据不同物联网应用系统需求与用户接入方式，认真地解决好物联网智能硬件的人机交互问题；很多人机交互的奇思妙想甚至会成就物联网在某一个领域的应用</p>

<p>人机交互的基本方式</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c89616afb523318d105779722b5d5ce4.png" alt="c89616afb523318d105779722b5d5ce4" /></p>

<ol>
  <li></li>
</ol>

<h5 id="物联网智能硬件人机交互的特点">物联网智能硬件人机交互的特点</h5>

<p>统的键盘、鼠标输入方法，以及屏幕文字、图形交互方式已经不能适合移动环境、便携式物联网终端设备的应用需求，必须摒弃传统的人机交互方式，研发出新的人机交互方法</p>

<p>可穿戴计算设备在研究人机交互中使用了<strong>虚拟交互、人脸识别、虚拟现实与增强现实、脑电控制、柔性显示与柔性电池等</strong>新技术能够适应物联网智能硬件的特殊需求，对于研究物联网智能硬件人机交互技术有着重要的参考和示范作用</p>

<ol>
  <li>虚拟交互技术</li>
  <li>人脸识别技术</li>
  <li>虚拟现实与增强现实技术
    <ol>
      <li>虚拟现实的特征：沉浸感、交互性和想象力</li>
      <li>桌面虚拟现实系统、沉浸式虚拟现实系统、分布式虚拟现实系统与增强现实系统</li>
    </ol>
  </li>
  <li>柔性显示技术</li>
  <li>柔性电池技术</li>
</ol>

<h3 id="可穿戴计算研究及其在物联网中的应用">可穿戴计算研究及其在物联网中的应用</h3>

<p>可穿戴计算基本概念(wearable computing)</p>

<p>随着物联网应用的发展，目前可穿戴计算应用正在向智能医疗、智能家居、智能交通、智能工业、智能电网领域延伸和发展</p>

<p>可穿戴计算体现出“以人为本”和“人机合一”，以及为佩戴者提供“专属化”、“个性化”服务的特征</p>

<p>可穿戴计算设备以“云-端”模式运行，以及可穿戴计算与大数据技术的融合，将对可穿戴计算设备的研发与物联网的应用带来巨大的影响</p>

<h4 id="分类-1">分类</h4>

<ol>
  <li>头戴式设备</li>
  <li>身着式</li>
  <li>手戴式</li>
  <li>脚穿式</li>
</ol>

<h3 id="智能机器人研究及其在物联网中的应用">智能机器人研究及其在物联网中的应用</h3>

<p>第一代机器人的主要特征是：位置固定、非程序控制、无传感器的电子机械装置，只能够按给定的工作顺序操作</p>

<p>第二代机器人的主要特征是：传感器的应用提高了机器人的可操作性。研究人员在机器人上安装各种传感器，如触觉传感器、压力传感器和视觉传感系统，向着人工智能方向发展</p>

<p>第三代机器人的主要特征是：安装了多种传感器，能够进行复杂的逻辑推理、判断和决策，具有初级的感知和自动生成程序能力，能够自动避开障碍物</p>

<p>第四代机器人的主要特征是：具有<strong>人工智能、自我复制、自动组装的特点，从机器人网络向“云机器人”</strong>方向演进</p>

<p><strong>应用前景</strong></p>

<p>通过网络控制的智能机器人正在向我们展示出对世界超强的感知能力与智能处理能力。智能机器人可以在物联网的环境保护、防灾救灾、安全保卫、航空航天、军事，以及工业、农业、医疗卫生等领域的应用中发挥重要的作用，必将成为物联网的重要成员</p>

<p>发展物联网的最终目的不是简单地将物与物互联，而是要催生很多具有计算、通信、控制、协同和自治性能的智能设备，实现实时感知、动态控制和信息服务；智能机器人研究的目标同样追求的是机器人的行为、学习、知识的感知能力；在这一点上，智能机器人与物联网研究目标有很多相通之处</p>

<p>云计算、大数据与智能机器人技术的融合导致“云机器人”的出现；由于云计算强大的计算与存储能力，可以将智能机器人大量的计算和存储任务集中到云端，同时允许单个机器人访问云端计算与存储资源，这就为需要较少的机器人机载计算与存储，降低机器人制造成本，提高智能机器人在物联网应用的高度和深度</p>

<h4 id="分类-2">分类</h4>

<ol>
  <li>工业机器人</li>
  <li>农业机器人</li>
  <li>服务机器人</li>
  <li>医用机器人</li>
  <li>微机器人</li>
  <li>微操作机器人</li>
  <li>仿人机器人</li>
  <li>玩具机器人</li>
  <li>特种机器人</li>
  <li>空间机器人</li>
  <li>军用机器人</li>
</ol>

<h2 id="第五章物联网通信与网络技术">第五章物联网通信与网络技术</h2>

<h3 id="计算机网络技术的研究与发展">计算机网络技术的研究与发展</h3>

<h4 id="从信息技术角度看通信与网络技术的发展">从信息技术角度看通信与网络技术的发展</h4>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d48ac19b653dc8fc43366e48116ea66c.png" alt="d48ac19b653dc8fc43366e48116ea66c" /></p>

<h4 id="计算机网络的形成与发展">计算机网络的形成与发展</h4>

<p>分组交换技术的的出现标志着计算机网络时代的到来</p>

<p>ARPANET的出现标志着计算机网络与互联网时代的到来</p>

<h5 id="计算机网络协议的研究与发展">计算机网络协议的研究与发展</h5>

<p>从1969年到1971年，经过近两年对网络应用层协议的研究与开发，研究人员陆续推出了第一批计算机网络应用协议的标准文本，如FTP标准、E-Mail标准、DNS标准，为互联网应用奠定了基础</p>

<p>1972年10月，罗伯特·卡恩在华盛顿DC召开的第一届国际计算机与通信会议上首次演示了ARPANET的功能，使学术界与产业界认识到互联网的应用前景</p>

<p>从20世纪70年代诞生以来，TCP/IP协议经历了20多年的实践检验和不断完善的过程，促进了互联网的发展，使得TCP/IP协议成为互联网的核心协议</p>

<h5 id="互联网的形成与发展">互联网的形成与发展</h5>

<p>如果说开放互联网商业服务是促进互联网快速发展第一次飞跃的推动力，那么Web技术的应用是互联网第二次快速发展的推动力</p>

<p>20世纪90年代，随着信息高速公路NII的推进，互联网进入了高速发展阶段，互联网以及成为人类信息交互与共享的重要平台</p>

<p>互联网代表着全球范围内无限增长的信息资源，成为人类拥有的最大的知识宝库，推动着全球经济、科技与文化的发展</p>

<h5 id="三网融合的发展">三网融合的发展</h5>

<p>互联网的广泛应用推动电信网技术的高速发展，电信运营商的服务业务也从以语音服务为主，逐步向数据业务方向发展，引起世界范围内大规模的产业结构调整与企业重组</p>

<p>宽带城域网的建设导致了计算机网络、电信通信网与电视通信网“三网融合”局面的出现，实质上是计算机网络、电信通信网与电视传输网技术与业务的融合</p>

<p>“三网融合”的技术基础是计算机网络技术，标志着电信通信网与电视通信网的传输网已经向“IP化”的方向发展</p>

<h4 id="计算机网络的分类与特点">计算机网络的分类与特点</h4>

<h5 id="计算机网络的分类方法">计算机网络的分类方法</h5>

<p>按覆盖的地理范围划分，计算机网络可以分为5种基本的类型</p>

<ol>
  <li>广域网</li>
  <li>城域网</li>
  <li>局域网</li>
  <li>个人区域网</li>
  <li>人体区域网</li>
</ol>

<h5 id="广域网wide-area-network-wan">广域网（Wide Area Network ，WAN）</h5>

<p>广域网WAN又称为远程网，所覆盖的地理范围从几十公里到几千公里，覆盖一个国家、地区，或横跨几个洲，形成国际性的远程计算机网络</p>

<p>广域网的通信子网利用公用分组交换网、卫星通信网或无线分组交换网，它将分布在不同地区的计算机系统、城域网、局域网互联起来，实现资源共享的目的</p>

<p>一般情况下广域网应该是一种公共数据网络，只有某些对信息安全、性能有特殊要求的国家部门网络、大型企业网络、大型物联网应用系统，才需要组建自己专用广域网</p>

<h5 id="城域网">城域网</h5>

<p>支持一个现代化城市的宽带城域网结构一般可以分为核心交换、汇聚与接入等三层结构</p>

<p>宽带城域网是以IP协议为基础，通过计算机网络、广播电视网、电信网的三网融合，形成覆盖城市区域的网络通信平台，为语音、数据、图像、视频传输与大规模的用户接入提供高速与保证质量的服务</p>

<p>宽带城域网的应用和业务主要有：大规模互联网用户的接入，网上办公、视频会议、网络银行、网购等办公环境的应用、家庭网络的应用，以及物联网的智能家居、智能医疗、智能交通、智能物流等应用</p>

<h5 id="局域网local-area-network-lan">局域网（Local Area network ，LAN）</h5>

<p>局域网覆盖有限的地理范围，它适用于机关、校园、工厂、机房等有限范围内的计算机、服务器与存储设备连网的需求</p>

<p>局域网能够提供高数据传输速率（10Mbps～100Gbps）、低误码率的高质量数据传输环境</p>

<p>局域网可以分为有线局域网（如Ethernet）与无线局域网（如Wi-Fi）等两类</p>

<h5 id="个人区域网personal-area-networkpan">个人区域网（Personal Area Network，PAN）</h5>

<p>由于个人区域网络PAN主要是用无线通信技术实现联网设备之间的通信，因此就出现了无线个人区域网络（WPAN）的概念</p>

<p>无线传感器网络WSN中主要使用的无线通信技术是802.11标准的WLAN、802.15.4标准的无线个人区域网（6LoWPLAN）技术、蓝牙技术、ZigBee技术</p>

<p>物联网应用的发展更凸显出个人区域网络技术与标准研究的重要性</p>

<h5 id="人体区域网body-area-networkban">人体区域网（Body Area Network，BAN）</h5>

<p>智能医疗应用系统需要将人体携带的传感器或移植到人体内的生物传感器结点组成人体区域网，物联网智能医疗应用的计算机网络提出了新的需求，促进了人体区域网BAN的发展</p>

<p>智能医疗需要将采集的人体生理信号（如温度、血糖、血压、心跳等参数），以及人体活动或动作信号、人所在的环境信息，通过无线方式传送到附近的基站，因此用于智能医疗的个人区域网是一种无线人体区域网WBAN</p>

<p>2012年IEEE正式批准了，无线人体区域网WBAN的IEEE 802.15.6标准</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/30c8990cf1b30652b0d228fd8ec32490.png" alt="30c8990cf1b30652b0d228fd8ec32490" /></p>

<h4 id="tcpip的基本概念">TCP/IP的基本概念</h4>

<p>开放的协议标准，独立于特定的计算机硬件与操作系统，独立于特定的网络硬件，可以运行在局域网、广域网等各种传输网之上，适用于互联网与物联网</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240701224922895.png" alt="image-20240701224922895" /></p>

<h5 id="tcp协议的特点">TCP协议的特点</h5>

<ul>
  <li><strong>可靠的面向连接服务：</strong>在应用层数据传输之前，必须在通信的与目的程序进程之间建立一个TCP连接；当一次进程通信结束后，TCP协议关闭这个连接；面向连接传输的每一个报文都需接收方确认</li>
  <li><strong>面向字节流的传输服务：</strong>流（stream）相当于一个管道，从一端放入什么的字节流，从另一端可以照原样取出什么的字节流；TCP协议对正确接收到的字节行确认，出错时要求发送方重传</li>
  <li><strong>TCP支持数据全双工通信：</strong>两个应用程序进程可以同时利用该连接发送和接收数据报文。双方通过捎带确认的方法交互准确接收数据报的信息</li>
</ul>

<h5 id="udp协议的特点">UDP协议的特点</h5>

<ul>
  <li><strong>无连接服务：</strong>UDP协议相对比较简单，两个通信的进程之间传输之前不建立连接，因此通过UDP协议不能保证发送的报文按顺序到达</li>
  <li><strong>不提供拥塞控制机制：</strong>UDP协议不提供拥塞控制机制，发送进程可以用任意的速率发送报文，以提高报文传输的实时性</li>
  <li>TCP协议适用于对数据传输可靠性要求较高的网络应用，UDP协议适用于对数据传输实时性要求较高的网络应用</li>
</ul>

<h5 id="实时传输协议">实时传输协议</h5>

<p>实时传输协议<strong>RTP与RTCP的研究</strong></p>

<p>物联网感知信息中会有大量的视频</p>

<p>视频传输可以分为：非实时的视频传输与实时视频传输</p>

<p>非实时的视频传输，如智能安防应用中需要下载视频之后再播放，这类应用对于视频中的语音传输与图像传输的实时性要求不高，传统的TCP协议可以满足这类应用</p>

<p>对于智能工业、智能交通、智能医疗中对视频信息传输的实时性要求较高，传统的TCP协议已经不能满足这类应用需要<strong>应用实时传输协议（RTP）与实时传输控制协议（RTCP）</strong></p>

<h5 id="容迟网技术的研究">容迟网技术的研究</h5>

<p>TCP协议应用于互联网时，其实做了一个假设：在一次进程通信过程中，源端与目的端之间一定要保证“持续”的TCP连接</p>

<p>物联网很多应用都不能保证满足TCP“持续”连接的要求，学术界将这类网络称之为“受限网络”</p>

<p>针对受限网络，研究人员提出“容迟网（DTN）”的研究，修改了传统的TCP/IP的体系结构与传输机制，以适应物联网中对传输层的“<strong>长延时、间歇性连接、低信噪比与高误码率</strong>”的应用需求</p>

<h4 id="ipv4与ipv6协议">IPv4与IPv6协议</h4>

<p>IP协议的特点</p>

<ul>
  <li>IP协议是一种无连接的分组传送服务的协议提供的是一种“尽力而为（best-effort）”的服务</li>
  <li>IP协议可以用于城域网或局域网、个人区域网，以及Ethernet网、Wi-Fi、移动通信网4G/5G网络</li>
  <li>IP协议能够适用于互联网、移动互联网与物联网</li>
</ul>

<p>IP协议与网络规模矛盾</p>

<ul>
  <li>IPv4的地址长度为32位，2011年2月IPv4地址全部分配完毕</li>
  <li>互联网面临着地址匮乏的危机，解决的办法是从IPv4协议向IPv6协议过渡</li>
  <li>IPv6的地址长度定为128位，因此IPv6可以提供多达超过2128（3.4×1038）个地址</li>
</ul>

<p>未来物联网大量的传感器、RFID读写设备、智能控制设备、智能汽车、智能机器人、可穿戴计算设备都可以获得IPv6地址，联入物联网的节点数量将可以不受限制地持续增长</p>

<p>IPv6协议能够适应物联网智能工业、智能农业、智能交通、智能医疗、智能物流、智能家居等领域的应用，IPv6协议将成为物联网核心协议之一</p>

<h4 id="下一代网络技术的研究">下一代网络技术的研究</h4>

<p>SDN技术研究的背景</p>

<p>目前在互联网上大量应用的路由器是由不同的网络设备制造商设计的，路由器内部的体系结构、工作模式不仅相同。执行IP协议的软件固化在路由器内部专用芯片中，网络使用者对路由器的工作模式没有任何控制能力</p>

<p>软件定义网络（Software Defined Network，SDN）技术正是为满足下一代互联网体系结构要求而开展的一项研究</p>

<p>SDN是一种新的路由器体系结构，能提供开放的接口，实现虚拟化、可编程与可重构，具备对新网络业务灵活响应和快速部署的能力</p>

<h5 id="sdn主要技术特点">SDN主要技术特点</h5>

<ul>
  <li>SDN试图对高层的用户应用提供对网络互联结构与网络服务的标准可编程接口，从而实现大规模的网络流量管理的可编程、可控制，以支持未来出现的各种新的网络体系结构与新的服务业务</li>
  <li>支持SDN的三大核心机制是：基于流的数据分组转发机制、基于中心控制的路由机制、面向应用的网络编程机制</li>
  <li>SDN研究的发展与技术的成熟，将为物联网的大规模应用奠定重要的理论与应用基础</li>
</ul>

<h3 id="移动网络技术的研究与发展">移动网络技术的研究与发展</h3>

<h4 id="蜂窝系统的基本概念">蜂窝系统的基本概念</h4>

<ol>
  <li>
    <p>大区制通信的局限性</p>

    <ul>
      <li>
        <p>手机需要将信号传送到发射塔，就需要手机发射的信号功率比较大</p>
      </li>
      <li>
        <p>手机的体积不可能太小，价格就会很贵，对人体的电磁波辐射影响增大，不符合环保的要求</p>
      </li>
      <li>
        <p>由于城市里建筑物、地下车库，或者是汽车、火车的金属车顶都会阻挡无线信号，不能保证手机在一些特殊环境中通信的畅通</p>
      </li>
    </ul>
  </li>
  <li>
    <p>小区制的特点</p>
    <ol>
      <li>“小区制”是将整个区域划分成若干个小区，多个小区组成一个区群；由于区群结构酷似蜂窝，因此小区制移动通信系统页叫做“蜂窝移动通信系统</li>
      <li>每个小区架设一个（或几个）基站，小区内的手机与基站建立无线链路</li>
      <li>区群中各小区基站之间可以通过光缆、电缆或微波链路与移动交换中心连接</li>
      <li>移动交换中心通过光缆与市话交换网络连接，从而构成一个完整的蜂窝移动通信网络系统</li>
    </ol>
  </li>
</ol>

<p>无线信道与空中接口</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240701230119572.png" alt="image-20240701230119572" /></p>

<h4 id="5g与互联网">5G与互联网</h4>

<p>1995年，1G，模拟通信方式</p>

<p>1997年，2G，数字通信方式，电话+短信</p>

<p>2007年，3G，移动+宽带</p>

<p>2012年，4G，更快的传输速度、更短的延时与更好的兼容性</p>

<p>2020年，5G，能够满足物联网应用对带宽、可靠性与延时的需求</p>

<p>5G性能指标</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240701230251529.png" alt="image-20240701230251529" /></p>

<p>5G与物联网</p>

<p>5G网络作为面向2020年的技术，需要满足移动宽带、物联网，以及其他高可靠通信要</p>

<p>求，同时它也是一个智能化的网络；5G网络具有自检修、自配置与自管理的能力</p>

<p>5G的设计者将物联网纳入到整个技术体系之中，5G技术的发展与应用将大大推动物联网“万物互联”的发展</p>

<p>进入5G时代，受益最大的将是物联网</p>

<h4 id="m2md2d技术及其在物联网中的应用">M2M、D2D技术及其在物联网中的应用</h4>

<p>M2M的基本概念 Machine-to-Machine，M2M</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/19214bec54b38ee575719e73649c417a.png" alt="19214bec54b38ee575719e73649c417a" /></p>

<p>D2D的基本概念</p>

<p>Device to Device，D2D</p>

<p>D2D通信的优点：</p>

<ul>
  <li>终端近距离、直接通信方式可以实现高数据传输速率、低延时与低功耗</li>
  <li>利用终端分布范围广的特点，使用直接通信方式有利于提高频谱利用率</li>
  <li>直接通信方式适用于P2P通信和本地数据资源共享的需要</li>
  <li>利用终端直接通信方式，可以减轻基站负荷，拓展移动通信网覆盖范围</li>
</ul>

<h3 id="物联网接入技术">物联网接入技术</h3>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/e70d025471cebfa811d550afa238552f.png" alt="e70d025471cebfa811d550afa238552f" /></p>

<h4 id="有线接入技术">有线接入技术</h4>

<ol>
  <li>
    <p>局域网接入:<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/e568de08de4624edd4a1f422080564fc.png" alt="e568de08de4624edd4a1f422080564fc" /></p>
  </li>
  <li>电话交换网与ADSL接入技术：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/3cc167563de493d409a5b437c11b85ff.png" alt="3cc167563de493d409a5b437c11b85ff" /></li>
  <li>广播电视网与HFC接入技术<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/2281b1abdcd970d30b8f7ca419e51d0d.png" alt="2281b1abdcd970d30b8f7ca419e51d0d" /></li>
  <li>光纤接入技术：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/811c533618a8948370d0d6c882acaa56.png" alt="811c533618a8948370d0d6c882acaa56" /></li>
  <li>电力线接入技术：<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/e7981c4c1ccab4aa42b2b9705a4e2198.png" alt="e7981c4c1ccab4aa42b2b9705a4e2198" /></li>
</ol>

<h4 id="无线接入技术">无线接入技术</h4>

<ol>
  <li>工业、科学与医药专用ISM频段</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/19758b69295c7adc1733d5e9d38df109.png" alt="19758b69295c7adc1733d5e9d38df109" /></p>

<p>用户在使用ISM的902～928MHz（915MHz频段）、2.4～2.485GHz（2.4GHz频段）、5.725～5.825GHz（5.8GHz频段）等3个频段发射功率小于规定值（一般小于1W）时，可以不用申请</p>

<ol>
  <li>
    <p>WiFi接入</p>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d400d628804df1884d7f8cf8d7c4f2c4.png" alt="d400d628804df1884d7f8cf8d7c4f2c4" /></p>

    <p>Wi-Fi可以不使用基站，按照Ad hoc方式组网<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/f39af87cc6e6d595f672f7f860940b90.png" alt="f39af87cc6e6d595f672f7f860940b90" />IEEE 802.11n标准特点</p>

    <ul>
      <li>速率最高可以达到600Mbps</li>
      <li>接入点覆盖范围可以达到几平方公里</li>
      <li>可以实现与无线城域网802.16标准的兼容</li>
      <li>成为“无线城市”建设的首选技术</li>
    </ul>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/06f883b9ae73ab9b65950d547c1aae68.png" alt="06f883b9ae73ab9b65950d547c1aae68" /></p>
  </li>
  <li>
    <p>蓝牙、Zigbee与LR-WPAN技术</p>

    <blockquote>
      <p><strong>蓝牙技术的基本概念</strong></p>

      <p>蓝牙通信采用工业、科学与医学（ISM ）频段，工作频率在2.4GHz时</p>

      <p>数据传输速率最高为1Mbps通信距离一般在10cm～10m</p>

      <p>支持点对点、点对多点的通信</p>

      <p><strong>ZigBee技术的基本概念</strong></p>

      <p>ZigBee是一种面向自动控制的低速、低功耗、低价格的无线网络技术，ZigBee网络的结点数量、覆盖规模大</p>

      <p>在ISM的 2.4GHz频道，传输速率为250kbps；在915Mbps为40kbps；功耗低，节点在不更换电池的情况下可以工作长达几年；传输距离为10～75m</p>

      <p>适应于数据采集与控制的点多、数据传输量不大、覆盖面广、造价低的应用领域，如家庭网络、安全监控、医疗保健、工业控制、无线定位等</p>

      <p><strong>IEEE802.15.4标准</strong></p>

      <p>Low-Rate Wireless Personal Area Network，LR-WPAN</p>

      <p>在2000年正式成立了802.15工作组，致力于低速、长寿命电池、低复杂度的无线个人区域网络（LR-WPAN）标准的研究与制定工作</p>

      <p>研究的目标时解决近距离、低速率、低功耗、低成本、低复杂度的嵌入式无线传感器，以及自动控制设备、自动读表设备之间的数据传输问题</p>

      <p>主要考虑无线传感器节点的发射功率只是Wi-Fi的1%，靠电池运行1～5年的紧凑型、低功耗、廉价、嵌入式设备的通信技术</p>
    </blockquote>
  </li>
  <li>
    <p>基于IPv6的低速无线个人区域网6LoWPAN标准</p>

    <p>IPv6 over Low-Power Wireless Personal Area Networks，6LoWPAN</p>

    <p>由IPv6替代IPv4协议已是大势所趋，物联网技术的发展将进一步推动IPv6的部署与应用</p>

    <p>2004年11月，IETF成立了基于IPv6的低速无线个人区域网 6LoWPAN工作组，将IPv6协议集成到以IEEE 802.15.4为底层协议的无线个人区域网中</p>

    <p>基于LoWPAN的无线传感器网络研究成为热点课题，同时研究人员正在开展将LoWPAN在家庭网络、工业控制网络、城市应用、楼宇自动化等应用场景中，智能终端设备接入技术的研究</p>
  </li>
  <li>
    <p>超宽带通信UWB技术 Ultra-Wireband，UWB 高速率低功耗的超宽带通信技术</p>

    <p>UWB又称为脉冲无线通信技术，UWB采用将宽度在ns（纳秒）量级的脉冲信号直接通过天线发射出去，脉冲峰峰时间间隔在10～100 ps（皮秒），其中1ps等于1×10-12秒</p>

    <p>UWB具有抗干扰性能强、传输速率高、带宽极宽、消耗电能小、发送功率小等优点，UWB特别适用于室内场合的高速无线接入</p>

    <p>由于UWB技术对信道衰落不敏感、定位与物体搜索能力强等特点，可以用于VANET自动驾驶车辆的前方、后方、侧面障碍物的搜索、定位与报警</p>
  </li>
  <li>
    <p>WBAN与IEEE 802.15.6标准</p>

    <p>2007年11月成立了专门致力于为医疗保健服务的IEEE的802.15工作组（IEEETG6），研究适应于人体与人体周边（3～5m）无线通信的无线人体区域网络（WBAN）的通信技术及标准</p>

    <p>IEEE 802.15.6标准具有短距离、低功耗、低成本、实时性与安全性高的特点，除了可以应用于健康医疗之外，还可以应用于航空、个人娱乐、体育运动、环境智能、军事与社会公共安全等领域</p>

    <p>IEEE 802.15.6除了应用于医疗保健与疾病控制之外，可以用于消防、探险、军事等危险场合，也可用于日常生活中便携播放器与无线耳机之间等人体身边便携式装置之间的通信</p>
  </li>
  <li>
    <p>NFC技术</p>

    <p>Near Field Communication，NFC</p>

    <p>一种由非接触式RFID识别技术演变出的近距离（可用距离约为10厘米）的高频无线通信—近场通信NFC技术引起了产业界的高度重视</p>

    <p>NFC可以用于RFID、电子身份识别（如信用卡、门禁卡等）与数据传输；用户可以用智能手机去替代公交卡、银行卡、员工卡、门禁卡、会员卡等非接触式智能卡，还能在读取广告牌上附带的RFID标签信息</p>

    <p>NFC具有成本低廉、方便易用、功耗小的优点；内嵌NFC通信功能的移动设备通过射频信号自动识别、信道建立、交换数据，共享网络服务</p>
  </li>
  <li>
    <p>NB-loT</p>
  </li>
</ol>

<blockquote>
  <p>NB-IoT全称是“基于蜂窝网络的窄带物联网（Narrow Band Internet of Things）”</p>

  <p>NB-IoT研究的目标瞄准的物联网市场。NB-IoT标准是由华为公司主导制定，技术的主要特点是：广覆盖、大规模、低功耗、低成本</p>

  <p>“广覆盖、大容量”表现在NB-IoT构建于蜂窝移动通信网中，只消耗大约180KHz的带宽，单个小区支持10万个移动终端接入</p>

  <p>“低功耗、低成本”表现在NB-IoT终端模块的待机时间可</p>

  <p>长达10年，终端模块的成本很低</p>

  <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/6d826631f90d3d7c0f2d1c41e6bc700c.png" alt="6d826631f90d3d7c0f2d1c41e6bc700c" /></p>

  <p><strong>eMTC</strong></p>

  <p>与NB-IoT设计思路相近的技术是eMTC，在支持移动性、可定位、成本更低与更高的速率等方面形成自己的特色</p>

  <p>eMTC也是部署在蜂窝移动通信网中，支持数据传输速率为1Mbps，单个小区支持10万个移动终端接入，终端模块待机时间可长达10年</p>

  <p>eMTC在智能物流应用上具有防盗、防调换、实时温度传感与可定位的优势，可以用于智能可穿戴设备、智能充电桩、电梯安防、智能公交站牌、公共自行车管理等方面</p>
</blockquote>

<h4 id="软件无线电认知无线电在物联网中的应用">软件无线电、认知无线电在物联网中的应用</h4>

<p>软件无线电可以充分利用软件技术的灵活性、模块化、可定制特点，改变了无线通信系统单一的工作模式，提高了系统的灵活性与对外部环境的动态适应能力，也为认知无线电的发展奠定了基础</p>

<p>认知无线电以软件无线电技术为基础，是无线电、软件工程、人工智能等多学科融合形成的交叉学科；由于认知无线电具有灵活、智能、可重配置的特征，因此又被称为“机会频谱接入无线电”或“智能无线电”</p>

<p>在物联网研究中，必须关注软件无线电与认知无线电研究的进展，前瞻性地针对未来的物联网大规模中可能出现的问题，重视认知无线电应用的问题</p>

<h2 id="第六章-位置信息定位技术与服务">第六章 位置信息定位技术与服务</h2>

<h3 id="位置信息与位置服务的基本概念">位置信息与位置服务的基本概念</h3>

<blockquote>
  <p>位置信息是人们生活中每一个时刻都必须掌握的信息，是最基本的一类信息</p>

  <p>位置是物联网中各种信息的重要属性之一，缺少位置的感知信息是没有使用价值的</p>

  <p>位置信息是物联网提供位置服务的基础</p>
</blockquote>

<p>重要性</p>

<ul>
  <li>位置信息涵盖了空间、时间与对象三要素</li>
  <li>位置信息是各种物联网应用系统能够实现服务功能的基础</li>
  <li>通过定位技术获取位置信息是物联网应用系统研究的一个重要课题</li>
</ul>

<p>位置服务的基本概念</p>

<p>基于位置的服务 （Location Based Service LBS）</p>

<h3 id="定位系统">定位系统</h3>

<h4 id="航天航空遥感技术">航天航空遥感技术</h4>

<p>利用飞机、无人飞机、无人直升机与无人飞艇进行低空遥感</p>

<p>遥感观测平台的发展出现了两种重要的发展趋势，一是利用无人机（无人飞机、无人直升机与无人飞艇）开展灵活的低空、高精度、安全的遥感遥测；二是发展遥感小卫星星座技术</p>

<h4 id="全球定位系统">全球定位系统</h4>

<p>概念</p>

<ul>
  <li>全球卫星导航系统 “GNNS”将卫星定位和导航技术与现代通信技术相结合，具有全时空、全天候、高精度、连续实时地提供导航、定位和授时的特点</li>
  <li>目前世界4个卫星导航系统：美国全球定位系统（GPS）、俄罗斯 格洛纳斯（GLONASS） 、欧洲伽利略（Galileo）”卫星定位系统，以及中国的“北斗（BeiDou）”卫星导航系统</li>
  <li>由于美国的GPS系统发展得比较早，技术成熟、应用面广，因此人们习惯上用的“GPS”代替了更为准确的全球卫星导航系统术语“GNNS”</li>
</ul>

<h5 id="北斗卫星导航系统beidou-navigation-satellite-system">北斗卫星导航系统（BeiDou Navigation Satellite System)</h5>

<ul>
  <li>北斗卫星导航系统将由5颗 静止轨道卫星和30颗非静止轨道卫星组成，计划2020年左右覆盖全球北斗卫星导航系统的四大功能是：定位、导航、授时与通信</li>
  <li>定位精度能够达到10米，测速精度0.2米/秒时间同步精度可以达到10ns 用户终端具有双向短报文通信功能，用户一次可以传送40～60个汉字的短报文信息通信</li>
  <li>北斗系统将广泛应用于个人定位与导航、气象、道路交通、铁路运输、海运和水运、航空运输、应急救援、智能农业、智能物流、智能环保、智能电网等领域</li>
</ul>

<h5 id="gps系统">GPS系统</h5>

<p>GPS由三个独立的部分组成：空间星座部分、地面监控部分与用户设备</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/96493363c46fb300b59b763d3a333754.png" alt="96493363c46fb300b59b763d3a333754" /></p>

<p><strong>空间星座部分</strong></p>

<p>24颗卫星分布在6个轨道上，每一个轨道上不均匀地分布着4颗卫星，轨道高度为20200千米</p>

<p>卫星的功能是：</p>

<ul>
  <li>Ø接收从地面监控部分发射的导航信息，执行控制指令，通过推进器调整自身的运行姿态</li>
  <li>Ø进行必要的数据处理，向地面发送导航信息</li>
</ul>

<p><strong>地面监控部分</strong></p>

<p>由分布在全球的一个主控站、6个监控站与4个注入站组成</p>

<p>监控站的主要任务是对卫星进行连续观测和数据采集，并将检测数据传送到主控站</p>

<p>主控站是整个系统的核心，它担负5项任务：</p>

<ul>
  <li>Ø监视所有卫星的运行轨道</li>
  <li>Ø计算卫星运行轨道的各种修正参数</li>
  <li>Ø计算卫星时钟误差，维护GPS系统的时间基准</li>
  <li>Ø发送调整卫星轨道的命令，确保卫星按预定的轨道运行</li>
  <li>Ø监视卫星运行情况，当发现故障时启动备份卫星</li>
</ul>

<p>注入站将主控站的卫星导航报文与控制命令发送到各个卫星</p>

<p><strong>GPS接收机类型</strong></p>

<p>导航型接收机主要用于运动物体的导航，可以实时给出物体的位置和速度，根据应用的不同可以分为：车载型、航海型、航空型与星载型接收机</p>

<p>测地型接收机主要用于精密大地测量和精密工程测量，这类仪器定位精度高，设备复杂，价格较贵</p>

<p>授时型接收机主要利用GPS卫星提供的高精度时间标准进行授时，常用于天文台及无线电通信的时间同步</p>

<p><strong>原理：</strong></p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/a37babb3875b5b083b08458dab7c7f3b.png" alt="a37babb3875b5b083b08458dab7c7f3b" /></p>

<p>已知卫星1的坐标是（x1,y1,z1），那么距离R1值与A点坐标、卫星1 的坐标关系为：
\(R=\sqrt{(x_1-x)^2+(y_1-y)^2+(z_1-z)^2}\)
如果接收机同时能够接收到卫星2与卫星3的信号，确定A点与3颗卫星的距离分别为R2、R3，那么就可以推出与R2、R3对应的A点坐标与卫星2、卫星3坐标关系的方程</p>

<p>从3个方程中解出3个未知数，即A点的坐标（x,y,z），应该是可行的；计算出A点的坐标之后，结合电子地图，就可以确定A点在地图上的位置</p>

<p>如果再在下一秒测量出下一个新坐标的值，接收机就可以算出你的运动速度与方向 如果你输入一个目的地址的话，接收机就可以为你推荐导航的路线，或者为你的汽车导航</p>

<p>卫星系统的时钟与GPS接收机的时钟肯定是有误差的，通过第四颗卫星计算出接收机时钟与卫星系统时钟的误差，来修正计算出的卫星信号在空间传播的时间Δt值，以提高定位精度</p>

<p>位置与导航信息不是卫星计算好后发给我们的，而是用户设备自己算出来的用户设备跟踪可见的GPS卫星，对接收到的卫星无线信号进行处理，计算出位置信息与导航信息</p>

<h4 id="地理信息系统gis">地理信息系统GIS</h4>

<p>地理信息系统的基本概念</p>

<p>GIS是在地理学、遥测遥感技术、GPS、管理科学与计算机科学的基础上发展起来的一门交叉学科</p>

<p>GIS作为一种综合处理和分析地理空间数据的软件技术，它包括：地理空间数据库、空间信息检索软件、空间信息分析与处理软件、空间信息显示软件</p>

<p>GIS技术在发展过程中不断地融合了移动通信技术、3D可视化技术、虚拟现实技术、人工智能技术与网络技术</p>

<h4 id="物联网与高精度地图">物联网与高精度地图</h4>

<p>互联网地图经历了从简单到复杂，从提供静态地图到提供动态地图的发展过程，物联网自动驾驶的应用提出了新的高精度定位、高精度地图研发的需求</p>

<p>现有的互联网地图精度一般只能达到米级，而自动驾驶汽车需要达到厘米级（如10～20厘米），同时需要增加更多、更精确的信息，如详细的道路坡度、曲率、车道数量、车道宽度、车道速度限制，以及路边地标等数据，并且地图数据更新的速度必须是秒级的</p>

<p>雷达、摄像头与控制系统的工作重点放在突发情况的实时监控与处置上，但是在恶劣天气传感器无法提供准确的路况信息，要保证无人驾驶汽车全天候运行就必须借助于高精度定位与高精度地图</p>

<p>高精度地图能够提前对所处环境有了精准的预判，事先形成安全的行驶策略，为无人驾驶汽车的全天候运行提供了保障</p>

<h3 id="定位技术">定位技术</h3>

<h4 id="移动通信定位技术">移动通信定位技术</h4>

<h5 id="基本概念">基本概念</h5>

<ol>
  <li>（1）单基站定位方法</li>
  <li>（2）多基站定位方法</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d76001c1913073075224647b087d5639.png" alt="d76001c1913073075224647b087d5639" /></p>

<h5 id="a-gps技术">A-GPS技术</h5>

<p>Assisted GPS, A-GPS</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c2833facd8658e83677ce9848b0cff37.png" alt="c2833facd8658e83677ce9848b0cff37" /></p>

<h4 id="基于wi-fi的定位技术">基于Wi-Fi的定位技术</h4>

<p>Wi-Fi的“位置指纹”：</p>

<ul>
  <li>Wi-Fi的AP设备号的唯一性</li>
  <li>Wi-Fi的AP定时发送信标</li>
  <li>AP设备只覆盖有限的地理范围</li>
</ul>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/af1fd13213f56a5940de7118ac895189.png" alt="af1fd13213f56a5940de7118ac895189" /></p>

<h4 id="基于rfid的定位技术">基于RFID的定位技术</h4>

<ul>
  <li>凡是应用RFID技术的应用领域，在自动感知物品信息的同时，可以从中提取物品的位置信息</li>
  <li>可用于生产过程控制中质量跟踪、库存与固定资产管理，物流管理应用中采购、入库、库存管理、出库、配送运输的全过程，医院管理中药品、医疗器械、医用废弃物，以及患者、医护人员管理等</li>
  <li>可用于幼儿园幼儿管理、医院新生儿管理，博物馆与旅游景区对不同区域游客的解说服务，机场乘客导航与服务，监狱服刑人员管理等</li>
</ul>

<h4 id="wsn定位技术">WSN定位技术</h4>

<ul>
  <li>在无线传感器网络中，位置信息是事件发生位置报告、目标跟踪、路由控制、网络管理的前提</li>
  <li>事件发生的位置或获取信息的节点位置，是传感器节点监测信息中所包含的重要信息；没有位置信息的监测数据是毫无意义的，错误的位置信息往往会导致判断的错误</li>
  <li>WSN定位信息除用来报告事件发生的地点外，还可以用于目标跟踪，实时监视目标的行动路线，预测目标的前进轨迹</li>
</ul>

<h3 id="物联网中的位置信息">物联网中的位置信息</h3>

<p>基于位置的服务 Location Based Service，LBS</p>

<p>位置服务的基本概念<img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/b9b59128f081890ae15266c5b709c1fe.png" alt="b9b59128f081890ae15266c5b709c1fe" /></p>

<h4 id="位置服务系统的设计方法">位置服务系统的设计方法</h4>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/167ff0adaf4abf900ac034acb346818e.png" alt="167ff0adaf4abf900ac034acb346818e" /></p>

<p>基于位置服务应用的发展</p>

<ul>
  <li>随着智能手机、可穿戴计算设备与物联网移动终端设备应用的发展，位置服务迅速地流行开来</li>
  <li>位置服务已经成为信息服务业一种新的服务模式与经济增长点</li>
  <li>位置服务以及从商业服务逐渐扩大到智能工业、智能农业智能医疗、智能物流、智能交通等领域</li>
  <li>物联网应用高度依赖位置信息与位置服务，位置服务将成为物联网重要的研究内容与新的产业增长点</li>
</ul>

<h2 id="第七章物联网智能数据处理系统">第七章物联网智能数据处理系统</h2>

<h3 id="物联网数据处理技术的基本概念">物联网数据处理技术的基本概念</h3>

<p>物联网数据的特点</p>

<ol>
  <li>海量</li>
  <li>多态</li>
  <li>动态</li>
  <li>关联</li>
</ol>

<h4 id="物联网中数据信息与知识">物联网中数据、信息与知识</h4>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/39c34bdf7f2b71aa79bd6c9de20a3e71.png" alt="39c34bdf7f2b71aa79bd6c9de20a3e71" /></p>

<h4 id="物联网数据处理关键技术">物联网数据处理关键技术</h4>

<ol>
  <li>数据存储</li>
  <li>数据融合</li>
  <li>数据挖掘</li>
  <li>智能决策</li>
</ol>

<h3 id="物联网与云计算">物联网与云计算</h3>

<h4 id="云计算的分类">云计算的分类</h4>

<ul>
  <li>IaaS—基础设施即服务，只涉及到租用硬件，是一种最基础的服务</li>
  <li>PaaS—平台即服务，已经从硬件的基础上，租用一个特定的操作系统与应用程序，来自己进行应用软件的开发</li>
  <li>SaaS—软件即服务，在云平台提供的定制软件上，直接部署自己的应用系统</li>
</ul>

<h4 id="云计算的主要技术特征">云计算的主要技术特征</h4>

<ul>
  <li><strong>按需服务</strong>—根据用户是实际计算量与数据存储量，自动分配CPU的数量与存储空间的大小，避免服务质量下降与资源浪费</li>
  <li><strong>资源池化</strong>—利用虚拟化技术，根据需求定制用户使用的计算与存储资源，计算与存储资源管理对用户是透明的</li>
  <li><strong>服务可计费</strong>—“云”可以监控用户的计算、存储资源的使用量，并根据资源的使用“量”进行计费</li>
  <li><strong>泛在接入</strong>—用户的各种终端设备，如PC机、笔记本计算机、智能手机和移动终端设备，都可以作为云终端，随时随地访问“云”</li>
  <li><strong>高可靠性</strong>—“云”采用数据多副本备份冗余，计算节点可替换等方法，提高云计算系统的可靠性</li>
  <li><strong>快速部署</strong>—云计算不针对某一些特定的应用，用户可以方便地开发各种应用软件，组建自己的应用系统，快速部署业务</li>
</ul>

<h4 id="云计算模式">云计算模式</h4>

<p>云计算是一种<strong>计算模式</strong>，它是将计算与存储资源、软件与应用作为服务，通过网络提供给用户</p>

<p>用户可以像使用水、电一样按需购买和使用云计算资源</p>

<h3 id="物联网与大数据">物联网与大数据</h3>

<h4 id="数据挖掘的基本概念">数据挖掘的基本概念</h4>

<p>透过数据，应用一定的分析方法，从大量数据中提取出一些有价值的信息和知识，这个过程就是“数据挖掘（Data Mining）”</p>

<h4 id="大数据的特征">大数据的特征</h4>

<ul>
  <li>大体量（Volume）：数据量达到数百TB到数百PB，甚至是EB的规模</li>
  <li>多样性（Variety）：数据为各种格式与各种类型</li>
  <li>时效性（Velocity）：数据需要在一定的时间限度下得到及时处理</li>
  <li>准确性（Veracity）：处理结果要保证一定的准确性</li>
  <li>大价值（Value）：分析挖掘的结果可以带来重大的经济效益与社会效益</li>
</ul>

<h4 id="大数据要求的价值">大数据要求的价值</h4>

<p>2007年图灵奖获得者吉姆·格雷指出：科学研究将从实验科学、理论科学、计算科学，发展到数据科学；“数据密集型科学发现”将成为科学研究的第四范式；科学研究将从实验科学、理论科学、计算科学发展到目前兴起的数据科学</p>

<p>大数据对世界经济、自然科学、社会科学的发展将会产生重大和深远的影响；物联网的大数据应用是国家大数据战略的重要组成部分，结合物联网应用的大数据研究必将成为物联网研究的重要内容</p>

<h4 id="物联网大数据研究的特殊性">物联网大数据研究的特殊性</h4>

<ol>
  <li>
    <p>物联网大数据与一般大数据研究共性的一面</p>

    <ol>
      <li>
        <p>可视化分析—物联网大数据分析的可视化能够以非常直观的形式呈现给物联网用户，更容易帮助不同行业的物联网用户从中提取有价值的知识，帮助科学决策</p>
      </li>
      <li>
        <p>数据挖掘算法—物联网行业应用关系国计民生与生命安全，对数据挖掘结果的时效性、可靠性与可信性要求很高，必须由大数据专家与行业专家合作研究数据挖掘算法</p>
      </li>
      <li>
        <p>预测性分析能力—对于物联网应用预测性分析十分重要，需要组织行业专家、物联网专家与大数据专家相结合的研究队伍，研究适应不同行业物联网大数据的预测模型与算法</p>
      </li>
      <li>语义引擎—物联网需要一套新的理论与方法来实现对地理位置分布的各种数据资源进行规范和灵活地组织，方便用户通过关键词、标签关键词或其他输入语义的搜索，提高主动获取知识的能力</li>
      <li>数据质量与数据管理—不同传感器感知的原始数据的汇聚，多维数据融合、多用户协同感知与数据质量管理，使得处理之后的结果更能够高精度地反映真实面貌，是物联网大数据研究的重点</li>
    </ol>
  </li>
  <li>
    <p>物联网大数据研究个性的一面</p>

    <ol>
      <li>异构性与多样性—物联网的数据来自不同的行业、不同的应用、不同的感知手段，有人与人、人与物、物与物、机器与人、机器与物、机器与机器等各种数据，这些数据可以进一步分为：状态数据、位置数据、个性化数据、行为数据与反馈数据，数据具有明显的异构性与多样性</li>
      <li>实时性、突发性与颗粒性—物联网感知数据是系统控制命令与策略制定的基础，对物联网数据处理时间要求很高；同时，事件发生往往很突然和超出预判，事先无法考虑周全，物联网感知设备获得的数据很容易出现不全面和噪声干扰，物联网大数据的研究需要注意到数据实时性、突发性与颗粒性的特点</li>
      <li>非结构化与隐私性—物联网应用系统中存在着大量图像、视频、语音、超媒体等非结构化数据，增加了数据处理的难度。物联网应用系统的数据中隐含有大量企业重要的商业秘密与个人隐私信息，数据处理中的信息安全与隐私保护难度大</li>
    </ol>
  </li>
</ol>

<h2 id="第八章物联网网络安全">第八章物联网网络安全</h2>

<h3 id="网络空间安全与网络安全的基本概念">网络空间安全与网络安全的基本概念</h3>

<h4 id="提出背景">提出背景</h4>

<p>《下一场世界战争》作者预言：“在未来的战争中，计算机本身就是武器，前线无处不在，夺取作战空间控制权的不是炮弹和子弹，而是计算机网络里流动的比特和字节。”</p>

<p>由于<strong>互联网、移动互联网、物联网</strong>已经应用于现代社会的政治、经济、文化、教育、科研与社会生活的各个领域，那么网络安全必然会成为影响社会稳定、国家安全的重要因素之一</p>

<p><strong>“网络空间（Cyberspace）”</strong>被看作是与国家“领土、领海、领空、太空”等四大常规空间同等重要的“第五空间”</p>

<h4 id="我国国检网络空间安全战略涵盖的基本内容">我国《国检网络空间安全战略》涵盖的基本内容</h4>

<p>我国网络空间安全政策是建立在“没有网络安全就没有国家安全”的理念之上的</p>

<p>2016年12月27日，经中共中央网络安全和信息化领导小组批准，国家互联网信息办公室发布《国家网络空间安全战略》报告</p>

<p>2016年11月7日全国人民代表大会常务委员会通过了《中华人民共和国网络安全法》，并于2017年6月1日起施行</p>

<h4 id="网络空间安全理论体系">网络空间安全理论体系</h4>

<h5 id="网络空间安全涵盖的主要内容">网络空间安全涵盖的主要内容</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/9e290c00193c668bec2a22388720bf3b.png" alt="9e290c00193c668bec2a22388720bf3b" /></p>

<p>网络空间安全研究包括五个方面的内容：</p>

<p>应用安全、系统安全、网络安全、网络空间安全基础、密码学及其应用</p>

<h5 id="网络空间安全理论体系-1">网络空间安全理论体系</h5>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d9557befe797a88a2e1f2a9961c1c810.png" alt="d9557befe797a88a2e1f2a9961c1c810" /></p>

<p>网络空间安全理论包括三大体系：基础理论体系、技术理论体系与应用理论体系</p>

<h3 id="osi安全体系结构">OSI安全体系结构</h3>

<p>OSI安全体系结构的基本概念</p>

<ol>
  <li>安全攻击</li>
  <li>安全服务</li>
  <li>安全机制</li>
</ol>

<h4 id="安全攻击">安全攻击</h4>

<p>网络攻击的四种类型</p>

<ol>
  <li>窃听或监视数据传输</li>
  <li>截获数据</li>
  <li>篡改数据</li>
  <li>伪造数据</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d590c10d969ffab15ee4976bcecad0d1.png" alt="d590c10d969ffab15ee4976bcecad0d1" /></p>

<p>网络攻击的类型与特点</p>

<ol>
  <li>
    <p>被动攻击（passive attack）</p>

    <ul>
      <li>
        <p>Ø窃听或监视数据传输属于被动攻击</p>
      </li>
      <li>
        <p>Ø网络攻击者通过在线窃听的方法，非法获取网络上传输的数据，或通过在线监视网络用户身份、传输数据的频率与长度，破译加密数据，非法获取敏感或机密的信息</p>
      </li>
    </ul>
  </li>
  <li>
    <p>主动攻击（active attack）</p>

    <ul>
      <li>
        <p>Ø截获数据：网络攻击者假冒和顶替合法的接收用户，在线截获网络上传输的数据</p>
      </li>
      <li>
        <p>Ø篡改或重放数据：网络攻击者假冒接收者，从中截获网络上传输的数据之后，经过篡改再发送给合法的接收用户；或者是在截获到网络上传输的数据之后的某一个时刻，一次或多次重放该数据，造成网络数据传输混乱</p>
      </li>
      <li>
        <p>Ø伪造数据：网络攻击者假冒合法的发送用户，将伪造的数据发送给合法的接收用户</p>
      </li>
    </ul>
  </li>
</ol>

<h4 id="网络安全服务">网络安全服务</h4>

<ul>
  <li>认证（authentication）：提供对通信实体和数据来源认证与身份鉴别</li>
  <li>访问控制（access control）：通过对用户身份认证和用户权限的确认，防治未授权用户非法使用系统资源</li>
  <li>数据机密性（data confidentiality）：防止数据在传输过程中被泄漏或被窃听</li>
  <li>数据完整性（data integrity）：确保接收的数据与发送数据的一致性，防止数据被修改、插入、删除或重放</li>
  <li>防抵赖（non-reputation）：确保数据有特定的用户发出，证明由特定的一方接收，防止发送方在发送数据后否认，或接收方在收到数据后否认现象的发生</li>
</ul>

<h5 id="网络安全机制">网络安全机制</h5>

<ul>
  <li>加密（Encryption）— 确保数据安全性的基本方法，根据层次与加密对象的不同，采用不同的加密方法</li>
  <li>数字签名（Digital Signature）— 数字签名机制确保数据的真实性，利用数字签名技术对用户身份和消息进行认证</li>
  <li>访问控制（Access Control）— 访问控制机制按照事先确定的规则，保证用户对主机系统与应用程序访问的合法性</li>
  <li>数据完整性（Data Integrity）— 数据完整性机制确保数据单元或数据流不被复制、插入、更改、重新排序或重放</li>
  <li>认证（Authentication）— 认证机制用口令、密码、数字签名、生物特征（如指纹）等手段，实现对用户身份、消息、主机与进程的认证</li>
  <li>流量填充（Traffic Padding）— 流量填充机制通过在数据流填充冗余字段的方法，预防网络攻击者对网络上传输的流量进行分析</li>
  <li>路由控制（Routing Control）— 路由控制机制通过预先安排好路径，尽可能使用安全的子网与链路，保证数据传输安全</li>
  <li>公证（Notarization）— 公证机制通过第三方参与的数字签名机制，对通信实体进行实时或非实时的公证，预防伪造签名与抵赖</li>
</ul>

<h4 id="网络安全模型与网络安全访问模型">网络安全模型与网络安全访问模型</h4>

<ol>
  <li>网络安全模型</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/0f4b13f0cfdde6788e073ecb27bae095.png" alt="0f4b13f0cfdde6788e073ecb27bae095" /></p>

<ol>
  <li>
    <p>网络访问安全模型</p>

    <p>网络安全访问模型主要针对两类对象从网络访问的角度实施对网络的攻击：一类是网络攻击者，另一类是“恶意代码”类的软件</p>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/c96df961b7a665258048e582ee47913c.png" alt="c96df961b7a665258048e582ee47913c" /></p>
  </li>
</ol>

<h4 id="用户对网络安全的需求">用户对网络安全的需求</h4>

<ul>
  <li>可用性：在可能发生的突发事件（如停电、自然灾害、事故或攻击等）情况下，计算机网络仍然可以处于正常运转状态，用户可以使用各种网络服务</li>
  <li>机密性：保证网络中的数据不被非法截获或被非授权用户访问，保护敏感数据和涉及个人隐私信息的安全</li>
  <li>完整性：保证在网络中传输、存储的完整，数据没有被修改、插入或删除</li>
  <li>不可否认性：确认通信双方的身份真实性，防止对已发送或已接收的数据否认现象的出现</li>
  <li>可控性：能够控制与限定网络用户对主机系统、网络服务与网络信息资源的访问和使用，防止非授权用户读取、写入、删除数据</li>
</ul>

<h3 id="物联网网络安全研究的主要内容">物联网网络安全研究的主要内容</h3>

<h4 id="物联网中可能存在的网络攻击方式">物联网中可能存在的网络攻击方式</h4>

<p>从感知层、网络层、应用层看物联网面临的网络攻击类型</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/1ad89a1677d71cc40e9959ac73bb423e.png" alt="1ad89a1677d71cc40e9959ac73bb423e" /></p>

<p>典型的网络攻击</p>

<p>DDoS攻击</p>

<p>典型的DoS攻击是资源消耗型DoS攻击：</p>

<ul>
  <li>＞制造大量广播包或传输大童文件，占用网络链路与路由器带宽资源</li>
  <li>＞制造大量电子邮件、错误日志信息，垃圾邮件，占用主机中共享的磁盘资源</li>
  <li>》制造火量无用信息或进程通信交互信息，占用CPU和系统内存资源</li>
</ul>

<p>分布式拒绝服务（DDoS）攻击：在DoS攻击基础上产生的一类攻击形式</p>

<h4 id="物联网网络安全的新动向">物联网网络安全的新动向</h4>

<ol>
  <li>
    <p>计算机病毒已经成为攻击物联网的工具</p>

    <p>火焰（Flame）病毒是一种后门程序和木马病毒程序的结合体，同时又具有蠕虫病毒的特点</p>

    <p>火焰病毒被认为是迄今为止发现的最大规模和最为复杂的网络攻击病毒</p>

    <p>火焰病毒程序可能是“某个国家专门开发的网络战武器”，病毒将成为攻击物联网的重要工具</p>
  </li>
  <li>
    <p>物联网工业控制系统成为新的攻击重点</p>

    <p>2010年6月发现的震网病毒是第一个将目标锁定在工业控制网络的病毒</p>

    <p>物联网中的智能工业控制系统、智能交通中的无人驾驶车辆、智慧城市中的电梯控制系统、智能电网中的供电控制系统都会成为下一个攻击的重点</p>

    <p>针对物联网的攻击可能造成危及人身安全与社会稳定的重大危害</p>
  </li>
  <li>
    <p>网络信息搜索功能将演变成攻击物联网的工具</p>

    <p>Shodan搜索引擎主页上写道：“暴露的联网设备：网络摄像机、路由器、发电厂、智能手机、风力发电厂、电冰箱、网络电话”</p>

    <p>Ø目前已经搜集到的在线网络设备数量超过1000万个，搜索到的信息包括这些设备的准确地理位置、运行的软件等</p>

    <p>Ø搜索到接入物联网的智能设备与智能系统已经处在危险之中</p>
  </li>
  <li>
    <p>僵尸物联网正在成为网络攻击的新方式</p>

    <p>2016年10月21日，网络攻击者用木马病毒“Mirai”感染超过10万个物联网终端设备—网络摄像头与硬盘录像（DVR）设备，通过这些看似与网络安全无关的硬件设备，向提供动态DNS服务的DynDNS公司发动了DDoS攻击</p>

    <p>Ø造成美国超过半个互联网瘫痪了6个小时，其中Twitter、Airbnb、Reddit等著名的网站，个别网站瘫痪长达24小时</p>

    <p>Ø这种攻击方式被称为“僵尸物联网（Botnet of Things）”攻击，是第一次出现通过物联网硬件向互联网展开大规模DDoS攻击</p>

    <p>Ø2017年美国《麻省理工科技评论》将“僵尸物联网”列为十大突破性技术之一</p>
  </li>
</ol>

<h4 id="rfid安全与隐私保护研究">RFID安全与隐私保护研究</h4>

<ul>
  <li>RFID标签的安全缺陷：RFID标签本身的成本所限，RFID很难具备足以自身保证安全的能力</li>
  <li>通信信道的安全性问题：RFID使用的是无线通信信道，这就给非法用户的攻击带来了方便</li>
  <li>RFID读写器的安全问题：攻击者可以通过仿造读写器，来读写RFID标签数据，或者修改RFID标签中的数据</li>
</ul>

<h5 id="对rfid系统的攻击方法">对RFID系统的攻击方法</h5>

<ol>
  <li>窃听的RFID读写器</li>
  <li>欺骗、重放与克隆攻击</li>
  <li>破解与篡改攻击</li>
  <li>干扰与拒绝服务攻击</li>
  <li>灭活标签攻击</li>
  <li>病毒攻击</li>
  <li>中间人攻击</li>
</ol>

<p><strong>基于RFID的位置服务与隐私保护</strong></p>

<ul>
  <li>隐私的内涵很广泛，通常包括个人信息、身体、财产，但是不同的民族、不同的宗教信仰、不同文化的人对隐私都有不同的理解，但是尊重个人隐私已经成为社会的共识与共同的需要</li>
  <li>除了RFID之外，各种传感器、摄像探头、手机定位功能的不正当使用，都有可能造成个人信息的泄漏、篡改和滥用</li>
</ul>

<p>保护个人隐私可以从以下4个方面着手：</p>

<ul>
  <li>Ø法律法规约束：过法律法规来规范物联网中对包括位置信息在内的涉及个人隐私信息的使用</li>
  <li>Ø隐私方针：允许用户本着自愿的原则，根据个人的需要，与移动通信运营商、物联网服务提供商协商涉及个人信息的使用</li>
  <li>Ø身份匿名：将位置信息中的个人真实身份有一个匿名的编码代替，以避免攻击者识别和直接使用个人信息</li>
  <li>Ø数据混淆：采用必要的算法，对涉及个人的资料与位置信息（时间、地点、人物）进行置换和混淆，避免被攻击者直接窃取和使用</li>
</ul>

<h2 id="第九章物联网应用">第九章物联网应用</h2>

<h3 id="智能工业">智能工业</h3>

<h4 id="工业40基本概念">工业4.0基本概念</h4>

<p>制造业是国民经济的主体，是立国之本、强国之基，物联网应用的核心是智能制造</p>

<p>工业1.0是以蒸汽机为代表的机械化时代，</p>

<p>工业2.0是以生产线为代表的流水线时代，</p>

<p>工业3.0是以软硬件结合的信息化时代</p>

<p>工业4.0改变了传统的工业价值链，标志着工业已经从土地、人力资源等要素驱动，转换为科技型创新驱动</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/b8ad73b4ab8837fc0bb9eef67480a61a.png" alt="b8ad73b4ab8837fc0bb9eef67480a61a" /></p>

<h4 id="工业40涵盖的基本内容">工业4.0涵盖的基本内容</h4>

<p>特点：互联、数据、集成、创新、转型</p>

<p>核心：智能工厂、智能制造与智能物流</p>

<p>智能工厂三大特征：高度互联、实时系统、柔性化敏捷化、智能化</p>

<p>智能制造：产品智能化、装备智能化、生产范式智能化、管理与服务智能化</p>

<ul>
  <li><strong>产品智能化</strong>—将传感器、处理器、存储器、网络与通信模块与智能控制软件，融入到产品之中，使产品具有感知、计算、通信、控制与自治的能力，实现产品的可溯源、可识别、可定位</li>
  <li><strong>装备智能化</strong>—通过先进制造、信息处理、人工智能、工业机器人等技术的集成与融合，形成具有感知、分析、推理、决策、执行、自主学习与维护能力，以及自组织、自适应、网络化、协同工作的智能生产系统与装备</li>
  <li><strong>生产方式智能化</strong>—个性化定制、服务型制造、云制造等新业态、新模式，本质是重组客户、供应商、销售商以及企业内部组织关系，重构生产体系中的信息流、产品流、资金流的运作模式，重建新的产业价值链、生态系统与竞争格局</li>
  <li><strong>管理智能化</strong>—分为横向集成、纵向集成和端到端集成。横向是从研发、生产、产品、销售、渠道到用户管理的生态链的集成；纵向从智能设备、智能生产线、智能车间、智能工厂到生产环节的集成；端到端集成是从生产者到消费者，从产品设计、制造、物流配送、售后服务的管理与服务</li>
</ul>

<p>三步走战略</p>

<ol>
  <li>第一步：力争用十年时间，迈入制造强国行列。到2020年，基本实现工业化，制造业大国地位进一步巩固，制造业信息化水平大幅提升。掌握一批重点领域关键核心技术，优势领域竞争力进一步增强，产品质量有较大提高。制造业数字化、网络化、智能化取得明显进展</li>
  <li>第二步：到2035年，我国制造业整体达到世界制造强国阵营中等水平。创新能力大幅提升，重点领域发展取得重大突破，整体竞争力明显增强，优势行业形成全球创新引领能力，全面实现工业化</li>
  <li>第三步：新中国成立一百年时，制造业大国地位更加巩固，综合实力进入世界制造强国前列。制造业主要领域具有创新引领能力和明显竞争优势，建成全球领先的技术体系和产业体系</li>
</ol>

<h3 id="智能农业">智能农业</h3>

<p>早期的精细农业理念定位于利用GPS、GIS、卫星遥感技术，以及传感技术、无线通信和网络技术、计算机辅助决策支持技术，从宏观到微观的实时监测、分析、智能诊断与决策，制定田间实施计划，通过精细管理，实现科学、合理的投入，获得最佳的经济和环境效益</p>

<p>将物联网技术用于大田种植、设施园艺、畜禽养殖、水产养殖、农产品物流、农副产品食品安全质量监控与溯源等领域，实现对农业生产过程中的土壤、环境、水资源的实时监测，对动植物生长过程的精细管理，对农副产品生产的全过程监控与可追溯管理，对大型农业机械作业服务的优化调度</p>

<p>物联网在农业领域的应用是未来农业经济社会发展的重要方向，是推进社会信息化与农业现代化融合的重要切入点，也为培育农业新技术与服务产业的发展提供了巨大的商机</p>

<h4 id="物联网在智能农业应用的意义">物联网在智能农业应用的意义</h4>

<p>由于物联网技术可以加快转变农业发展方式，推动农业科技进步与创新，健全农业产业体系，提高土地产出率、资源利用率，有利于改善生态环境，增强我国农业抗风险与可持续发展能力，引领现代农业产业结构的升级改造与生产方式的转型</p>

<p>物联网技术能够覆盖农业生产的农作物生产、畜牧业生产、水产等各个领域，覆盖农作物生长，以及猪、牛、羊等牲畜生长到农副产品加工、销售的全过程，物联网在智能农业中的应用大有作为</p>

<p>物联网在农业领域的应用关乎我国粮食安全与食品安全，关乎民众的日常生活，因此必然是我国政府高度重视和优先发展的领域</p>

<h3 id="智能交通">智能交通</h3>

<h4 id="物联网智能交通与传统智能交通的区别">物联网智能交通与传统智能交通的区别</h4>

<ul>
  <li>城市交通涉及到“人”与“物”。 “人”包括：行人、驾驶员、乘客与交警。“物”包括：道路、机动车、非机动车与道路交通基础设施。“人”、“车”、“路”构成了交通的大“环境”</li>
  <li>面对“人、车、路、基础设施”的四个因素复杂交错的局面，传统的智能交通一般只能抓住其中一个主要问题，采取“专项治理”的思路去解决</li>
  <li>物联网智能交通的研究思路是：面向城市交通的大系统，利用物联网的感知、传输与智能技术，实现人与人、人与车、车与路的信息互联互通，实现“人、车、路、基础设施与计算机、网络”的深度融合</li>
</ul>

<h4 id="车联网的特点">车联网的特点</h4>

<p>车联网（Internet of Vehicle ，IOV）或无线车载网（VANET）</p>

<p>车联网中的车辆是无线自组网中的独立节点，它们可以实时感知车辆自身的信息，并能通过无线自组网与城市智能交通网络，实现车与车、车与人、车与城市基础设施之间的信息互联互通</p>

<p>车联网中的车辆能够根据获取的信息，智能地判断路况，提高车辆运行的安全性；同时，车联网中的车辆也可以具有智能机器人的特征，实现自动驾驶</p>

<p>车联网研究的最终目标是建立一个不依赖于视觉、天气状态与人工操作的交通系统，解决城市交通拥塞问题，为汽车驾驶员、乘客与行人提供更加安全、便捷、舒适、环保的社会环境</p>

<blockquote>
  <p>未来的车联网是将行驶在公路上的各种车辆，通过无线车载网与互联网，与各种智能交通设施互联起来，实现车与人、车与车、车与路的互联，将汽车与交通参与方、道路基础设施、社会环境融为一体，建立“泛在、可视、可信、可控”的智能交通体系</p>

  <p>车联网是物联网智能交通研究的重要组成部分</p>
</blockquote>

<p>车联网研究的主要内容</p>

<ol>
  <li>车辆主动安全技术</li>
  <li>驾驶员状态感知与预警</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/405183ad7ac311398542833a9cf56f3f.png" alt="405183ad7ac311398542833a9cf56f3f" /></p>

<p>无人驾驶汽车研究的进展</p>

<p>无人驾驶汽车真正实现将驾驶员、行人、汽车、道路、交通设施与网络融为一体，体现出物联网“人-机-物”融合的本质特征，是对物联网内涵最好的诠释无人驾驶汽车已经成为物联网产业竞争的一个新的制高点</p>

<p>物联网智能交通研究的重点是将行驶在公路上的各种车辆，通过无线车载网与互联网，与各种智能交通设施互联起来，实现“车与人”、“车与车”、“车与路”、“车与网”的互联，使汽车与人、道路基础设施、社会环境融为一体</p>

<p>车联网充分利用物联网中传感网、RFID、环境感知、定位技术、无线自组网与智能控制技术，彻底颠覆了传统汽车与交通的概念，重新定义了车辆、驾驶员与行人的运行模式，也为未来的智能交通开辟了新的研究方向和内容</p>

<p>无人驾驶汽车的出现引起世界各国研究机构与产业界的高度重视，成为物联网智能交通研究与应用的重点问题。国内外互联网公司与传统汽车生产商的合作，用互联网、物联网、云计算、大数据、机器学习与深度学习、虚拟现实与增强现实、智能人机交互与智能控制、高精度地图等先进技术改造传统的汽车制造业，将彻底颠覆我们心目中对汽车、汽车制造业形象与社会交通体系的格局，最终要为我们建立起一个全新的“安全、可信、可控、可视”的社会智能交通体系</p>

<h3 id="智能电网">智能电网</h3>

<p>智能电网的基本概念</p>

<p>物联网在智能电网中的作用：</p>

<ul>
  <li>Ø深入的环境感知</li>
  <li>Ø全面的信息交互</li>
  <li>Ø智慧地信息处理</li>
</ul>

<p>智能电网本质上是物联网技术与传统电网“融合”的产物，它能够极大地提高电网信息感知、信息互联与智能控制的能力。物联网技术能够广泛应用于智能电网从发电、输电、变电、配电到用电的各个环节，可以全方位地提高智能电网各个环节的信息感知深度与广度，支持电网的信息流、业务流与电力流的可靠传输，以实现电力系统的智能化管理</p>

<h4 id="应用示例">应用示例</h4>

<p>输变电线路检测与监控</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240702145301958.png" alt="image-20240702145301958" /></p>

<p>变电站状态监控</p>

<p>配用电管理</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/8cb4ec2e90ac700f41c3448809dd3210.png" alt="8cb4ec2e90ac700f41c3448809dd3210" /></p>

<p>智能电网与物联网</p>

<p>智能电网的建设涉及到实现电力传输的电网与信息传输的通信网络的基础设施建设，同时要使用数以亿计的各种类型的传感器，实时感知、采集、传输、存储、处理与控制，从电能生产到最终用户用电设备的环境、设备运行状态、与安全的海量数据，物联网与云计算、大数据技术能够为智能电网的建设、运行与管理提供重要的技术支持</p>

<p>智能电网对社会发展的作用越大，重要性越高，受关注的程度也就越高，智能电网面临的网络安全形势越严峻。在发展智能电网技术的同时，必须高度重视智能电网信息安全技术的研究</p>

<h3 id="智能环保">智能环保</h3>

<h4 id="智能环保基本概念">智能环保基本概念</h4>

<p>基于物联网技术的环境监测网络可以融合无线传感器网络的多种传感器的信息采集能力，利用网络的宽带通信能力，集成高性能计算、云计算、数据挖掘与大数据技术，构成现代化的环境信息采集与处理平台，全面、客观、准确地揭示环境信息的内涵，对环境质量及其变化做出正确的评价、判断和处理，为环境保护决策提供依据，已经成为世界各国环境科学与信息科学交叉研究的热点</p>

<p>智能环保应用示例</p>

<ol>
  <li>大鸭岛海燕生态环境监测系统</li>
</ol>

<ul>
  <li>Ø大鸭岛是位于美国缅因州Mount Desert以北15公里的动植物保护区</li>
  <li>Ø美国加州大学伯克利分校的研究人员希望能够在大鸭岛监测海燕的生存环境，研究海鸟活动与海岛微环境</li>
  <li>Ø采用无线传感器网络技术，构成低成本、易部署、无人值守、连续监测的系统</li>
  <li>Ø2002年的第一期的原型系统有30个无线传感器节点，2003年的第二期的大鸭岛系统有150个无线传感器节点</li>
  <li>Ø传感器类型包括光、湿度、气压计、红外、摄像头在内的近10种，每隔15分钟通过卫星通信信道传送一次传感器的状态与位置数据</li>
</ul>

<p>大鸭岛海燕生态环境监测系统成为在局部范围内利用物联网技术，开展全球合作研究濒稀动物保护的成果案例</p>

<ol>
  <li>太湖环境监控系统</li>
</ol>

<p>太湖环境监控系统是我国科学家开展的物联网用于环境监测应用示范工程项目</p>

<p>Ø2009年11月，无锡（滨湖）国家传感信息中心和中国科学院电子学研究所合作共建了“太湖流域水环境监测”传感网信息技术应用示范工程</p>

<p>Ø传感器和浮标将被布放在环太湖地区，建立定时、在线、自动、快速的水环境监测无线传感网络，形成湖水质量监测与蓝藻暴发预警、入湖河道水质监测，以及污染源监测的传感网络系统</p>

<ol>
  <li>森林生态物联网研究项目—绿野千传</li>
</ol>

<p>2009年8月，项目组在浙江省天目山脉部署了一个超过200个无线传感器节点的实用系统</p>

<p>Ø利用无线传感器网络收集大量数据，通过数据挖掘的方法，帮助林业科研人员开展精确的环境变化对植物生长影响的研究</p>

<p>Ø通过无线传感器网络实现对森林温度、湿度、光照和二氧化碳浓度等多种生态环境数据的全天候监测，为森林生态环境监测与研究、火灾风险评估、野外救援应用提供服务</p>

<ol>
  <li>高海拔山区气候、地质结构监测PermaSense项目</li>
</ol>

<p>在阿尔卑斯山脉的岩床上部署了一个用于监测气候、地质结构与地表环境的无线传感器网络</p>

<p>Ø用于实时、连续、大范围采集环境数据</p>

<p>Ø根据这些数据，科学家结合地质结构模型，研究温度对山体地质结构的影响，预报雪崩、山体 滑坡等地质灾害</p>

<ol>
  <li>全球气候变化监测Planetary Skin项目</li>
</ol>

<p>Planetary Skin是由Cisco公司与美国国家航空航天局联合的一个旨在应对全球气候变化的合作研究项目，目的是联合世界各国的科研和技术力量，整合所有可以连接的环境信息监测系统，利用包括空间的卫星遥感系统、无人飞行器监测设备、陆地的无线传感器网络监测平台，RFID物流监控网络、海上监测平台，以及个人手持智能终端设备，建立一个全球气候监测物联网系统</p>

<h4 id="智能环保与物联网">智能环保与物联网</h4>

<p>智能环保是物联网技术应用最为广泛、影响最为深远的领域之一</p>

<p>如何发挥物联网的技术优势，利用传感器、传感网技术手段，能够开展大范围、多参数、实时与持续的环境参数采集和传输，设计和部署大规模、长期稳定运行的环境监测系统，是当前研究的热点问题</p>

<p>如何云计算平台汇聚、存储海量的环境监测数据，利用合理的模型与大数据分析手段，对环境数据进行及时、正确的分析，获取准确、有益的“知识”，是智能环保研究的核心问题</p>

<h3 id="智能医疗">智能医疗</h3>

<p>智能医疗是物联网技术与医院管理、医疗与保健“融合”的产物，它覆盖医疗信息感知、医疗监护服务、医院管理、药品管理、医疗用品管理，以及远程医疗等领域，实行医疗信息感知、医疗信息互联与智能医疗控制的功能</p>

<ol>
  <li>智能手术橱柜和智能纱布</li>
  <li>RFID技术医疗管理中的应用</li>
  <li>手术机器人</li>
  <li>基于无线人体区域网的智能远程医疗系统</li>
</ol>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/56a8565a62c9958b8e5e6f51739f96bb.png" alt="56a8565a62c9958b8e5e6f51739f96bb" /></p>

<h3 id="智能安防">智能安防</h3>

<ul>
  <li>
    <p>物联网技术在智能安防中的应用小到我们身边家庭、小区的安防系统，大到一个国家或地区的安防系统</p>
  </li>
  <li>
    <p>基于物联网的智能安防系统具有更大范围、更全面、更实时、更智慧的感知、传输与处理能力，目前已成为智能安防研发的重点</p>
  </li>
</ul>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/3664fa0bb69ff0d450a9ee9c5c67d4d6.png" alt="3664fa0bb69ff0d450a9ee9c5c67d4d6" /></p>

<h4 id="智能安防应用示例">智能安防应用示例</h4>

<ol>
  <li>
    <p>居民小区的智能安防系统</p>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/a396d13cbb0dd76131eaf2db6b3ac5d2.png" alt="a396d13cbb0dd76131eaf2db6b3ac5d2" /></p>
  </li>
  <li>
    <p>城市公共腿法时间应急处理体系</p>

    <p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/d8b9027303369b871b0225ecbe56c770.png" alt="d8b9027303369b871b0225ecbe56c770" /></p>
  </li>
  <li>
    <p>国家级公共安全防护体系</p>
  </li>
</ol>

<p>组建SensorNet系统的目的是应对突发事件与恐怖袭击，针对全国性的化学、生物、核辐射、爆炸的危险，基于化学、物理、生物、辐射传感器与无线传感器网络技术，有线、无线与卫星通信网络技术，GPS、GIS与遥感卫星与位置服务技术，数据库、数据挖掘与建模技术，以及大规模并行计算技术，建立具有全面、系统、实时地检测、识别与评估能力的公共安全防护体系</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/bd5bcd59f880fbe5d72b83ef344bf2d2.png" alt="bd5bcd59f880fbe5d72b83ef344bf2d2" /></p>

<h4 id="智能安防与物联网">智能安防与物联网</h4>

<p>智能安防关乎个人安全与社会安全，应用范围小到我们身边生活的社区与城市，大到一个重要区域的安全保卫，以及国家范围的应急处置系统，因此智能安防的产业发展前景广阔，市场规模巨大</p>

<p>随着智能对安防要求的提高，大数据量、实时性的视频图像感知信息成为重点。安防数据包含结构化、半结构化和非结构化的数据信息。其中结构化数据主要包括报警记录、系统日志、运维数据；半结构化数据包括人脸建模数据、指纹记录等；非结构化数据主要包括监控、报警的视频录像和人脸图片记录，如何对非结构化的数据进行分析、提取、挖掘、搜索与处理，将对智能安防系统提出更高的要求</p>

<h4 id="智能家居">智能家居</h4>

<h4 id="基本概念-1">基本概念</h4>

<p>智能家居是以住宅为平台，综合应用计算机网络、无线通信、自动控制与音视频技术，集服务、管理为一体，将家庭供电与照明系统、音视频设备、网络家电、窗帘控制、空调控制、安防系统，以及电表、水表、煤气表自动抄送设施连接起来，通过触摸屏、无线遥控、电话、语音识别等方式实现远程操作或自动控制，提供家电控制、照明控制、窗帘控制、室内外遥控、防盗报警、环境监测、暖通控制等多种功能，实现与小区物业与社会管理联动，达到居住环境舒适、安全、环保、高效与方便的目的</p>

<h4 id="物联网与智能家居的关系">物联网与智能家居的关系</h4>

<p>智能家居研究的主要内容：</p>

<ul>
  <li>Ø智能家电</li>
  <li>Ø家庭节能</li>
  <li>Ø家庭照明</li>
  <li>Ø家庭安防</li>
</ul>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/cd691c276918afe18a6a7c24f1384516.png" alt="cd691c276918afe18a6a7c24f1384516" /></p>

<p>智能家居的效益</p>

<ul>
  <li>高效节能</li>
  <li>使用方便，操控安全</li>
  <li>提高家庭安全性</li>
  <li>提升居家舒适度</li>
</ul>

<h4 id="智能家居应用示例">智能家居应用示例</h4>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/af679e0cfb4616bd54c696d4f48acd9c.png" alt="af679e0cfb4616bd54c696d4f48acd9c" /></p>

<h4 id="智能家居系统八个子系统">智能家居系统八个子系统</h4>

<ul>
  <li>智能家居中央控制管理系统</li>
  <li>家庭安防监控系统</li>
  <li>智能家电控制系统</li>
  <li>家庭影院与多媒体系统</li>
  <li>家庭办公与学习系统</li>
  <li>家庭环境监控系统</li>
  <li>自动远程抄表系统</li>
  <li>家庭网关与家庭网络系统</li>
</ul>

<h3 id="智能物流">智能物流</h3>

<h4 id="智能物流的基本概念">智能物流的基本概念</h4>

<p>随着社会的发展，物品的生产、流通、销售逐步专业化，连接产品生产者与消费者之间的运输、装卸、存储就逐步发展成专业化的物流行业</p>

<p>物联网通过信息流来指挥物流的快速流动，从而达到加快资金流的周转，企业从中获取更大的经济利益。智能物流利用RFID与传感器技术，实现对物品从采购、入库、制造、调拨、配送、运输等环节全过程的信息的采集、传输与处理</p>

<p>要达到这个目标，就需要在智能物流的运行平台之上，实行供应物流、生产物流与销售物流各个环节的协调工作；超级计算机利用数据挖掘与大数据算法，对社会需求、销售、库存、制造的海量数据进行分析，将取得的“知识”去指挥物流快速流动，从而加快资金流的周转，使得企业从中获取更大的经济效益</p>

<h4 id="智能物流与物联网的关系">智能物流与物联网的关系</h4>

<p>物联网技术覆盖智能物流运行的全过程</p>

<p>智能物流中“虚拟仓库”的概念需要由物联网技术来支持</p>

<p>智能物流运行过程的实时监控和实时决策必须有物联网来支持</p>

<h4 id="大型智能物流系统网络系统设计方法">大型智能物流系统网络系统设计方法</h4>

<p>Ø随着技术的发展，“网购平台与实体店结合、线上与线下结合”，可能还会应用到更为先进的技术，但是有一点不会改变，那就是：网购平台与实体店的运行必须建立在一个强大的智能物流系统之上</p>

<p>Ø我们必须要研究大型智能物流系统网络系统设计方法</p>

<p><img src="/assets/%E7%89%A9%E8%81%94%E7%BD%91.assets/image-20240702153531378.png" alt="image-20240702153531378" /></p>

<h5 id="网络总体结构设计原则">网络总体结构设计原则</h5>

<p>大型连锁零售企业从管理的角度可以分为：总公司、分公司与仓库、配送中心，以及基层的销售商店等三个层次</p>

<p>总公司管理了整体的资金运作，监督计划、采购、配送、销售策略的制定与运行；按照区域成立多个分公司；分公司管理设置在一个地区设置的仓库、配送中心与销售商店</p>

<p>面对这样一种运行模式的大型连锁零售企业，支持它的智能物流网络体系结构也需要分为三层：核心层、汇聚层与接入层</p>

<h5 id="销售商店或超市网络的设计">销售商店或超市网络的设计</h5>

<p>销售商店或超市网络一般选用速率高速以太网交换机作为主干交换机；主干交换机连接各部门的第二层交换机，以及商店、超市的服务器与运行管理软件的计算机</p>

<p>第二层交换机的选型主要取决于连接的节点类型、数量、传输的数据量，以及对传输实时性的要求；设计者要看连接的节点是智能收款机，还是智能柜橱、智能查询终端、智能试衣镜或导购机器人来决定</p>

<p>销售商店或超市网络需要支持导购机器人、移动移动终端设备，以及安装有RFID、可以接入销售商店或超市网络的智能手机，销售商店或超市无线局域网Wi-Fi要能够覆盖销售商店或超市的售货区、库房与管理区</p>

<h5 id="分公司仓库与配送中心网络系统的设计">分公司、仓库与配送中心网络系统的设计</h5>

<p>分公司将用于分公司管理的网络、仓库网络、配送中心网络与下属的销售商店、超市的网络，构成一个分公司子网，从整个网络系统的结构中属于汇聚层</p>

<p>分公司管理网络汇聚所属销售商店或超市的实时销售数据，向总公司管理层汇报；同时连接仓库与配送中心网络，实时采集、分析当前库存商品的数据，控制仓库与商品配送</p>

<p>配送中心网络根据公司指令，完成商品配送、补给、运输；对运输车辆位置、运送商品的类型、数量进行管理和控制，以缩短商品配送的时间，减少运输车辆空载运行的现象，减少浪费，节约能源，提高效益</p>

<h5 id="总公司主干网的设计">总公司主干网的设计</h5>

<p>总公司主干网是由总公司管理网络、数据中心网络，连接分公司子网的主干路由器，以及通过防火墙连接互联网的公司外网组成</p>

<p>总公司主干网设置一个数据中心，用来存储与企业经营相关的数据；根据企业计算与存储的需要，数据中心可以是一台或几台企业级服务器、服务器集群，也可以是建设一个私有云平台或租用公有云</p>

<p>总公司的核心交换层网络、汇聚层网络、接入层网络是处理企业事务的专用网络，除公司外网之外，不允许公司内部网络的任何路由器、主机，以有线或无线等任何方式接入到互联网</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="物联网" /><category term="课程笔记" /><summary type="html"><![CDATA[物联网 分成三层 每一层分成几个模块 功能和流程是不一样的 功能是要达到的效果 🌻对着框架讲流程 再讲每部分功能 每个模块怎么实现 再展示是什么样子的 🌻设计思想—&gt; 架构—&gt;流程—&gt;每一块的功能 至少讲清楚每一层用了什么 eg RFID WSN eg 有线 无线]]></summary></entry><entry><title type="html">物联网期末复习接入技术选择</title><link href="http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.html" rel="alternate" type="text/html" title="物联网期末复习接入技术选择" /><published>2024-06-26T00:00:00+08:00</published><updated>2024-06-26T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9</id><content type="html" xml:base="http://localhost:4000/2024/06/26/%E7%89%A9%E8%81%94%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF%E9%80%89%E6%8B%A9.html"><![CDATA[<h2 id="无线">无线</h2>

<p>选择适合的物联网接入技术需要综合考虑应用场景、带宽需求、覆盖范围、能耗、成本、安装难度和可靠性等因素。以下是WiFi接入、蓝牙、Zigbee与LR-WPAN、基于IPv6的低速无线个人区域网6LoWPAN标准、超宽带通信UWB、无线体域网WBAN与IEEE 802.15.6标准、NB-IoT和eMTC的详细介绍和选择指南。
<!---more--></p>
<h3 id="1-wifi接入">1. WiFi接入</h3>

<h4 id="概述">概述</h4>
<p>WiFi（Wireless Fidelity）是一种广泛使用的无线网络技术，适用于高带宽需求的场景。</p>

<h4 id="优点">优点</h4>
<ul>
  <li><strong>高带宽</strong>：适合视频流、数据密集型应用。</li>
  <li><strong>广泛使用</strong>：兼容性好，支持设备多。</li>
</ul>

<h4 id="缺点">缺点</h4>
<ul>
  <li><strong>功耗高</strong>：不适合电池供电的设备。</li>
  <li><strong>覆盖范围有限</strong>：适用于中小范围的覆盖。</li>
</ul>

<h4 id="应用场景">应用场景</h4>
<ul>
  <li>智能家居</li>
  <li>办公环境</li>
  <li>视频监控</li>
</ul>

<h3 id="2-蓝牙">2. 蓝牙</h3>

<h4 id="概述-1">概述</h4>
<p>蓝牙是一种短距离无线通信技术，广泛用于个人设备间的通信。</p>

<h4 id="优点-1">优点</h4>
<ul>
  <li><strong>低功耗</strong>：适用于可穿戴设备、IoT传感器。</li>
  <li><strong>简便的配对过程</strong>：易于连接和使用。</li>
</ul>

<h4 id="缺点-1">缺点</h4>
<ul>
  <li><strong>短距离</strong>：适合个人区域网络。</li>
  <li><strong>带宽有限</strong>：不适合高数据传输需求。</li>
</ul>

<h4 id="应用场景-1">应用场景</h4>
<ul>
  <li>可穿戴设备</li>
  <li>无线耳机</li>
  <li>健康监测</li>
</ul>

<h3 id="3-zigbee与lr-wpan">3. Zigbee与LR-WPAN</h3>

<h4 id="概述-2">概述</h4>
<p>Zigbee是一种低功耗、低数据速率的无线通信技术，适用于大规模的物联网设备网络。</p>

<h4 id="优点-2">优点</h4>
<ul>
  <li><strong>低功耗</strong>：适合长时间电池供电的设备。</li>
  <li><strong>网状网络</strong>：增强网络的覆盖范围和可靠性。</li>
</ul>

<h4 id="缺点-2">缺点</h4>
<ul>
  <li><strong>带宽有限</strong>：不适合高数据速率应用。</li>
  <li><strong>复杂性</strong>：网络配置和维护相对复杂。</li>
</ul>

<h4 id="应用场景-2">应用场景</h4>
<ul>
  <li>智能家居自动化</li>
  <li>工业控制</li>
  <li>环境监测</li>
</ul>

<h3 id="4-基于ipv6的低速无线个人区域网6lowpan标准">4. 基于IPv6的低速无线个人区域网6LoWPAN标准</h3>

<h4 id="概述-3">概述</h4>
<p>6LoWPAN是一种基于IPv6的低功耗无线个人区域网络标准，适用于嵌入式设备。</p>

<h4 id="优点-3">优点</h4>
<ul>
  <li><strong>支持IPv6</strong>：方便与互联网无缝连接。</li>
  <li><strong>低功耗</strong>：适用于电池供电设备。</li>
</ul>

<h4 id="缺点-3">缺点</h4>
<ul>
  <li><strong>带宽有限</strong>：适用于低数据速率应用。</li>
  <li><strong>复杂性</strong>：需要理解和配置IPv6网络。</li>
</ul>

<h4 id="应用场景-3">应用场景</h4>
<ul>
  <li>远程监控</li>
  <li>智能城市传感器</li>
  <li>工业自动化</li>
</ul>

<h3 id="5-超宽带通信uwbultra-wideband">5. 超宽带通信UWB（Ultra-Wideband）</h3>

<h4 id="概述-4">概述</h4>
<p>UWB是一种高带宽、低功耗的无线通信技术，适用于高精度定位和高速数据传输。</p>

<h4 id="优点-4">优点</h4>
<ul>
  <li><strong>高带宽</strong>：适合高数据速率应用。</li>
  <li><strong>高精度定位</strong>：用于室内定位和跟踪。</li>
</ul>

<h4 id="缺点-4">缺点</h4>
<ul>
  <li><strong>短距离</strong>：适合局部区域应用。</li>
  <li><strong>复杂性</strong>：需要专用硬件和配置。</li>
</ul>

<h4 id="应用场景-4">应用场景</h4>
<ul>
  <li>室内定位</li>
  <li>高速数据传输</li>
  <li>安全系统</li>
</ul>

<h3 id="6-无线体域网wban与ieee-802156标准">6. 无线体域网WBAN与IEEE 802.15.6标准</h3>

<h4 id="概述-5">概述</h4>
<p>WBAN（Wireless Body Area Network）是一种专为人体附近无线通信设计的技术，符合IEEE 802.15.6标准。</p>

<h4 id="优点-5">优点</h4>
<ul>
  <li><strong>低功耗</strong>：适用于医疗设备、可穿戴设备。</li>
  <li><strong>人体安全</strong>：设计符合人体健康安全标准。</li>
</ul>

<h4 id="缺点-5">缺点</h4>
<ul>
  <li><strong>带宽有限</strong>：适用于低数据速率的生理数据传输。</li>
  <li><strong>短距离</strong>：仅适用于人体附近的通信。</li>
</ul>

<h4 id="应用场景-5">应用场景</h4>
<ul>
  <li>医疗监测</li>
  <li>健康管理</li>
  <li>运动追踪</li>
</ul>

<h3 id="7-nb-iotnarrowband-iot">7. NB-IoT（Narrowband IoT）</h3>

<h4 id="概述-6">概述</h4>
<p>NB-IoT是一种基于蜂窝网络的低功耗广域网（LPWAN）技术，适用于大规模物联网部署。</p>

<h4 id="优点-6">优点</h4>
<ul>
  <li><strong>广覆盖</strong>：适合大范围区域覆盖。</li>
  <li><strong>低功耗</strong>：适合长时间电池供电的设备。</li>
  <li><strong>高连接密度</strong>：支持大量设备同时连接。</li>
</ul>

<h4 id="缺点-6">缺点</h4>
<ul>
  <li><strong>带宽有限</strong>：适用于低数据速率应用。</li>
  <li><strong>延迟较高</strong>：不适合需要实时响应的应用。</li>
</ul>

<h4 id="应用场景-6">应用场景</h4>
<ul>
  <li>智能城市</li>
  <li>远程抄表</li>
  <li>环境监测</li>
</ul>

<h3 id="8-emtcenhanced-machine-type-communication">8. eMTC（Enhanced Machine-Type Communication）</h3>

<h4 id="概述-7">概述</h4>
<p>eMTC是一种增强型的蜂窝物联网技术，提供更高的数据速率和更低的延迟。</p>

<h4 id="优点-7">优点</h4>
<ul>
  <li><strong>高带宽</strong>：适合中等数据速率应用。</li>
  <li><strong>低延迟</strong>：适合需要快速响应的应用。</li>
  <li><strong>广覆盖</strong>：适合大范围区域覆盖。</li>
</ul>

<h4 id="缺点-7">缺点</h4>
<ul>
  <li><strong>功耗较高</strong>：相对于NB-IoT，功耗稍高。</li>
  <li><strong>复杂性</strong>：需要支持蜂窝网络基础设施。</li>
</ul>

<h4 id="应用场景-7">应用场景</h4>
<ul>
  <li>智能交通</li>
  <li>资产追踪</li>
  <li>安全监控</li>
</ul>

<h3 id="选择指南">选择指南</h3>

<h4 id="1-根据应用场景选择">1. 根据应用场景选择</h4>
<ul>
  <li><strong>智能家居</strong>：WiFi、Zigbee、6LoWPAN。</li>
  <li><strong>可穿戴设备</strong>：蓝牙、WBAN。</li>
  <li><strong>工业自动化</strong>：Zigbee、6LoWPAN、NB-IoT。</li>
  <li><strong>远程监控</strong>：NB-IoT、6LoWPAN。</li>
  <li><strong>医疗健康</strong>：WBAN、蓝牙。</li>
  <li><strong>智能城市</strong>：NB-IoT、eMTC。</li>
</ul>

<h4 id="2-根据带宽需求选择">2. 根据带宽需求选择</h4>
<ul>
  <li><strong>高带宽</strong>：WiFi、UWB、eMTC。</li>
  <li><strong>中等带宽</strong>：eMTC、WiFi。</li>
  <li><strong>低带宽</strong>：NB-IoT、Zigbee、6LoWPAN、WBAN。</li>
</ul>

<h4 id="3-根据功耗要求选择">3. 根据功耗要求选择</h4>
<ul>
  <li><strong>低功耗</strong>：NB-IoT、Zigbee、6LoWPAN、WBAN。</li>
  <li><strong>中等功耗</strong>：蓝牙、eMTC。</li>
  <li><strong>高功耗</strong>：WiFi、UWB。</li>
</ul>

<h4 id="4-根据覆盖范围选择">4. 根据覆盖范围选择</h4>
<ul>
  <li><strong>短距离</strong>：蓝牙、WBAN、UWB。</li>
  <li><strong>中距离</strong>：WiFi、Zigbee、6LoWPAN。</li>
  <li><strong>长距离</strong>：NB-IoT、eMTC。</li>
</ul>

<h3 id="总结">总结</h3>

<p>选择合适的物联网接入技术需要根据具体的应用场景、带宽需求、功耗要求和覆盖范围进行综合考虑。通过理解每种技术的优缺点和适用场景，可以更好地匹配应用需求，实现高效的物联网解决方案。</p>

<p>选择适合的物联网接入技术需要考虑多个因素，包括应用场景、带宽需求、覆盖范围、成本、安装难度和可靠性等。以下是对局域网接入、电话交换网与ADSL接入技术、广播电视网与HFC接入技术、电力线接入技术的详细介绍和选择指南。</p>

<h2 id="有线">有线</h2>

<h3 id="1-局域网接入技术">1. 局域网接入技术</h3>
<h4 id="概述-8">概述</h4>
<p>局域网（LAN）接入技术通常使用以太网（Ethernet）进行数据传输，适用于需要高带宽和低延迟的本地网络连接。</p>

<h4 id="优点-8">优点</h4>
<ul>
  <li><strong>高带宽</strong>：支持高速数据传输，适用于视频监控、工业自动化等需要高数据速率的应用。</li>
  <li><strong>低延迟</strong>：实时性好，适合需要快速响应的应用。</li>
  <li><strong>稳定性高</strong>：有线连接稳定性好，抗干扰能力强。</li>
</ul>

<h4 id="缺点-8">缺点</h4>
<ul>
  <li><strong>安装成本高</strong>：需要布线，安装和维护成本较高。</li>
  <li><strong>覆盖范围有限</strong>：适用于小范围的本地网络。</li>
</ul>

<h4 id="应用场景-8">应用场景</h4>
<ul>
  <li>工业自动化</li>
  <li>智能建筑</li>
  <li>数据中心</li>
  <li>视频监控</li>
</ul>

<h3 id="2-电话交换网与adsl接入技术">2. 电话交换网与ADSL接入技术</h3>
<h4 id="概述-9">概述</h4>
<p>ADSL（Asymmetric Digital Subscriber Line）通过传统电话线提供宽带接入，适用于现有电话网络覆盖的区域。</p>

<h4 id="优点-9">优点</h4>
<ul>
  <li><strong>利用现有基础设施</strong>：无需重新布线，降低安装成本。</li>
  <li><strong>较高的下行带宽</strong>：适用于大多数家庭和小型办公室的需求。</li>
  <li><strong>同时传输语音和数据</strong>：不影响电话通话。</li>
</ul>

<h4 id="缺点-9">缺点</h4>
<ul>
  <li><strong>上行带宽有限</strong>：不适合需要高上传速度的应用。</li>
  <li><strong>距离限制</strong>：距离电话交换局越远，带宽和信号质量越差。</li>
</ul>

<h4 id="应用场景-9">应用场景</h4>
<ul>
  <li>家庭网络</li>
  <li>小型办公室</li>
  <li>远程监控</li>
</ul>

<h3 id="3-广播电视网与hfc接入技术">3. 广播电视网与HFC接入技术</h3>
<h4 id="概述-10">概述</h4>
<p>HFC（Hybrid Fiber-Coaxial）利用光纤和同轴电缆的组合提供宽带接入，通常用于有线电视网络。</p>

<h4 id="优点-10">优点</h4>
<ul>
  <li><strong>高带宽</strong>：支持高速互联网接入，适合大数据传输。</li>
  <li><strong>覆盖范围广</strong>：利用现有的有线电视网络覆盖广泛区域。</li>
  <li><strong>双向通信</strong>：支持互联网和有线电视信号的双向传输。</li>
</ul>

<h4 id="缺点-10">缺点</h4>
<ul>
  <li><strong>成本较高</strong>：安装和维护成本较高。</li>
  <li><strong>信号衰减</strong>：同轴电缆在长距离传输中存在信号衰减问题。</li>
</ul>

<h4 id="应用场景-10">应用场景</h4>
<ul>
  <li>智能家庭</li>
  <li>社区宽带网络</li>
  <li>视频点播和流媒体服务</li>
</ul>

<h3 id="4-电力线接入技术">4. 电力线接入技术</h3>
<h4 id="概述-11">概述</h4>
<p>电力线通信（PLC）通过现有的电力线进行数据传输，适用于利用电力基础设施的场景。</p>

<h4 id="优点-11">优点</h4>
<ul>
  <li><strong>利用现有电力线</strong>：无需额外布线，安装简便。</li>
  <li><strong>覆盖范围广</strong>：电力线覆盖范围广，适用于较大区域。</li>
  <li><strong>适应性强</strong>：适用于各种电力环境，特别是建筑内部。</li>
</ul>

<h4 id="缺点-11">缺点</h4>
<ul>
  <li><strong>干扰问题</strong>：电力线环境复杂，容易受到干扰。</li>
  <li><strong>带宽有限</strong>：相比其他有线技术，带宽较低。</li>
</ul>

<h4 id="应用场景-11">应用场景</h4>
<ul>
  <li>智能电网</li>
  <li>智能家居</li>
  <li>工业控制</li>
</ul>

<h3 id="选择指南-1">选择指南</h3>

<ol>
  <li><strong>带宽需求</strong>
    <ul>
      <li>高带宽需求（如视频监控、数据中心）：优先选择局域网接入技术或HFC接入技术。</li>
      <li>中等带宽需求（如家庭网络、远程监控）：ADSL接入技术或HFC接入技术。</li>
      <li>低带宽需求（如智能家居控制、传感器数据传输）：电力线接入技术或ADSL接入技术。</li>
    </ul>
  </li>
  <li><strong>覆盖范围</strong>
    <ul>
      <li>小范围（如单个建筑、工厂）：局域网接入技术。</li>
      <li>大范围（如社区、农村地区）：HFC接入技术或电力线接入技术。</li>
    </ul>
  </li>
  <li><strong>成本考虑</strong>
    <ul>
      <li>利用现有基础设施（如电话线、电力线）：ADSL接入技术或电力线接入技术。</li>
      <li>可接受较高安装成本以换取高带宽和稳定性：局域网接入技术或HFC接入技术。</li>
    </ul>
  </li>
  <li><strong>安装和维护</strong>
    <ul>
      <li>简便安装：电力线接入技术。</li>
      <li>专业安装和维护：局域网接入技术或HFC接入技术。</li>
    </ul>
  </li>
  <li><strong>应用场景</strong>
    <ul>
      <li>工业自动化、智能建筑：局域网接入技术。</li>
      <li>家庭网络、智能家居：ADSL接入技术或HFC接入技术。</li>
      <li>智能电网、广域监控：电力线接入技术。</li>
    </ul>
  </li>
</ol>

<h3 id="结论">结论</h3>

<p>根据具体的应用需求和环境条件，可以选择最适合的物联网接入技术。综合考虑带宽需求、覆盖范围、成本和安装维护等因素，可以优化物联网系统的性能和成本效益。</p>

<h2 id="移动定位技术的优缺点">移动定位技术的优缺点</h2>

<h3 id="移动通信定位技术">移动通信定位技术</h3>

<h4 id="优点-12">优点</h4>

<ul>
  <li><strong>广覆盖</strong>：移动通信网络覆盖范围广，几乎全球可用。</li>
  <li><strong>实时性强</strong>：定位和追踪实时性高，适合动态环境。</li>
  <li><strong>多种选择</strong>：可以根据应用场景选择不同的定位技术，灵活性高。</li>
</ul>

<h4 id="缺点-12">缺点</h4>

<ul>
  <li><strong>定位精度受限</strong>：不同技术的定位精度存在差异，受环境因素影响较大。</li>
  <li><strong>隐私问题</strong>：需要处理用户隐私和数据安全问题。</li>
  <li><strong>耗电量大</strong>：部分定位技术（如GPS）耗电量较大，不适合长期使用。</li>
</ul>

<h2 id="agps系统">A—GPS系统</h2>

<h4 id="优点-13">优点</h4>

<ol>
  <li><strong>快速定位</strong>：显著减少首次定位时间（TTFF），在冷启动时尤其明显。</li>
  <li><strong>提高精度</strong>：在信号弱或受干扰的环境中（如城市峡谷、室内），A-GPS提供的辅助数据有助于提高定位精度。</li>
  <li><strong>低功耗</strong>：缩短定位时间，减少设备功耗。</li>
  <li><strong>增强覆盖</strong>：在传统GPS难以覆盖的区域，A-GPS通过移动网络提供辅助数据，提升定位能力。</li>
</ol>

<h4 id="缺点-13">缺点</h4>

<ol>
  <li><strong>依赖网络</strong>：需要移动通信网络支持，如果网络不可用，A-GPS功能将受限。</li>
  <li><strong>隐私问题</strong>：通过网络传输位置信息，可能存在隐私和数据安全问题。</li>
</ol>

<h2 id="基于wifi定位技术">基于WIFI定位技术</h2>

<h4 id="优点-14">优点</h4>

<ul>
  <li><strong>无需视距</strong>：WiFi信号可以穿透大多数非金属物体，适用于室内和城市环境。</li>
  <li><strong>广泛覆盖</strong>：利用现有的WiFi基础设施，无需额外部署硬件。</li>
  <li><strong>高精度</strong>：在室内环境中，可以达到较高的定位精度（一般在几米范围内）。</li>
</ul>

<h4 id="缺点-14">缺点</h4>

<ul>
  <li><strong>信号干扰</strong>：WiFi信号容易受到环境和其他无线设备的干扰，影响定位精度。</li>
  <li><strong>指纹数据库构建复杂</strong>：指纹匹配法需要预先构建和维护信号指纹数据库，工作量较大。</li>
  <li><strong>能耗较高</strong>：设备需要频繁扫描WiFi信号，耗电量较大。</li>
</ul>

<h2 id="基于rfid定位技术">基于RFID定位技术</h2>

<h4 id="优点-15">优点</h4>

<ol>
  <li><strong>无需视距</strong>：RFID信号可以穿透大多数非金属物体，实现非视距通信。</li>
  <li><strong>快速读取</strong>：可以同时读取多个标签，提高效率。</li>
  <li><strong>低成本</strong>：标签成本较低，适合大规模应用。</li>
  <li><strong>多功能性</strong>：不仅可以实现定位，还可以存储和传输数据。</li>
</ol>

<h4 id="缺点-15">缺点</h4>

<ol>
  <li><strong>精度受限</strong>：定位精度相对较低，受环境因素影响较大。</li>
  <li><strong>干扰问题</strong>：容易受到金属物体和电磁干扰的影响。</li>
  <li><strong>能耗问题</strong>：有源标签需要电池供电，使用寿命受限。</li>
</ol>

<h2 id="wsn定位技术">WSN定位技术</h2>

<h4 id="优点-16">优点</h4>

<ul>
  <li><strong>无需基础设施</strong>：适用于各种环境，尤其是在缺乏基础设施的区域。</li>
  <li><strong>自组织网络</strong>：传感器节点可以自动组建网络，灵活性高。</li>
  <li><strong>多功能性</strong>：传感器节点不仅可以定位，还可以收集环境数据。</li>
</ul>

<h4 id="缺点-16">缺点</h4>

<ul>
  <li><strong>定位精度受限</strong>：受环境干扰、信号衰减等因素影响，定位精度不如GPS等技术。</li>
  <li><strong>能耗较高</strong>：频繁通信和计算增加了节点的能耗。</li>
  <li><strong>复杂性</strong>：需要复杂的算法和多节点协作，增加系统复杂性。</li>
</ul>

<h2 id="汇聚层的主要功能">汇聚层的主要功能</h2>

<h4 id="1-数据收集和汇聚">1. 数据收集和汇聚</h4>

<ul>
  <li><strong>数据整合</strong>：从多个接入层设备（如传感器、网关）收集数据，并进行整合处理。</li>
  <li><strong>协议转换</strong>：实现不同通信协议之间的转换，确保数据在不同设备和系统之间能够无缝传输。</li>
</ul>

<h4 id="2-数据预处理和过滤">2. 数据预处理和过滤</h4>

<ul>
  <li><strong>数据清洗</strong>：对收集到的数据进行清洗，去除噪声和无效数据，确保数据质量。</li>
  <li><strong>数据过滤</strong>：根据预定义的规则或条件过滤数据，只传输有价值的信息，减少传输负荷。</li>
  <li><strong>数据压缩</strong>：对数据进行压缩处理，减少数据传输所需的带宽。</li>
</ul>

<h4 id="3-边缘计算和分析">3. 边缘计算和分析</h4>

<ul>
  <li><strong>实时处理</strong>：在本地进行实时数据处理和分析，减少延迟，提高响应速度。</li>
  <li><strong>事件检测</strong>：实时检测数据中的异常事件或特定模式，并触发相应的响应或警报。</li>
  <li><strong>边缘智能</strong>：利用机器学习和人工智能算法，在本地实现智能决策和自动化控制。</li>
</ul>

<h4 id="4-数据存储和缓存">4. 数据存储和缓存</h4>

<ul>
  <li><strong>本地存储</strong>：在本地存储短期或中期的数据，以便快速访问和处理。</li>
  <li><strong>数据缓存</strong>：缓存临时数据，减少数据传输的频率和延迟，提高系统性能。</li>
</ul>

<h4 id="5-安全管理">5. 安全管理</h4>

<ul>
  <li><strong>数据加密</strong>：对数据进行加密处理，确保数据在传输过程中的安全性。</li>
  <li><strong>身份认证</strong>：验证接入设备的身份，确保只有授权设备能够连接和传输数据。</li>
  <li><strong>访问控制</strong>：设置访问控制策略，确保数据和系统的安全性。</li>
</ul>

<h4 id="6-数据转发和传输">6. 数据转发和传输</h4>

<ul>
  <li><strong>数据转发</strong>：将预处理后的数据转发到核心交换层或管理服务层进行进一步处理和存储。</li>
  <li><strong>网络优化</strong>：优化数据传输路径，确保高效、可靠的数据传输。</li>
</ul>

<h2 id="接入层的作用">接入层的作用</h2>

<h4 id="1-数据收集和整合">1. 数据收集和整合</h4>

<ul>
  <li><strong>数据收集</strong>：从各种传感器和设备收集数据，整合来自不同类型设备的数据流。</li>
  <li><strong>数据聚合</strong>：将来自多个传感器的数据汇聚到一个网关设备中，进行初步处理和整合。</li>
</ul>

<h4 id="2-数据初步处理">2. 数据初步处理</h4>

<ul>
  <li><strong>数据预处理</strong>：对数据进行初步处理，如滤波、去噪、归一化等，确保数据质量。</li>
  <li><strong>数据压缩</strong>：对数据进行压缩，减少传输所需的带宽。</li>
</ul>

<h4 id="3-通信和协议转换">3. 通信和协议转换</h4>

<ul>
  <li><strong>多种通信技术支持</strong>：支持多种无线和有线通信技术，如Wi-Fi、蓝牙、Zigbee、LoRa、NB-IoT、Ethernet等。</li>
  <li><strong>协议转换</strong>：实现不同通信协议之间的转换，确保不同类型设备能够互操作。</li>
</ul>

<h4 id="4-数据传输和中继">4. 数据传输和中继</h4>

<ul>
  <li><strong>数据传输</strong>：将收集和处理后的数据传输到汇聚层或远端服务器。</li>
  <li><strong>数据中继</strong>：在大范围物联网部署中，接入层设备（如网关）可以作为中继节点，帮助扩展网络覆盖范围。</li>
</ul>

<h4 id="5-安全管理-1">5. 安全管理</h4>

<ul>
  <li><strong>数据加密</strong>：在数据传输过程中，对数据进行加密，确保数据的安全性。</li>
  <li><strong>身份认证</strong>：验证连接设备的身份，确保只有授权设备可以接入网络。</li>
</ul>

<h4 id="6-设备管理">6. 设备管理</h4>

<ul>
  <li><strong>设备配置</strong>：管理和配置连接到接入层的传感器和设备，设置参数和运行模式。</li>
  <li><strong>固件升级</strong>：支持远程或本地的固件升级，保持设备软件的最新和安全。</li>
</ul>

<h2 id="管理服务层的主要功能">管理服务层的主要功能</h2>

<h4 id="1-设备管理">1. 设备管理</h4>

<ul>
  <li><strong>设备注册和配置</strong>：管理新设备的注册，配置设备参数和运行模式。</li>
  <li><strong>设备监控</strong>：实时监控设备的状态和性能，检测故障和异常情况。</li>
  <li><strong>远程维护</strong>：远程诊断和修复设备故障，减少现场维护的需求。</li>
  <li><strong>固件升级</strong>：远程或本地进行设备固件升级，确保设备的软件保持最新和安全。</li>
</ul>

<h4 id="2-数据管理">2. 数据管理</h4>

<ul>
  <li><strong>数据存储</strong>：存储从接入层和汇聚层收集的数据，确保数据的持久性和可靠性。</li>
  <li><strong>数据处理和分析</strong>：对数据进行清洗、整理和分析，提取有价值的信息。</li>
  <li><strong>数据可视化</strong>：提供数据的可视化工具，如图表、仪表盘，帮助用户理解和利用数据。</li>
  <li><strong>大数据分析</strong>：利用大数据技术对海量数据进行分析，支持预测性维护、智能决策等高级应用。</li>
</ul>

<h4 id="3-安全管理">3. 安全管理</h4>

<ul>
  <li><strong>数据加密</strong>：确保数据在存储和传输过程中的安全性，防止数据泄露和篡改。</li>
  <li><strong>身份认证和授权</strong>：管理用户和设备的身份认证，确保只有授权用户和设备可以访问系统。</li>
  <li><strong>入侵检测和防御</strong>：实时检测和防御网络攻击，保护系统的安全。</li>
  <li><strong>安全策略管理</strong>：制定和实施系统安全策略，确保系统的整体安全性。</li>
</ul>

<h4 id="4-系统管理">4. 系统管理</h4>

<ul>
  <li><strong>配置管理</strong>：管理系统的配置参数，确保系统的正常运行和优化性能。</li>
  <li><strong>日志管理</strong>：记录系统运行日志，支持故障排查和性能分析。</li>
  <li><strong>资源管理</strong>：管理系统资源的使用，如计算资源、存储资源和网络资源，确保资源的有效利用。</li>
  <li><strong>服务编排和调度</strong>：管理和调度系统内的各种服务，确保服务的高效运行和协调工作。</li>
</ul>

<h4 id="5-应用管理">5. 应用管理</h4>

<ul>
  <li><strong>应用部署</strong>：部署和管理物联网应用，确保应用的正常运行。</li>
  <li><strong>应用监控</strong>：实时监控应用的性能和状态，及时发现和解决问题。</li>
  <li><strong>应用更新</strong>：管理应用的更新和升级，确保应用的持续优化和改进。</li>
</ul>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="物联网" /><category term="课程笔记" /><summary type="html"><![CDATA[无线 选择适合的物联网接入技术需要综合考虑应用场景、带宽需求、覆盖范围、能耗、成本、安装难度和可靠性等因素。以下是WiFi接入、蓝牙、Zigbee与LR-WPAN、基于IPv6的低速无线个人区域网6LoWPAN标准、超宽带通信UWB、无线体域网WBAN与IEEE 802.15.6标准、NB-IoT和eMTC的详细介绍和选择指南。]]></summary></entry><entry><title type="html">物联网实验四 RFID-2.4G有源实验</title><link href="http://localhost:4000/2024/06/25/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%9B%9B-RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="物联网实验四 RFID-2.4G有源实验" /><published>2024-06-25T00:00:00+08:00</published><updated>2024-06-25T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/25/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%9B%9B%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/06/25/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%9B%9B-RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.html"><![CDATA[<!---more-->
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/%E6%9C%AA%E5%91%BD%E5%90%8D.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《物联网实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">实验4 RFID-2.4G有源实验</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">朱容波</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 6月 25 日</p>
</div>

<p>[TOC]</p>

<h1 id="实验4-rfid-24g有源实验">实验4 RFID-2.4G有源实验</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>加深RFID-2.4G技术的理解</li>
  <li>掌握使用RFID的数据读取的方式</li>
  <li>了解2.4G有源卡的读取</li>
  <li>更好地理解物联网中的RFID标签的设计原理；</li>
  <li>进一步熟练实验，提高自己的实践动手能力；</li>
</ul>

<h2 id="实验要求">实验要求</h2>

<ul>
  <li>
    <p>通信协议：2.4G有源RFID</p>
  </li>
  <li>
    <p>实验内容：2.4G有源RFID数据读取</p>
  </li>
  <li>
    <p>参考视频：2.4G有源RFID数据读取实验.mp4</p>
  </li>
  <li>
    <p>通过Python编写界面程序实现RFID端口数据读取</p>
  </li>
</ul>

<h2 id="实验设备">实验设备</h2>

<ul>
  <li>硬件：2.4G 有缘 RFID 节点，串口线，物联网实验开发箱；</li>
  <li>软件：Keli4 For ARM 开发软件，串口调试工具；</li>
  <li>参考资料：协议栈 API 接口说明文档，LoRa 源码，STM32 工程源码</li>
</ul>

<h2 id="实验原理">实验原理</h2>

<p>在进行实验之前，要先对实验理论进行了解。</p>

<p>首先我们要对RFID-2.4G技术进行了解，对此我们将以问答的形式给出。</p>

<h3 id="什么是有源rfid-24g">什么是有源RFID-2.4G？</h3>

<p>RFID-2.4G 是工作在2.4GHz频段的射频识别系统（RFID），这是一种利用无线电波进行非接触式数据传输的技术，广泛应用于资产跟踪、人员定位、供应链管理等领域。2.4GHz频段属于微波频段的一部分，具体范围通常在2.4GHz至2.5GHz之间。由于这一频段与Wi-Fi、蓝牙等常见设备共用，具有较好的兼容性和全球应用前景。</p>

<p>RFID-2.4G系统通常为有源RFID系统，这意味着标签内置有电池，可以主动发送信号，而不是像无源RFID那样依赖读卡器提供能量。有源标签具备较长的读取距离，通常可达数十米甚至几百米；较大的数据存储容量，可以存储大量数据如传感器数据、时间戳等；多功能性，可以实现环境监测、实时定位等高级功能。</p>

<p>这种系统广泛应用于需要远距离数据传输和监控的场景，如仓库和工厂中高价值物品的资产追踪、安全管理中的人员定位（例如医院病人监控、监狱囚犯管理），以及物流运输过程中货物的实时监控。其优势包括读取距离长、实时数据传输和高数据处理能力，但也面临电池寿命需要定期更换、系统成本较高以及可能受到频段共用设备干扰的问题。</p>

<p>所以我们就可以了解RFID-2.4G系统是利用2.4GHz频段进行数据传输，凭借其远距离读取和实时监控的能力，在资产追踪、人员定位和供应链管理等领域有着广泛应用。尽管面临一些挑战，其独特优势使其在许多应用场景中仍然是不可替代的技术手段。</p>

<h2 id="实验步骤">实验步骤</h2>

<ol>
  <li>前期准备：观看实验教学视频，了解实验步骤，理解实验原理，阅读参考手册，详细了解实验步骤，抓住实验细节；</li>
  <li>标签连接好电源；</li>
  <li>用公母直连线连接电脑串口和有源2.4G节点的DB9接头，S1开关拨打到左边，让DB9和2.4G读卡器相连；</li>
  <li>打开串口调试助手，串口参数：9600 8 N 1 ，标签自动向读卡器发信息，其中 FB 10 00 00 0C 0F 01 01 就是读到的有源卡的卡号。</li>
  <li>使用GUI显示界串口接收到的数据。</li>
</ol>

<h2 id="实验结果">实验结果</h2>

<h3 id="1-标签连接好电源">1 标签连接好电源</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/image-20240626192948733.png" alt="image-20240626192948733" /></p>

<h3 id="2-连接有源24g节点和电脑">2 连接有源2.4G节点和电脑</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/image-20240626193000812.png" alt="image-20240626193000812" /></p>

<h3 id="3-使用串口调试助手读取卡号">3 使用串口调试助手读取卡号</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/f7be87e9a07c64436af2ac66fa1149f4.png" alt="f7be87e9a07c64436af2ac66fa1149f4" /></p>

<h3 id="4-使用python编写可视化gui并接收数据">4 使用Python编写可视化GUI，并接收数据</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/db6785af4fbc48c37961a5e5c45dee6c.png" alt="db6785af4fbc48c37961a5e5c45dee6c" /></p>

<h4 id="完整代码逐行注释">完整代码+逐行注释</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">threading</span>  <span class="c1"># 用于实现多线程
</span><span class="kn">import</span> <span class="n">serial</span>  <span class="c1"># pySerial库，用于串口通信
</span><span class="kn">from</span> <span class="n">tkinter</span> <span class="kn">import</span> <span class="n">ttk</span>  <span class="c1"># ttk模块提供了若干新小部件
</span><span class="kn">import</span> <span class="n">tkinter</span> <span class="k">as</span> <span class="n">tk</span>  <span class="c1"># Tkinter是Python的标准GUI库
</span><span class="kn">import</span> <span class="n">binascii</span>  <span class="c1"># 用于二进制和ASCII字符串的相互转换
</span>
<span class="c1"># 一个简单的信息窗口类
</span>

<span class="k">class</span> <span class="nc">InformWindow</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">informStr</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Tk</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Information</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口标题
</span>        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">geometry</span><span class="p">(</span><span class="sh">"</span><span class="s">220x60</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口大小
</span>        <span class="n">label</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">informStr</span><span class="p">)</span>  <span class="c1"># 显示信息的标签
</span>        <span class="n">buttonOK</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span>
                             <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonOK</span><span class="p">)</span>  <span class="c1"># 确定按钮
</span>        <span class="n">label</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">TOP</span><span class="p">)</span>
        <span class="n">buttonOK</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">BOTTOM</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">mainloop</span><span class="p">()</span>  <span class="c1"># 进入消息循环
</span>
    <span class="k">def</span> <span class="nf">processButtonOK</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">destroy</span><span class="p">()</span>  <span class="c1"># 销毁窗口
</span>
<span class="c1"># 主GUI类
</span>

<span class="k">class</span> <span class="nc">mainGUI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">window</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Tk</span><span class="p">()</span>
        <span class="n">window</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">GUI UART Tx/Rx Demo</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口标题
</span>        <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># 标识串口是否打开
</span>
        <span class="c1"># 包含COM信息和开始/停止按钮的框架
</span>        <span class="n">frame_COMinf</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frame_COMinf</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelCOM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">COMx: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># COM端口标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">COM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">COM1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># COM端口变量
</span>        <span class="n">ertryCOM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Entry</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">COM</span><span class="p">)</span>  <span class="c1"># 输入COM端口
</span>        <span class="n">labelCOM</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">ertryCOM</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelBaudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Baudrate: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 波特率标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">IntVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mi">115200</span><span class="p">)</span>  <span class="c1"># 波特率变量
</span>        <span class="n">ertryBaudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Entry</span><span class="p">(</span>
            <span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span><span class="p">)</span>  <span class="c1"># 输入波特率
</span>        <span class="n">labelBaudrate</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">ertryBaudrate</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelParity</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Parity: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 校验位标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Parity</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 校验位变量
</span>        <span class="n">comboParity</span> <span class="o">=</span> <span class="n">ttk</span><span class="p">.</span><span class="nc">Combobox</span><span class="p">(</span>
            <span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Parity</span><span class="p">)</span>  <span class="c1"># 校验位下拉框
</span>        <span class="n">comboParity</span><span class="p">[</span><span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ODD</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EVEN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">MARK</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">SPACE</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">comboParity</span><span class="p">[</span><span class="sh">"</span><span class="s">state</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">readonly</span><span class="sh">"</span>
        <span class="n">labelParity</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">comboParity</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelStopbits</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Stopbits: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 停止位标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 停止位变量
</span>        <span class="n">comboStopbits</span> <span class="o">=</span> <span class="n">ttk</span><span class="p">.</span><span class="nc">Combobox</span><span class="p">(</span>
            <span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span><span class="p">)</span>  <span class="c1"># 停止位下拉框
</span>        <span class="n">comboStopbits</span><span class="p">[</span><span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1.5</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">comboStopbits</span><span class="p">[</span><span class="sh">"</span><span class="s">state</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">readonly</span><span class="sh">"</span>
        <span class="n">labelStopbits</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">comboStopbits</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span>
            <span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Start</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonSS</span><span class="p">)</span>  <span class="c1"># 开始/停止按钮
</span>        <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">E</span><span class="p">)</span>

        <span class="c1"># 串口对象
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="nc">Serial</span><span class="p">()</span>

        <span class="c1"># 串口读取线程
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ReadUARTThread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">ReadUART</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ReadUARTThread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>

        <span class="c1"># 接收数据的框架
</span>        <span class="n">frameRecv</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frameRecv</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelOutText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frameRecv</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">ReceivedData:</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 接收数据标签
</span>        <span class="n">labelOutText</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">W</span><span class="p">)</span>
        <span class="n">frameRecvSon</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">frameRecv</span><span class="p">)</span>
        <span class="n">frameRecvSon</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">scrollbarRecv</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Scrollbar</span><span class="p">(</span><span class="n">frameRecvSon</span><span class="p">)</span>
        <span class="n">scrollbarRecv</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">RIGHT</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="n">frameRecvSon</span><span class="p">,</span> <span class="n">wrap</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">WORD</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
                                  <span class="n">height</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">yscrollcommand</span><span class="o">=</span><span class="n">scrollbarRecv</span><span class="p">.</span><span class="nb">set</span><span class="p">)</span>  <span class="c1"># 显示接收数据的文本框
</span>        <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span><span class="p">.</span><span class="nf">pack</span><span class="p">()</span>

        <span class="c1"># 发送数据的框架
</span>        <span class="n">frameTrans</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frameTrans</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelInText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frameTrans</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">To Transmit Data:</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 发送数据标签
</span>        <span class="n">labelInText</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">W</span><span class="p">)</span>
        <span class="n">frameTransSon</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">frameTrans</span><span class="p">)</span>
        <span class="n">frameTransSon</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">scrollbarTrans</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Scrollbar</span><span class="p">(</span><span class="n">frameTransSon</span><span class="p">)</span>
        <span class="n">scrollbarTrans</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">RIGHT</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">InputText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="n">frameTransSon</span><span class="p">,</span> <span class="n">wrap</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">WORD</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
                                 <span class="n">height</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">yscrollcommand</span><span class="o">=</span><span class="n">scrollbarTrans</span><span class="p">.</span><span class="nb">set</span><span class="p">)</span>  <span class="c1"># 输入发送数据的文本框
</span>        <span class="n">self</span><span class="p">.</span><span class="n">InputText</span><span class="p">.</span><span class="nf">pack</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">buttonSend</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span>
            <span class="n">frameTrans</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Send</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonSend</span><span class="p">)</span>  <span class="c1"># 发送按钮
</span>        <span class="n">self</span><span class="p">.</span><span class="n">buttonSend</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">E</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="nf">mainloop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">processButtonSS</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 关闭串口
</span>            <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Start</span><span class="sh">"</span>  <span class="c1"># 更改按钮文字
</span>            <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 重新启动串口
</span>            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">COM</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">baudrate</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="n">strParity</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Parity</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_NONE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">ODD</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_ODD</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">EVEN</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_EVEN</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">MARK</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_MARK</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">SPACE</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_SPACE</span>

            <span class="n">strStopbits</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_ONE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">1.5</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_ONE_POINT_FIVE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_TWO</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">open</span><span class="p">()</span>  <span class="c1"># 打开串口
</span>            <span class="k">except</span><span class="p">:</span>
                <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Can</span><span class="sh">'</span><span class="s">t open </span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">port</span>
                <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>

            <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">isOpen</span><span class="p">()):</span>  <span class="c1"># 打开成功
</span>                <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Stop</span><span class="sh">"</span>  <span class="c1"># 更改按钮文字
</span>                <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">processButtonSend</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
            <span class="n">strToSend</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">InputText</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">tk</span><span class="p">.</span><span class="n">END</span><span class="p">)</span>
            <span class="n">bytesToSend</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">strToSend</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 将输入的十六进制字符串转换为字节
</span>            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">bytesToSend</span><span class="p">)</span>  <span class="c1"># 发送数据
</span>            <span class="nf">print</span><span class="p">(</span><span class="n">bytesToSend</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">UART is not open</span><span class="sh">"</span>
            <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ReadUART</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">ch</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>  <span class="c1"># 读取一个字节
</span>                    <span class="nf">print</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="nf">b2a_hex</span><span class="p">(</span><span class="n">ch</span><span class="p">))</span>  <span class="c1"># 将字节转换为十六进制字符串
</span>                    <span class="nf">print</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\\</span><span class="s">x</span><span class="sh">'</span><span class="p">))</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span>
                        <span class="n">tk</span><span class="p">.</span><span class="n">END</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="se">\'\\</span><span class="s">x</span><span class="sh">'</span><span class="p">))</span>  <span class="c1"># 在文本框中显示接收到的数据
</span>                <span class="k">except</span><span class="p">:</span>
                    <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Error reading UART</span><span class="sh">"</span>
                    <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 关闭串口
</span>                    <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Start</span><span class="sh">"</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>


<span class="c1"># 启动主GUI
</span><span class="nf">mainGUI</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="实验总结与感悟">实验总结与感悟</h2>

<p>本次实验是一次难忘且充实的学习体验，通过实际操作2.4G有源RFID系统，我不仅加深了对RFID技术的理解，也提升了自己在物联网领域的动手实践能力。</p>

<p>在实验的开始阶段，我观看了教学视频并阅读了相关文档，详细了解了实验的每一步骤和技术原理。通过预先的理论学习，使我在动手操作时更加得心应手。特别是在连接硬件和调试软件时，视频的演示和指导为我提供了清晰的操作路径，减少了许多可能遇到的困惑和问题。</p>

<p>实验过程中，我们小组齐心协力，按照步骤连接读卡器和标签，并通过串口调试助手成功读取到了有源RFID标签的数据。当我们在调试过程中遇到数据传输不稳定的问题时，通过查阅资料和与同学讨论，我们找到了问题的根源并成功解决。这一过程不仅增强了团队协作精神，也让我意识到理论知识和实际操作的紧密联系。</p>

<p>在整个实验中，最让我感到兴奋的是将理论转化为实践的过程。从代码编写到硬件连接，每一步都充满了挑战和乐趣。特别是通过Python编写的程序实现了对串口数据的实时监控和可视化展示，这不仅仅是一次编程练习，更是一次全面的系统设计和实现的过程。在看到实验结果成功显示在屏幕上的那一刻，我深深感受到了成就感和满足感。</p>

<p>通过这次实验，我深刻理解了2.4G有源RFID在物联网中的广泛应用，特别是在物流运输和人员定位等领域的巨大潜力。我们使用的有源RFID系统以其稳定、低功耗和长距离的特点，展示了其在实际应用中的优势。实验中的每一个环节都让我更加熟悉了物联网硬件和软件的结合，为未来的学习和工作打下了坚实的基础。</p>

<p>本次实验不仅巩固了课堂所学的理论知识，更让我在实际操作中收获颇丰。感谢老师的耐心指导和同学们的热心帮助，让我在学习的道路上不断进步。通过这次实验，我不仅学到了技术，更体会到了团队合作和持续学习的重要性。期待在未来的学习中，能够继续探索和应用更多的物联网技术，不断提升自己的专业素养和技能。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="物联网" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">物联网实验三 RFID-UHF超高频实验</title><link href="http://localhost:4000/2024/06/18/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E4%B8%89-RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="物联网实验三 RFID-UHF超高频实验" /><published>2024-06-18T00:00:00+08:00</published><updated>2024-06-18T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/18/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E4%B8%89%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/06/18/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%9E%E9%AA%8C%E4%B8%89-RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.html"><![CDATA[<!---more-->
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/%E6%9C%AA%E5%91%BD%E5%90%8D.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E5%AE%9E%E9%AA%8C4%20RFID-2.4G%E6%9C%89%E6%BA%90%E5%AE%9E%E9%AA%8C.assets/%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《物联网实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">实验3 RFID-UHF超高频实验</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">朱容波</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 6月 18 日</p>
</div>

<p>[TOC]</p>

<h1 id="实验3-rfid-uhf超高频实验">实验3 RFID-UHF超高频实验</h1>

<h2 id="实验目的">实验目的</h2>

<ol>
  <li>掌握 UHF 超高频通讯原理；</li>
  <li>掌握 UHF 超高频通讯协议；</li>
  <li>掌握读卡器操作流程；</li>
  <li>了解 UHF 超高频应用；</li>
</ol>

<h2 id="实验设备">实验设备</h2>

<ul>
  <li>硬件：提供电源、PC、USB口、RS232串口、RJ45以太口、5539光敏传感器、蜂鸣传感器、CC Debugger仿真器一套。</li>
  <li>软件：ZigBee基础实验平台软件、python3.8、IAR Embedded WorkBench,ZStack协议栈，Keil开发软件。</li>
</ul>

<h2 id="实验要求">实验要求</h2>

<ol>
  <li>参考视频实现UHF超高频RFID通信</li>
  <li>通过Python编写界面程序实现RFID端口数据通信</li>
</ol>

<h2 id="实验原理">实验原理</h2>

<p><strong>在进行实验之前我们要先了解实验的原理，为了能够讲解清楚实验的原理，我将以问答的形式介绍本次实验的原理。</strong></p>

<h3 id="什么是rfid">什么是RFID？</h3>

<p>RFID，即射频识别（Radio Frequency Identification），是一种通过无线电波进行非接触式数据通信的技术，用于自动识别和追踪物体。RFID系统通常由三部分组成：<strong>标签（Tag）、读写器（Reader）和数据处理系统。</strong></p>

<blockquote>
  <ol>
    <li><strong>RFID标签（Tag）</strong></li>
  </ol>

  <p>RFID标签包含一个芯片和一个天线，芯片中存储有唯一标识信息。根据能量来源，RFID标签可以分为以下三类：</p>

  <ul>
    <li><strong>无源标签（Passive Tag）</strong>：没有电池，依靠读写器发出的电磁场供电，反射信号回读写器。</li>
    <li><strong>有源标签（Active Tag）</strong>：内置电池，能主动发送信号，读取距离较远。</li>
    <li><strong>半有源标签（Semi-passive Tag）</strong>：内置电池，但只在被激活时发送信号。</li>
  </ul>

  <p><strong>2. RFID读写器（Reader）</strong></p>

  <p>RFID读写器通过天线发出无线电波，与RFID标签通信，读取或写入标签中的数据。读写器根据使用频率和应用场景，可以分为低频（LF）、高频（HF）和超高频（UHF）等类型。</p>

  <p><strong>3. 数据处理系统</strong></p>

  <p>数据处理系统接收来自读写器的数据，对数据进行处理、存储和分析。这些数据通常通过网络传输到中央数据库或管理系统，用于进一步的应用和决策支持。</p>
</blockquote>

<h4 id="rfid工作原理">RFID工作原理</h4>

<p>RFID系统的工作过程通常包括以下步骤：</p>

<ol>
  <li><strong>读写器发射信号</strong>：RFID读写器通过天线发射无线电信号，形成一个电磁场。</li>
  <li><strong>标签接收信号</strong>：当RFID标签进入读写器的读写范围时，标签天线接收信号，激活标签内的芯片。</li>
  <li><strong>标签回应信号</strong>：无源标签通过反射读写器的信号回应数据，有源标签则使用自身电源主动发送数据。</li>
  <li><strong>读写器接收信号</strong>：读写器接收到来自标签的信号，将标签中的数据读取出来。</li>
  <li><strong>数据处理</strong>：读写器将读取到的数据传输到数据处理系统，进行存储、分析和应用。</li>
</ol>

<h4 id="rfid的应用">RFID的应用</h4>

<p>RFID技术具有识别距离远、多目标识别、抗干扰能力强、数据存储容量大等优点，被广泛应用于各个领域：</p>

<ul>
  <li><strong>物流与仓储管理</strong>：用于自动化库存管理、货物追踪、仓库盘点等，提高管理效率。</li>
  <li><strong>交通与自动收费</strong>：用于不停车收费系统（ETC）、公交卡、门禁系统等，方便快捷。</li>
  <li><strong>零售与防盗</strong>：用于商品防盗、库存管理和快速结算等，提升购物体验。</li>
  <li><strong>医疗与健康管理</strong>：用于病人身份识别、药品追踪、医疗设备管理等，确保安全和准确性。</li>
  <li><strong>农业与畜牧业</strong>：用于动物身份识别、养殖管理、环境监控等，提升管理效率和生产效益。</li>
</ul>

<h3 id="什么是uhf">什么是UHF？</h3>

<p>UHF（Ultra High Frequency，超高频）是一种射频识别（RFID）技术使用的频率范围，通常指频率范围在300 MHz到3 GHz之间。UHF RFID技术具有较长的读取距离和较快的数据传输速度，因此在许多应用中被广泛采用。</p>

<h4 id="uhf的特点">UHF的特点</h4>

<ol>
  <li><strong>频率范围</strong>：UHF频段通常在300 MHz到3 GHz之间。常见的UHF RFID系统工作频率为860-960 MHz。</li>
  <li><strong>读取距离</strong>：UHF RFID标签的读取距离较长，一般可以达到几米到十几米，甚至更远，具体距离取决于读写器的功率、天线设计和环境因素。</li>
  <li><strong>数据传输速度</strong>：UHF RFID系统的数据传输速度较快，适用于需要快速读取大量标签的应用场景。</li>
  <li><strong>抗干扰能力</strong>：UHF RFID系统采用多种技术减少干扰，如频率跳变、调制技术等，能够在复杂环境中稳定工作。</li>
  <li><strong>成本</strong>：UHF RFID标签的成本较低，适合大规模应用。</li>
</ol>

<h4 id="uhf-rfid的工作原理">UHF RFID的工作原理</h4>

<p>UHF RFID系统的工作过程如下：</p>

<ol>
  <li><strong>读写器发射射频信号</strong>：UHF RFID读写器通过天线发射射频信号。</li>
  <li><strong>标签接收信号</strong>：UHF RFID标签的天线接收射频信号，激活标签内的芯片。无源标签依靠接收到的信号供电，有源标签则使用内置电池供电。</li>
  <li><strong>标签回应信号</strong>：标签芯片处理信号后，将存储的数据通过反射或主动发射的方式回应给读写器。</li>
  <li><strong>读写器接收信号</strong>：读写器接收到标签发回的信号，并将数据解码，传输到数据处理系统。</li>
</ol>

<h4 id="uhf-rfid的应用">UHF RFID的应用</h4>

<p>由于UHF RFID技术的特点，它在多个领域中得到广泛应用：</p>

<ul>
  <li><strong>物流与供应链管理</strong>：UHF RFID用于自动化仓库管理、货物追踪、库存盘点等，提高供应链效率。</li>
  <li><strong>零售业</strong>：用于商品防盗、库存管理、快速结算等，提高购物体验和运营效率。</li>
  <li><strong>交通与自动收费</strong>：用于高速公路不停车收费系统（ETC）、停车场管理等，提高交通管理效率。</li>
  <li><strong>制造业</strong>：用于生产线自动化、设备管理、产品追踪等，提高生产效率和质量控制。</li>
  <li><strong>医疗与健康管理</strong>：用于病人身份识别、药品管理、医疗设备追踪等，提高医疗服务质量。</li>
  <li><strong>资产管理</strong>：用于公司资产的标识和追踪，提高资产利用率和管理效率。</li>
</ul>

<h2 id="实验步骤">实验步骤</h2>

<h3 id="1-盘存操作">1. 盘存操作</h3>

<ol>
  <li>
    <p><strong>发送盘存指令</strong></p>

    <ul>
      <li>在串口调试助手上发送以下盘存指令：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 01 00 00 00 20 00 02 00 01 90 01 00
</code></pre></div>        </div>
      </li>
      <li>首先返回命令成功数据：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 03 00 01 00 20 00 04 00 00 00 00 00 00
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>读取EPC码</strong></p>
    <ul>
      <li>将超高频标签置于读写器天线上方，返回的数据中包含EPC码：
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E2 00 41 27 88 14 01 01 22 70 29 DB
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<h3 id="2-停止盘存">2. 停止盘存</h3>

<ul>
  <li>发送停止盘存指令：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 01 00 00 00 20 00 02 00 00 00 00 00
</code></pre></div>    </div>
  </li>
  <li>成功返回数据：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 03 00 01 00 20 00 04 00 00 00 00 00 00 00 73 00 00 01 00 20 00 04 00 00 00 00 00 00
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-标签扇区读取操作">3. 标签扇区读取操作</h3>

<h4 id="31-读取epc码">3.1 读取EPC码</h4>

<ul>
  <li>扇区读取命令0x22可读取标签的四个分区数据。</li>
  <li>EPC码长度为96位（6个word），从地址0x02开始。</li>
  <li>发送读取EPC码的指令：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 01 00 00 00 22 00 0C 00 03 C9 00 00 00 00 00 00 01 00 02 00 06 00
</code></pre></div>    </div>
  </li>
  <li>返回的数据中最后的6个word即为EPC码。</li>
</ul>

<h4 id="32-读取tid码">3.2 读取TID码</h4>

<ul>
  <li>TID码长度为96位（6个word），从地址0x00开始。</li>
  <li>发送读取TID码的指令：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 01 00 00 00 22 00 0C 00 02 42 00 00 00 00 00 00 02 00 00 00 06 00
</code></pre></div>    </div>
  </li>
  <li>返回的数据中最后的6个word即为TID码。</li>
</ul>

<h3 id="4-标签扇区写操作">4. 标签扇区写操作</h3>

<ul>
  <li>在AITGM-UHF接口应用程序上，发送以下十六进制数据：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73 00 01 00 00 00 30 00 18 00 25 F0 00 00 00 00 00 00 01 00 02 00 06 00 E2 00 41 27 88 14 01 04 04 80 E1 6E
</code></pre></div>    </div>
  </li>
  <li>返回的数据中最后4个字节全为0表示执行成功。</li>
</ul>

<h3 id="5-使用python可视化">5. 使用Python可视化</h3>

<ul>
  <li>使用Python第三方库Serial读取串口接收到的传输信息。</li>
  <li>使用Tkinter创建可视化界面，显示发送与接收情况。</li>
</ul>

<h2 id="实验结果">实验结果</h2>

<h3 id="1-盘存操作-1">1 盘存操作</h3>

<p>将超高频标签置于读写器天线上方</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/4bc5c25af3f55b9f83888f7d60130cde_720.jpg" alt="4bc5c25af3f55b9f83888f7d60130cde_720" style="zoom:20%;" /></p>

<p>输入指令</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/08857fc37acfbcf33d7b30392792b2bb.png" alt="08857fc37acfbcf33d7b30392792b2bb" /></p>

<p>发送指令并返回结果</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/bf69dcad04b3ec4442657ad2ab65a250.png" alt="bf69dcad04b3ec4442657ad2ab65a250" /></p>

<h3 id="2-停止存盘">2 停止存盘</h3>

<p>输入停止存盘指令并发送，可以发现返回数据停止了。</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/df0f4c5b8edf2dc9a23cb0d4ff38ab2f.png" alt="tes" /></p>

<h3 id="3-标签扇区读取操作-1">3 标签扇区读取操作</h3>

<h4 id="31-读取epc码-1">3.1 读取EPC码</h4>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/d2fedcdf5d93ee63f9a576abbfb7b799.png" alt="d2fedcdf5d93ee63f9a576abbfb7b799" /></p>

<h4 id="32-读取tid码-1">3.2 读取TID码</h4>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/image-20240623113323828.png" alt="image-20240623113323828" /></p>

<h3 id="4-标签扇区写操作-1">4 标签扇区写操作</h3>

<p>返回末尾是 <code class="language-plaintext highlighter-rouge">00 00 </code>说明成功</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/7dc2dc643fffe71e52e6fe1480343514.png" alt="7dc2dc643fffe71e52e6fe1480343514" /></p>

<h3 id="5-读取epc码">5 读取EPC码</h3>

<p>可以发现已经写入成功</p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/f79fac753b4f70a55390372a7664cd9c.png" alt="f79fac753b4f70a55390372a7664cd9c" /></p>

<h3 id="6-实时盘存">6 实时盘存</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/dd8d4ce45950f5eeb2b794ebc514fc70.png" alt="dd8d4ce45950f5eeb2b794ebc514fc70" /></p>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/1dbc7af3ecb91f58e13fc055ae9c8fc4-9113392.png" alt="1dbc7af3ecb91f58e13fc055ae9c8fc4" /></p>

<h3 id="7-python可视化">7 Python可视化</h3>

<p><img src="/assets/%E5%AE%9E%E9%AA%8C3%20RFID-UHF%E8%B6%85%E9%AB%98%E9%A2%91%E5%AE%9E%E9%AA%8C.assets/cd2840b62ad1ce752e8bd9a31133a148.png" alt="cd2840b62ad1ce752e8bd9a31133a148" style="zoom: 50%;" /></p>

<h4 id="实验代码">实验代码</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">binascii</span>  <span class="c1"># 用于二进制和ASCII字符串的相互转换
</span><span class="kn">import</span> <span class="n">tkinter</span> <span class="k">as</span> <span class="n">tk</span>  <span class="c1"># Tkinter是Python的标准GUI库
</span><span class="kn">from</span> <span class="n">tkinter</span> <span class="kn">import</span> <span class="n">ttk</span>  <span class="c1"># ttk模块提供了若干新小部件
</span><span class="kn">import</span> <span class="n">serial</span>  <span class="c1"># pySerial库，用于串口通信
</span><span class="kn">import</span> <span class="n">threading</span>  <span class="c1"># 用于实现多线程
</span>
<span class="c1"># 一个简单的信息窗口类
</span><span class="k">class</span> <span class="nc">InformWindow</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">informStr</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Tk</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Information</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口标题
</span>        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">geometry</span><span class="p">(</span><span class="sh">"</span><span class="s">220x60</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口大小
</span>        <span class="n">label</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">informStr</span><span class="p">)</span>  <span class="c1"># 显示信息的标签
</span>        <span class="n">buttonOK</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonOK</span><span class="p">)</span>  <span class="c1"># 确定按钮
</span>        <span class="n">label</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">TOP</span><span class="p">)</span>
        <span class="n">buttonOK</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">BOTTOM</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">mainloop</span><span class="p">()</span>  <span class="c1"># 进入消息循环
</span>
    <span class="k">def</span> <span class="nf">processButtonOK</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">window</span><span class="p">.</span><span class="nf">destroy</span><span class="p">()</span>  <span class="c1"># 销毁窗口
</span>
<span class="c1"># 主GUI类
</span><span class="k">class</span> <span class="nc">mainGUI</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">window</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Tk</span><span class="p">()</span>
        <span class="n">window</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">GUI UART Tx/Rx Demo</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 设置窗口标题
</span>        <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>  <span class="c1"># 标识串口是否打开
</span>
        <span class="c1"># 包含COM信息和开始/停止按钮的框架
</span>        <span class="n">frame_COMinf</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frame_COMinf</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelCOM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">COMx: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># COM端口标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">COM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">COM1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># COM端口变量
</span>        <span class="n">ertryCOM</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Entry</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">COM</span><span class="p">)</span>  <span class="c1"># 输入COM端口
</span>        <span class="n">labelCOM</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">ertryCOM</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelBaudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Baudrate: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 波特率标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">IntVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="mi">115200</span><span class="p">)</span>  <span class="c1"># 波特率变量
</span>        <span class="n">ertryBaudrate</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Entry</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span><span class="p">)</span>  <span class="c1"># 输入波特率
</span>        <span class="n">labelBaudrate</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">ertryBaudrate</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelParity</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Parity: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 校验位标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Parity</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 校验位变量
</span>        <span class="n">comboParity</span> <span class="o">=</span> <span class="n">ttk</span><span class="p">.</span><span class="nc">Combobox</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Parity</span><span class="p">)</span>  <span class="c1"># 校验位下拉框
</span>        <span class="n">comboParity</span><span class="p">[</span><span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ODD</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EVEN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">MARK</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">SPACE</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">comboParity</span><span class="p">[</span><span class="sh">"</span><span class="s">state</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">readonly</span><span class="sh">"</span>
        <span class="n">labelParity</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">comboParity</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">labelStopbits</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Stopbits: </span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 停止位标签
</span>        <span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">StringVar</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 停止位变量
</span>        <span class="n">comboStopbits</span> <span class="o">=</span> <span class="n">ttk</span><span class="p">.</span><span class="nc">Combobox</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span> <span class="n">textvariable</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span><span class="p">)</span>  <span class="c1"># 停止位下拉框
</span>        <span class="n">comboStopbits</span><span class="p">[</span><span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1.5</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">comboStopbits</span><span class="p">[</span><span class="sh">"</span><span class="s">state</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">readonly</span><span class="sh">"</span>
        <span class="n">labelStopbits</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">comboStopbits</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">frame_COMinf</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Start</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonSS</span><span class="p">)</span>  <span class="c1"># 开始/停止按钮
</span>        <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">E</span><span class="p">)</span>
        
        <span class="c1"># 串口对象
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="nc">Serial</span><span class="p">()</span>
        
        <span class="c1"># 串口读取线程
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ReadUARTThread</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">ReadUART</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ReadUARTThread</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
        
        <span class="c1"># 接收数据的框架
</span>        <span class="n">frameRecv</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frameRecv</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelOutText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frameRecv</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">ReceivedData:</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 接收数据标签
</span>        <span class="n">labelOutText</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">W</span><span class="p">)</span>
        <span class="n">frameRecvSon</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">frameRecv</span><span class="p">)</span>
        <span class="n">frameRecvSon</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">scrollbarRecv</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Scrollbar</span><span class="p">(</span><span class="n">frameRecvSon</span><span class="p">)</span>
        <span class="n">scrollbarRecv</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">RIGHT</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="n">frameRecvSon</span><span class="p">,</span> <span class="n">wrap</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">WORD</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">yscrollcommand</span><span class="o">=</span><span class="n">scrollbarRecv</span><span class="p">.</span><span class="nb">set</span><span class="p">)</span>  <span class="c1"># 显示接收数据的文本框
</span>        <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span><span class="p">.</span><span class="nf">pack</span><span class="p">()</span>
        
        <span class="c1"># 发送数据的框架
</span>        <span class="n">frameTrans</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
        <span class="n">frameTrans</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">labelInText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Label</span><span class="p">(</span><span class="n">frameTrans</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">To Transmit Data:</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 发送数据标签
</span>        <span class="n">labelInText</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">W</span><span class="p">)</span>
        <span class="n">frameTransSon</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Frame</span><span class="p">(</span><span class="n">frameTrans</span><span class="p">)</span>
        <span class="n">frameTransSon</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">scrollbarTrans</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Scrollbar</span><span class="p">(</span><span class="n">frameTransSon</span><span class="p">)</span>
        <span class="n">scrollbarTrans</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">RIGHT</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">InputText</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Text</span><span class="p">(</span><span class="n">frameTransSon</span><span class="p">,</span> <span class="n">wrap</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">WORD</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">yscrollcommand</span><span class="o">=</span><span class="n">scrollbarTrans</span><span class="p">.</span><span class="nb">set</span><span class="p">)</span>  <span class="c1"># 输入发送数据的文本框
</span>        <span class="n">self</span><span class="p">.</span><span class="n">InputText</span><span class="p">.</span><span class="nf">pack</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">buttonSend</span> <span class="o">=</span> <span class="n">tk</span><span class="p">.</span><span class="nc">Button</span><span class="p">(</span><span class="n">frameTrans</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="sh">"</span><span class="s">Send</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">processButtonSend</span><span class="p">)</span>  <span class="c1"># 发送按钮
</span>        <span class="n">self</span><span class="p">.</span><span class="n">buttonSend</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">padx</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">pady</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">sticky</span><span class="o">=</span><span class="n">tk</span><span class="p">.</span><span class="n">E</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="nf">mainloop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">processButtonSS</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 关闭串口
</span>            <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Start</span><span class="sh">"</span>  <span class="c1"># 更改按钮文字
</span>            <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 重新启动串口
</span>            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">COM</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">baudrate</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Baudrate</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="n">strParity</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Parity</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">NONE</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_NONE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">ODD</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_ODD</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">EVEN</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_EVEN</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">MARK</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_MARK</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strParity</span> <span class="o">==</span> <span class="sh">"</span><span class="s">SPACE</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">parity</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">PARITY_SPACE</span>

            <span class="n">strStopbits</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">Stopbits</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_ONE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">1.5</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_ONE_POINT_FIVE</span>
            <span class="nf">elif </span><span class="p">(</span><span class="n">strStopbits</span> <span class="o">==</span> <span class="sh">"</span><span class="s">2</span><span class="sh">"</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">stopbits</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="n">STOPBITS_TWO</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">open</span><span class="p">()</span>  <span class="c1"># 打开串口
</span>            <span class="k">except</span><span class="p">:</span>
                <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Can</span><span class="sh">'</span><span class="s">t open </span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="n">port</span>
                <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>

            <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">isOpen</span><span class="p">()):</span>  <span class="c1"># 打开成功
</span>                <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Stop</span><span class="sh">"</span>  <span class="c1"># 更改按钮文字
</span>                <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">processButtonSend</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
            <span class="n">strToSend</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">InputText</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">tk</span><span class="p">.</span><span class="n">END</span><span class="p">)</span>
            <span class="n">bytesToSend</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">strToSend</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 将输入的十六进制字符串转换为字节
</span>            <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">bytesToSend</span><span class="p">)</span>  <span class="c1"># 发送数据
</span>            <span class="nf">print</span><span class="p">(</span><span class="n">bytesToSend</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">UART is not open</span><span class="sh">"</span>
            <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ReadUART</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">uartState</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">ch</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>  <span class="c1"># 读取一个字节
</span>                    <span class="nf">print</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="nf">b2a_hex</span><span class="p">(</span><span class="n">ch</span><span class="p">))</span>  <span class="c1"># 将字节转换为十六进制字符串
</span>                    <span class="nf">print</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">:]).</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="se">\\</span><span class="s">x</span><span class="sh">'</span><span class="p">))</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">OutputText</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">tk</span><span class="p">.</span><span class="n">END</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="se">\'\\</span><span class="s">x</span><span class="sh">'</span><span class="p">))</span>  <span class="c1"># 在文本框中显示接收到的数据
</span>                <span class="k">except</span><span class="p">:</span>
                    <span class="n">informStr</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Error reading UART</span><span class="sh">"</span>
                    <span class="nc">InformWindow</span><span class="p">(</span><span class="n">informStr</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 关闭串口
</span>                    <span class="n">self</span><span class="p">.</span><span class="n">buttonSS</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Start</span><span class="sh">"</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">uartState</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c1"># 启动主GUI
</span><span class="nf">mainGUI</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="代码分析">代码分析</h4>

<ol>
  <li>导入必要的库</li>
</ol>

<blockquote>
  <ul>
    <li><strong>binascii</strong>: 用于二进制和ASCII字符串的相互转换。</li>
    <li><strong>tkinter</strong>和<strong>ttk</strong>: 用于创建图形用户界面。</li>
    <li><strong>serial</strong>: pySerial库，用于串口通信。</li>
    <li><strong>threading</strong>: 用于实现多线程。</li>
  </ul>
</blockquote>

<ol>
  <li>信息窗口类 <code class="language-plaintext highlighter-rouge">InformWindow</code></li>
</ol>

<p>这个类用于创建一个简单的信息窗口，用于显示错误或状态信息。窗口包含一个标签和一个“OK”按钮，点击按钮后窗口关闭。</p>

<ol>
  <li>主GUI类 <code class="language-plaintext highlighter-rouge">mainGUI</code></li>
</ol>

<blockquote>
  <ul>
    <li><strong>初始化GUI窗口</strong>: 创建主窗口并设置标题。</li>
    <li><strong>串口信息框架</strong>: 包含COM端口、波特率、校验位和停止位的输入字段，以及一个开始/停止按钮。用户可以在这里输入串口的相关信息并启动或停止串口通信。</li>
    <li><strong>串口对象</strong>: 创建一个串口对象<code class="language-plaintext highlighter-rouge">self.ser</code>，用于串口通信。</li>
    <li><strong>串口读取线程</strong>: 创建并启动一个线程<code class="language-plaintext highlighter-rouge">self.ReadUARTThread</code>，用于后台读取串口数据。</li>
    <li><strong>接收数据框架</strong>: 一个文本框，用于显示从串口接收到的数据。包含一个滚动条，可以滚动查看长数据。</li>
    <li><strong>发送数据框架</strong>: 一个文本框，用于输入需要通过串口发送的数据，以及一个发送按钮。</li>
  </ul>
</blockquote>

<ol>
  <li><code class="language-plaintext highlighter-rouge">processButtonSS</code>方法</li>
</ol>

<ul>
  <li>处理开始/停止按钮的点击事件：
    <ul>
      <li>如果串口已打开，则关闭串口，并将按钮文字改为“Start”。</li>
      <li>如果串口未打开，则根据用户输入的串口配置信息，配置并尝试打开串口。打开成功后，将按钮文字改为“Stop”。</li>
    </ul>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">processButtonSend</code>方法</li>
</ol>

<ul>
  <li>处理发送按钮的点击事件:
    <ul>
      <li>如果串口已打开，则读取用户输入的数据，将其转换为字节并发送到串口。</li>
      <li>如果串口未打开，则弹出信息窗口提示用户串口未打开。</li>
    </ul>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ReadUART</code>方法</li>
</ol>

<ul>
  <li><strong>后台线程方法</strong>: 不断检查串口是否已打开，如果打开，则读取串口数据，将数据转换为十六进制字符串并显示在接收数据框架的文本框中。</li>
</ul>

<ol>
  <li>启动主GUI</li>
</ol>

<ul>
  <li>创建并启动<code class="language-plaintext highlighter-rouge">mainGUI</code>对象，进入Tkinter主事件循环。</li>
</ul>

<p><strong>总体功能</strong></p>

<p>创建了一个GUI界面，用于通过串口发送和接收数据。用户可以输入串口的相关配置信息（COM端口、波特率、校验位和停止位），启动或停止串口通信，发送和接收数据，并在界面上实时查看接收到的数据。通过多线程实现了后台读取串口数据，保证界面响应不被阻塞。</p>

<h2 id="实验总结与感悟">实验总结与感悟</h2>

<p>在这次UHF超高频通信实验中，我们不仅仅是按照步骤进行操作，更是一次深刻的学习和探索之旅。这个实验让我对UHF超高频通信技术有了更深刻的理解，也让我感受到团队合作和动手实践的无穷魅力。</p>

<p>实验开始，我们怀着好奇和期待，通过发送盘存指令，成功读取到了标签的EPC码。这一刻，看到屏幕上跳动的数据，我们兴奋不已。这不仅仅是对硬件设备的成功操作，更是对我们理论知识的一次有力验证。紧接着，我们发送停止盘存指令，读写器按照我们的指令停止了操作，这种掌控感让我们对技术的敬畏和热爱又增加了几分。</p>

<p>在接下来的标签扇区读取和写入操作中，我们遇到了一些小挑战，但通过团队的智慧和不懈努力，我们逐一攻克。成功读取EPC码和TID码，并对EPC码进行了修改，看到实验数据准确无误地返回，内心的成就感难以言表。这不仅是实验的成功，更是我们不断学习和探索的成果。</p>

<p>通过这次实验，我深刻体会到了理论与实践相结合的重要性。书本上的知识在实际操作中变得鲜活起来，每一次成功的操作都是对我们学习成果的肯定。团队合作在这次实验中发挥了至关重要的作用，大家一起讨论、解决问题，在合作中碰撞出智慧的火花。这种合作精神和默契也将成为我们未来学习和工作的宝贵财富。</p>

<p>这次实验还极大地提升了我的编程技能和实际操作能力。通过编写和调试Python代码，我们实现了串口数据的实时发送、接收和显示，这不仅增强了我们的动手能力，也让我们更加熟悉了Python编程和Tkinter图形界面的使用。在代码调试过程中，每一个问题的解决都让我对编程有了更多的信心和热爱。</p>

<p>这次UHF超高频通信实验，不仅让我深入了解了这一前沿技术，还让我感受到物联网技术在现代生活中的巨大潜力和广阔前景。通过这次实验，我更加坚定了继续深入学习物联网技术的信心和决心。实验中的每一次成功和挑战，都将成为我学习道路上的宝贵经验和动力。</p>

<p>这次实验经历，不仅是对知识的学习和技术的掌握，更是对自己能力的提升和信心的培养。它将激励我在未来的学习和研究中，不断探索和创新，为物联网的发展贡献自己的力量。感谢这次实验，让我更加热爱这个充满无限可能的领域。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="物联网" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">编译原理 第四次实验 自下而上语法分析2（LR分析法）</title><link href="http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902-LR%E5%88%86%E6%9E%90%E6%B3%95.html" rel="alternate" type="text/html" title="编译原理 第四次实验 自下而上语法分析2（LR分析法）" /><published>2024-06-13T00:00:00+08:00</published><updated>2024-06-13T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89</id><content type="html" xml:base="http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902-LR%E5%88%86%E6%9E%90%E6%B3%95.html"><![CDATA[<p><!---more--></p>
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1-538-png_6_0_0_188_115_242_92_893.024_1263-1400-0-255-1400.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616111344139.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《编译原理实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">第四次实验 LR分析法</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">刘善梅</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 6月 13 日</p>
</div>

<p>[TOC]</p>

<h1 id="编译原理-第四次实验-自下而上语法分析2lr分析法">编译原理 第四次实验 自下而上语法分析2（LR分析法）</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>能采用<strong>LR分析法</strong>对一个算术表达式<strong>(b+9)*a</strong>做自下而上的语法分析；</li>
  <li>可自行设计一个LR文法，能识别含有句子(b+9)*a的语言；</li>
  <li>也可基于PL/0语言的文法(完整文法参见本文档最后的附录)来做，若基于PL/0语言文法，需重点关注以下几条文法的EBNF，若不习惯看文法的巴科斯范式EBNF,可先将文法改写成常规的产生式形式P75。</li>
</ul>

<blockquote>
  <p><strong>分析对象〈算术表达式〉的EBNF定义如下：</strong></p>

  <表达式> ::= [+|-]<项>{<加法运算符> <项>}

<项> ::= <因子>{<乘法运算符> <因子>}

<因子> ::= <标识符>|<无符号整数>| ‘(’<表达式>‘)’

<加法运算符> ::= +|-

<乘法运算符> ::= *|/

<关系运算符> ::= =|#|&lt;|&lt;=|&gt;|&gt;=

 <标识符> ::=<字母>{<字母>|<数字>}

<无符号整数> ::= <数字>{<数字>}

<字母> ::= a|b|…|X|Y|Z

<数字> ::= 0|1|…|8|9
</数字></字母></数字></数字></无符号整数></数字></字母></字母></标识符></关系运算符></乘法运算符></加法运算符></表达式></无符号整数></标识符></因子></因子></乘法运算符></因子></项></项></加法运算符></项></表达式>
</blockquote>

<h2 id="实验要求">实验要求</h2>

<blockquote>
  <ul>
    <li><strong>编程基础较扎实的同学，建议用程序构造文法的LR(0)项目集规范族（构造算法见教材P107）；判断文法是LR(0)、SLR和LR(1)中的哪一种，然后用程序构造LR分析表（LR(0)分析表构造算法P109;SLR分析表构造算法P112;LR(1)构造算法P115）</strong>；</li>
    <li>编程基础非常非常薄弱的同学，可以人工求解LR(0)项目集规范族，判断文法是LR(0)、SLR和LR(1)中的哪一种，构造LR分析表，然后直接在程序中给出手工设计好的LR分析表。</li>
    <li>编程基础尚可的同学，可根据自身情况编程构造文法的LR(0)项目集规范族、构造LR分析表（书上都有算法，建议同学们尽量用程序实现）</li>
  </ul>
</blockquote>

<h3 id="实验完成程度">实验完成程度</h3>

<p><strong>由于本次实验给出的样例文法直接使用LR(0)分析会产生冲突不能正确判断句子，所以在LR(0)的基础上实现了SLR(1)分析，最终成功解决了LR(0)的分析。</strong></p>

<table>
  <thead>
    <tr>
      <th>实现的内容</th>
      <th>实现的方式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>实现文法SLR(1)</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解闭包</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解转移goto</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>构建项目集规范族</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解FIRST和FOLLOW集合</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>构建分析表</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>语法分析过程</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>是否仅支持PL/0文法</td>
      <td>否、可以输出其他文法和句子进行判断</td>
    </tr>
  </tbody>
</table>

<h2 id="设计思想">设计思想</h2>

<h3 id="1-文法扩展与预处理">1. 文法扩展与预处理</h3>

<h4 id="11-文法表示">1.1 文法表示</h4>

<p>文法由以下部分组成：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">q0</code>：起始符号。</li>
  <li><code class="language-plaintext highlighter-rouge">vn</code>：非终结符集合。</li>
  <li><code class="language-plaintext highlighter-rouge">vt</code>：终结符集合。</li>
  <li><code class="language-plaintext highlighter-rouge">prods</code>：产生式集合，每个产生式表示为 <code class="language-plaintext highlighter-rouge">(head, body)</code> 的形式。</li>
</ul>

<h4 id="12-增广文法">1.2 增广文法</h4>

<p>为简化分析过程，我们引入一个新的开始符号 <code class="language-plaintext highlighter-rouge">FAKE_S</code>，并添加相应的产生式。同时，增加终结符 <code class="language-plaintext highlighter-rouge">EOF</code> 作为输入结束符号。</p>

<h4 id="13-生成初始项目">1.3 生成初始项目</h4>

<p>初始项目集从新引入的开始符号的产生式开始，表示项目 <code class="language-plaintext highlighter-rouge">(0, 0)</code>，其中 <code class="language-plaintext highlighter-rouge">0</code> 表示产生式索引，<code class="language-plaintext highlighter-rouge">0</code> 表示项目点位置。</p>

<h3 id="2-闭包与转移函数">2. 闭包与转移函数</h3>

<h4 id="21-闭包函数-closure">2.1 闭包函数 (closure)</h4>

<p>对一个项目集进行扩展，包含所有可能的后续项目。</p>

<ul>
  <li>从当前项目集中的每个项目出发，找到点后面的符号。</li>
  <li>对于每个非终结符，将其所有产生式作为新项目加入集合，直到不再有新的项目加入。</li>
</ul>

<h4 id="22-转移函数-goto">2.2 转移函数 (goto)</h4>

<p>计算从一个项目集经过某个符号转移后到达的下一个项目集。</p>

<ul>
  <li>从当前项目集中选取点后符号为给定符号的项目，将点后移一位。</li>
  <li>对这些新项目集合应用闭包操作，得到下一个项目集。</li>
</ul>

<h3 id="3-构建项目集规范族">3. 构建项目集规范族</h3>

<h4 id="31-项目集规范族">3.1 项目集规范族</h4>

<p>通过不断应用转移函数，从初始项目集出发，构建整个项目集规范族。</p>

<ul>
  <li>使用集合保存所有已处理和未处理的项目集。</li>
  <li>对每个未处理的项目集，计算其通过所有符号的转移，得到新的项目集，直到所有项目集都处理完毕。</li>
</ul>

<h3 id="4-first和follow集合">4. FIRST和FOLLOW集合</h3>

<h4 id="41-first集合">4.1 FIRST集合</h4>

<p>计算每个非终结符和终结符的FIRST集合。</p>

<ul>
  <li>对终结符，其FIRST集合是其本身。</li>
  <li>对非终结符，通过递归计算其产生式右部的FIRST集合，考虑空字 <code class="language-plaintext highlighter-rouge">LAMBDA</code>。</li>
</ul>

<h4 id="42-follow集合">4.2 FOLLOW集合</h4>

<p>计算每个非终结符的FOLLOW集合，用于规约时确定接下来的符号。</p>

<ul>
  <li>起始符号的FOLLOW集合包含 <code class="language-plaintext highlighter-rouge">EOF</code>。</li>
  <li>对每个产生式的右部，更新后续符号的FOLLOW集合，直到集合不再变化。</li>
</ul>

<h3 id="5-构建分析表">5. 构建分析表</h3>

<h4 id="51-动作表-action_table">5.1 动作表 (action_table)</h4>

<p>用于存储移入、规约、接受等操作。</p>

<ul>
  <li>对于每个项目集中的项目，如果是移入项目，添加移入操作。</li>
  <li>如果是规约项目，添加规约操作。</li>
  <li>特殊处理接受项目，添加接受操作。</li>
</ul>

<h4 id="52-goto表-goto_table">5.2 Goto表 (goto_table)</h4>

<p>用于存储状态间的转移关系。</p>

<ul>
  <li>对于每个项目集和每个符号，记录其转移后的项目集。</li>
</ul>

<h3 id="6-语法分析过程">6. 语法分析过程</h3>

<h4 id="61-分析过程">6.1 分析过程</h4>

<p>通过移入和规约操作，对输入的令牌序列进行分析，输出分析结果。</p>

<ul>
  <li>使用栈维护当前状态。</li>
  <li>根据当前状态和输入符号，从动作表中查找相应操作。
    <ul>
      <li>移入操作：将符号移入栈，并转移到下一个状态。</li>
      <li>规约操作：根据产生式进行规约，弹出符号并转移到下一个状态。</li>
      <li>接受操作：成功匹配输入序列，结束分析。</li>
      <li>错误处理：遇到无法处理的输入，报告错误。</li>
    </ul>
  </li>
</ul>

<h2 id="算法流程">算法流程</h2>

<p>SLR(1)分析程序为了实现对输入令牌序列的有效解析，能够判断输入是否符合给定的文法规则。</p>

<p>整个流程可以分为六步</p>

<ol>
  <li>文法扩展</li>
  <li>闭包与转移函数</li>
  <li>项目集规范族构建</li>
  <li>FIRST和FOLLOW集合计算</li>
  <li>分析表构建</li>
  <li>语法分析过程</li>
</ol>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/Untitled%20diagram-2024-06-18-161132.png" alt="Untitled diagram-2024-06-18-161132" style="zoom:33%;" /></p>

<h3 id="1-文法扩展与预处理-1">1. 文法扩展与预处理</h3>

<ol>
  <li>
    <p><strong>扩展文法</strong>：</p>

    <ul>
      <li>增加一个新的开始符号 <code class="language-plaintext highlighter-rouge">FAKE_S</code> 和相应的产生式 <code class="language-plaintext highlighter-rouge">FAKE_S -&gt; 原始起始符号</code>。</li>
      <li>在终结符集合中添加特殊符号 <code class="language-plaintext highlighter-rouge">EOF</code> 表示输入结束。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">prev_q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">q0</span> <span class="o">=</span> <span class="n">FAKE_S</span>
     <span class="n">vn</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q0</span><span class="p">)</span>
     <span class="n">vt</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
     <span class="n">prods</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="p">[</span><span class="n">prev_q0</span><span class="p">]))</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="2-闭包与转移函数-1">2. 闭包与转移函数</h3>
<ol>
  <li><strong>闭包函数 (closure)</strong>：
    <ul>
      <li>对给定项目集，添加所有可能的后续项目，直到不再有新的项目加入为止。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">clo</span> <span class="o">=</span> <span class="n">items</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="n">new_items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
         <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">clo</span><span class="p">:</span>
             <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="n">stacktop</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">stacktop</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
                 <span class="k">continue</span>
             <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">stacktop</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                 <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                 <span class="n">new_items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">new_items</span> <span class="o">&lt;=</span> <span class="n">clo</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">clo</span> <span class="o">=</span> <span class="n">clo</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_items</span><span class="p">)</span>
     <span class="k">return</span> <span class="nf">frozenset</span><span class="p">(</span><span class="n">clo</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>转移函数 (goto)</strong>：
    <ul>
      <li>计算从一个项目集经过某个符号转移后到达的下一个项目集。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
         <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="n">stacktop</span><span class="p">:</span>
             <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
             <span class="n">items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>
     <span class="k">return</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="3-构建项目集规范族-1">3. 构建项目集规范族</h3>
<ol>
  <li><strong>项目集规范族</strong>：
    <ul>
      <li>从初始项目集开始，反复应用转移函数，构建整个项目集规范族。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">grammar_symbols</span> <span class="o">=</span> <span class="n">vn</span> <span class="o">+</span> <span class="n">vt</span>
     <span class="n">goto_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">q0_item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
     <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([</span><span class="n">q0_item</span><span class="p">]),</span> <span class="n">grammar</span><span class="p">)</span>
     <span class="n">cc</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">cc0</span><span class="p">])</span>
     <span class="n">done</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="n">new_ccs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
         <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
             <span class="k">if</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                 <span class="k">continue</span>
             <span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">grammar_symbols</span><span class="p">:</span>
                 <span class="n">cc_next</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
                 <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">:</span>
                     <span class="n">new_ccs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span>
                     <span class="n">goto_table</span><span class="p">[(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)]</span> <span class="o">=</span> <span class="n">cc_next</span>
             <span class="n">done</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_i</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">new_ccs</span> <span class="o">&lt;=</span> <span class="n">cc</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">cc</span> <span class="o">=</span> <span class="n">cc</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_ccs</span><span class="p">)</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="4-first和follow集合-1">4. FIRST和FOLLOW集合</h3>
<ol>
  <li><strong>计算FIRST集合</strong>：
    <ul>
      <li>对每个非终结符和终结符计算其FIRST集合。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">first_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
         <span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">])</span>
     <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
         <span class="n">first_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">while</span> <span class="n">first_table</span> <span class="o">!=</span> <span class="n">first_table_snapshot</span><span class="p">:</span>
         <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">first_table</span><span class="p">)</span>
         <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
             <span class="n">rhs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
             <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                 <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">body</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]:</span>
                     <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                         <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
                     <span class="k">else</span><span class="p">:</span>
                         <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
             <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">first_table</span>
</code></pre></div>    </div>
  </li>
  <li><strong>计算FOLLOW集合</strong>：
    <ul>
      <li>对每个非终结符计算其FOLLOW集合，用于在规约时确定接下来的符号。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">follow_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
         <span class="n">follow_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="n">follow_table</span><span class="p">[</span><span class="n">q0</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">])</span>
     <span class="k">while</span> <span class="n">follow_table</span> <span class="o">!=</span> <span class="n">follow_table_snapshot</span><span class="p">:</span>
         <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">follow_table</span><span class="p">)</span>
         <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
             <span class="n">trailer</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span>
             <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                 <span class="k">if</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
                     <span class="n">trailer</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">b</span><span class="p">])</span>
                 <span class="k">else</span><span class="p">:</span>
                     <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">trailer</span><span class="p">)</span>
                     <span class="k">if</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]:</span>
                         <span class="n">trailer</span> <span class="o">=</span> <span class="n">trailer</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
                     <span class="k">else</span><span class="p">:</span>
                         <span class="n">trailer</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
     <span class="k">return</span> <span class="n">follow_table</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="5-构建分析表-1">5. 构建分析表</h3>
<ol>
  <li><strong>构建动作表 (action_table)</strong> 和 <strong>Goto表 (goto_table)</strong>：
    <ul>
      <li>动作表用于存储移入、规约、接受等操作。</li>
      <li>Goto表用于存储状态间的转移。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">action_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
         <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
             <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="ow">or</span> <span class="n">stacktop</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">):</span>
                 <span class="k">continue</span>
             <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="n">FAKE_S</span><span class="p">:</span>
                 <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">EOF</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">ACCEPT</span><span class="p">,))</span>
             <span class="k">elif</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                 <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]:</span>
                     <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">REDUCE</span><span class="p">,</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
             <span class="k">else</span><span class="p">:</span>
                 <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">))</span>
                 <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">SHIFT</span><span class="p">,</span> <span class="n">next_state</span><span class="p">))</span>
     <span class="k">return</span> <span class="n">action_table</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="6-语法分析过程-1">6. 语法分析过程</h3>
<ol>
  <li><strong>分析输入串</strong>：
    <ul>
      <li>使用栈维护当前状态，根据当前状态和输入符号，从动作表中查找相应操作，并执行移入、规约或接受操作。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">):</span>
     <span class="n">grammar</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
     <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
     <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">cc0</span><span class="p">]</span>
     <span class="n">token_index</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="n">ok</span> <span class="o">=</span> <span class="bp">True</span>
     <span class="nb">iter</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="nb">iter</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="n">token</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">token_index</span><span class="p">]</span>
         <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
         <span class="n">actions</span> <span class="o">=</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
         <span class="k">if</span> <span class="n">actions</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
             <span class="nf">return </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">No actions</span><span class="sh">"</span><span class="p">)</span>
         <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
             <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Conflicts in the action table</span><span class="sh">"</span><span class="p">)</span>
         <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
         <span class="n">action_str</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
         <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
             <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span><span class="p">:</span>
                 <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
             <span class="k">else</span><span class="p">:</span>
                 <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
             <span class="n">next_state</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
             <span class="n">token_index</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
             <span class="n">prod_index</span><span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">prods</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
             <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
             <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)):</span>
                 <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
             <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">head</span><span class="p">),</span> <span class="sh">"</span><span class="s">DEFAULT2</span><span class="sh">"</span><span class="p">)</span>
             <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
         <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">ok</span> 									<span class="o">=</span> <span class="bp">False</span>
             <span class="k">break</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">ok</span><span class="p">,)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="源程序">源程序</h2>

<blockquote>
  <p>代码分为两个程序：</p>

  <ol>
    <li>主程序</li>
    <li>测试程序（单元测试）（由于程序的功能比较复杂，在写的过程就需要进行测试，一部分一部分的测试，这样汇总起来才不会有什么bug难找到。）</li>
  </ol>
</blockquote>

<ol>
  <li>主程序</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>

<span class="c1"># 定义一些常量
</span><span class="n">FAKE_S</span> <span class="o">=</span> <span class="sh">"</span><span class="s">FAKE_S</span><span class="sh">"</span>  <span class="c1"># 假的开始符号
</span><span class="n">EOF</span> <span class="o">=</span> <span class="sh">"</span><span class="s">EOF</span><span class="sh">"</span>  <span class="c1"># 输入结束符
</span><span class="n">SHIFT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span>  <span class="c1"># 移进操作
</span><span class="n">REDUCE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">reduce</span><span class="sh">"</span>  <span class="c1"># 规约操作
</span><span class="n">ACCEPT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">accept</span><span class="sh">"</span>  <span class="c1"># 接受操作
</span><span class="n">LAMBDA</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lambda</span><span class="sh">"</span>  <span class="c1"># 空字
</span>
<span class="c1"># 增广文法：为文法增加一个假的开始符号和结束符
</span><span class="k">def</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">prev_q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">q0</span> <span class="o">=</span> <span class="n">FAKE_S</span>
    <span class="n">vn</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q0</span><span class="p">)</span>  <span class="c1"># 将假开始符号加入非终结符集合
</span>    <span class="n">vt</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>  <span class="c1"># 将结束符加入终结符集合
</span>    <span class="n">prods</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="p">[</span><span class="n">prev_q0</span><span class="p">]))</span>  <span class="c1"># 增加新的产生式：FAKE_S -&gt; 原始起始符号
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>

<span class="c1"># 构建规范LR(1)项目集族
</span><span class="k">def</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">grammar_symbols</span> <span class="o">=</span> <span class="n">vn</span> <span class="o">+</span> <span class="n">vt</span>  <span class="c1"># 文法符号 = 非终结符 + 终结符
</span>    <span class="n">goto_table</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="n">q0_item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 初始项目
</span>    <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([</span><span class="n">q0_item</span><span class="p">]),</span> <span class="n">grammar</span><span class="p">)</span>  <span class="c1"># 求初始项目的闭包
</span>    <span class="n">cc</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">cc0</span><span class="p">])</span>
    <span class="n">done</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>  <span class="c1"># 已处理的项目集
</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_ccs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
        <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">grammar_symbols</span><span class="p">:</span>
                <span class="n">cc_next</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>  <span class="c1"># 计算转移
</span>                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">:</span>
                    <span class="n">new_ccs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span>
                    <span class="n">goto_table</span><span class="p">[(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)]</span> <span class="o">=</span> <span class="n">cc_next</span>
            <span class="n">done</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">new_ccs</span> <span class="o">&lt;=</span> <span class="n">cc</span><span class="p">:</span>  <span class="c1"># 如果没有新的项目集，跳出循环
</span>            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">cc</span> <span class="o">=</span> <span class="n">cc</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_ccs</span><span class="p">)</span>  <span class="c1"># 合并新的项目集
</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">)</span>

<span class="c1"># 闭包函数：对一个项目集进行闭包操作
</span><span class="k">def</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">clo</span> <span class="o">=</span> <span class="n">items</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">clo</span><span class="p">:</span>
            <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stacktop</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">stacktop</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">stacktop</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">new_items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">new_items</span> <span class="o">&lt;=</span> <span class="n">clo</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">clo</span> <span class="o">=</span> <span class="n">clo</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_items</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">frozenset</span><span class="p">(</span><span class="n">clo</span><span class="p">)</span>

<span class="c1"># 转移函数：计算从一个项目集经过某个符号转移后得到的项目集
</span><span class="k">def</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
        <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="n">stacktop</span><span class="p">:</span>
            <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

<span class="c1"># 构建分析表
</span><span class="k">def</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">action_table</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
            <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="ow">or</span> <span class="n">stacktop</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="n">FAKE_S</span><span class="p">:</span>
                <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">EOF</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">ACCEPT</span><span class="p">,))</span>
            <span class="k">elif</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]:</span>
                    <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">REDUCE</span><span class="p">,</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">))</span>
                <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">SHIFT</span><span class="p">,</span> <span class="n">next_state</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">action_table</span>

<span class="c1"># 计算FIRST集合
</span><span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">first_table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
        <span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
        <span class="n">first_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="k">while</span> <span class="n">first_table</span> <span class="o">!=</span> <span class="n">first_table_snapshot</span><span class="p">:</span>
        <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">first_table</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
            <span class="n">rhs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">body</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]:</span>
                    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                        <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>

            <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">first_table</span>

<span class="c1"># 计算FOLLOW集合
</span><span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">follow_table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
        <span class="n">follow_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="n">follow_table</span><span class="p">[</span><span class="n">q0</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">follow_table</span> <span class="o">!=</span> <span class="n">follow_table_snapshot</span><span class="p">:</span>
        <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">follow_table</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
            <span class="n">trailer</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
                    <span class="n">trailer</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">b</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">trailer</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]:</span>
                        <span class="n">trailer</span> <span class="o">=</span> <span class="n">trailer</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">trailer</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">follow_table</span>

<span class="c1"># 解析输入串
</span><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">PARSE: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">tokens</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">grammar</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
    <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
    <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">cc0</span><span class="p">]</span>
    <span class="n">token_index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ok</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="nb">iter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">============</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ITER: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nb">iter</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">============</span><span class="sh">"</span><span class="p">)</span>
        <span class="nb">iter</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">)</span>

        <span class="n">token</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">token_index</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Token: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

        <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">actions</span> <span class="o">=</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">if</span> <span class="n">actions</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">No actions</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Conflicts in the action table</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">action_str</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Action: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action_str</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
            <span class="n">next_state</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
            <span class="n">token_index</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
            <span class="n">prod_index</span><span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">prods</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
            <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)):</span>
                <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
            <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">head</span><span class="p">),</span> <span class="sh">"</span><span class="s">DEFAULT2</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">reducing by {0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">))</span>

        <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
            <span class="n">ok</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">break</span>

    <span class="nf">return </span><span class="p">(</span><span class="n">ok</span><span class="p">,)</span>

<span class="c1">##################
# 辅助函数
###################
</span>
<span class="c1"># 获取项目的栈顶符号
</span><span class="k">def</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="n">stacktop_index</span><span class="p">)</span> <span class="o">=</span> <span class="n">item</span>
    <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">stacktop_index</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
        <span class="c1"># 完成的项目
</span>        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">body</span><span class="p">[</span><span class="n">stacktop_index</span><span class="p">]</span>

<span class="c1"># 获取项目对应的产生式
</span><span class="k">def</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>

<span class="c1"># 判断项目是否完成
</span><span class="k">def</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="o">==</span> <span class="bp">None</span>

<span class="c1"># 根据产生式头部获取产生式列表
</span><span class="k">def</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">desired_head</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">desired_head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">current_head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">prods</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">current_head</span> <span class="o">!=</span> <span class="n">desired_head</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">current_head</span><span class="p">,</span> <span class="n">body</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="c1"># 打印goto表
</span><span class="k">def</span> <span class="nf">print_goto_table</span><span class="p">(</span><span class="n">goto_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">GOTO</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">next_state</span> <span class="ow">in</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">iteritems</span><span class="p">():</span>
        <span class="n">state</span><span class="p">,</span> <span class="n">symbol</span> <span class="o">=</span> <span class="n">key</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0:&lt;10} {1:&lt;10} -&gt; {2}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">),</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">next_state</span><span class="p">)))</span>

<span class="c1"># 打印action表
</span><span class="k">def</span> <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ACTION</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">actions</span> <span class="ow">in</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">state</span><span class="p">,</span> <span class="n">symbol</span> <span class="o">=</span> <span class="n">key</span>
        <span class="n">action_str</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">action</span> <span class="ow">in</span> <span class="n">actions</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">ACCEPT</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">Reduce {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">prod_to_string</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]])))</span>
            <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">Shift {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>

        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0:&lt;10} {1:&lt;10} -&gt; {2}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">),</span> <span class="n">symbol</span><span class="p">,</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">action_str</span><span class="p">)))</span>

<span class="c1"># 打印栈内容
</span><span class="k">def</span> <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">index</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">if</span> <span class="n">index</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STACK: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="n">stack</span><span class="p">))))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=======</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="n">stack</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">)))</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=======</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 将产生式转换为字符串
</span><span class="k">def</span> <span class="nf">prod_to_string</span><span class="p">(</span><span class="n">prod</span><span class="p">):</span>
    <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">prod</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>

<span class="c1"># 主函数
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">prods</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">]</span>
    <span class="n">q0</span> <span class="o">=</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span>
    <span class="n">vn</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">vt</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">line</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">""</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>
            <span class="k">break</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="nb">type</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">line</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)]</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lparen</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">rparen</span><span class="sh">"</span> <span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">ident</span><span class="sh">"</span> <span class="ow">or</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">number</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">plus</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">times</span><span class="sh">"</span> <span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span> <span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[(</span><span class="n">element</span><span class="p">,)</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span> <span class="o">+</span> <span class="p">[(</span><span class="n">EOF</span><span class="p">,)]</span>
    <span class="n">grammar</span> <span class="o">=</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>
    <span class="nf">if</span><span class="p">(</span><span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Yes,it is correct.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No,it is wrong.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>测试程序</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">unittest</span>
<span class="kn">from</span> <span class="n">main</span> <span class="kn">import</span> <span class="o">*</span>


<span class="n">prods</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
<span class="p">]</span>
<span class="n">q0</span> <span class="o">=</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span>
<span class="n">vn</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]</span>
<span class="n">vt</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span>

<span class="n">grammar</span> <span class="o">=</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test_grammar_with_fake_start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">grammar_ext</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>

        <span class="n">expected</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">FAKE_S</span><span class="p">,</span>
            <span class="p">[</span><span class="n">FAKE_S</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">EOF</span><span class="p">],</span>
            <span class="p">[</span>
                <span class="p">(</span><span class="n">FAKE_S</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
            <span class="p">]</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_closure</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">expected</span> <span class="o">=</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_goto</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">cc_i</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">expected</span> <span class="o">=</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
        <span class="p">])</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_first</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>

    <span class="k">def</span> <span class="nf">test_follow</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>

    <span class="k">def</span> <span class="nf">test_parse</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,),</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>

        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>

        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>




    <span class="k">def</span> <span class="nf">test_canonical_collection</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">q0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">cc</span><span class="p">,</span>
            <span class="nf">set</span><span class="p">([</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
            <span class="p">])</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">goto_table</span><span class="p">,</span>
            <span class="p">{</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span>
                        <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">}</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_build_action_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">grammar_ext</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">)</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">)</span>
        <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
        <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar_ext</span><span class="p">)</span>

        <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar_ext</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">action_table</span><span class="p">,</span>
            <span class="p">{</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span>
                <span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">accept</span><span class="sh">'</span><span class="p">,</span> <span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span>
                        <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span>
                        <span class="mi">3</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span>
                <span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">}</span>
        <span class="p">)</span>



<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">unittest</span><span class="p">.</span><span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="调试数据">调试数据</h2>

<p>样例输入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(lparen,()

(ident,b)

(plus,+)

(number,9)

(rparen,))

(times,\*)

(ident,a)
</code></pre></div></div>

<p>样例输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Yes,it is correct.
</code></pre></div></div>

<p>运行结果</p>

<ol>
  <li>分析产生action表的过程：</li>
</ol>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/image-20240619001518476.png" alt="image-20240619001518476" /></p>

<ol>
  <li>
    <p>语法分析过程</p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/image-20240619001730470.png" alt="image-20240619001730470" style="zoom:10%;" /></p>
  </li>
</ol>

<h2 id="实验调试情况及体会">实验调试情况及体会</h2>

<p>在这次实验中，尽管题目仅仅要求编写一个分析程序，但我却主动挑战自己，完成了SLR(1)分析表的构建。这无疑加大了实验的难度，但也为我提供了难得的挑战和成长机会。选择使用SLR(1)文法进行分析，不仅需要考虑向前搜索符，更是对自己能力的一次全面考验。</p>

<p>本次实验得益于以前良好的编程习惯，每写一部分就调试一部分查看一部分的bug，这样总的程序虽然非常长，但是中间的bug都被一一排除了，然后就能够得出了正确的结果，还是非常的不容易，最终实现了SLR(1)的分析，并且适用于其他文法，可以自己输入产生式，然后进行分析。并且实验过程中，我一步步地完成实验各个环节。当设计尚未明确时，我了分阶段完成。首先生成一个状态的所有项目，然后考虑如何求该状态的转移，再进一步求转移后的状态。在这个过程中，逐步深化细节，例如如何判断两个状态集是否相同等问题。最终，我成功地求出了所有状态，并记录了状态转移情况。这样，编写分析表和分析程序的过程变得更加顺利。</p>

<p>这次实验带给我巨大的收获，与之前编写的LL(1)文法形成了鲜明对比。例如，在一开始编写时，我没有注意到左递归的消除问题，这让我在完成实验后对此问题印象更加深刻。通过这次实验，我对每一个过程和步骤都有了更深的理解。</p>

<p>这次实验不仅让我提升了技术能力，更让我体会到了从挑战中获得成长的喜悦。实验过程中的每一个小细节，都让我对编译原理有了更深入的理解。尽管实验过程充满挑战，但最终的成功让我感到无比的满足和自豪。感谢这次实验，让我在编程的道路上迈出了重要的一步，未来我将继续努力，不断提升自己的技能，迎接更多的挑战。</p>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">linux实验三 基于共享内存的读者和写者问题程序设计</title><link href="http://localhost:4000/2024/05/31/linux%E5%AE%9E%E9%AA%8C%E4%B8%89.html" rel="alternate" type="text/html" title="linux实验三 基于共享内存的读者和写者问题程序设计" /><published>2024-05-31T00:00:00+08:00</published><updated>2024-05-31T00:00:00+08:00</updated><id>http://localhost:4000/2024/05/31/linux%E5%AE%9E%E9%AA%8C%E4%B8%89</id><content type="html" xml:base="http://localhost:4000/2024/05/31/linux%E5%AE%9E%E9%AA%8C%E4%B8%89.html"><![CDATA[<h2 id="linux实验三-基于共享内存的读者和写者问题程序设计">linux实验三 基于共享内存的读者和写者问题程序设计</h2>

<!---more-->
<style> .pdf-embed-wrap-c6cf4f62-ab36-47e4-9ae6-99ec8066d114 { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-c6cf4f62-ab36-47e4-9ae6-99ec8066d114 { height: 100%; } .pdf-embed-container-c6cf4f62-ab36-47e4-9ae6-99ec8066d114 iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-c6cf4f62-ab36-47e4-9ae6-99ec8066d114"> <div class="pdf-embed-container-c6cf4f62-ab36-47e4-9ae6-99ec8066d114"> <iframe src="/assets/pdf/linux/实验三.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>]]></content><author><name>Xingjie Gao</name><email>xingjie-gao@outlook.com</email></author><category term="linux" /><category term="实验报告" /><summary type="html"><![CDATA[linux实验三 基于共享内存的读者和写者问题程序设计]]></summary></entry></feed>