<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-Hans"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-Hans" /><updated>2024-10-12T22:51:48+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ennis’s Blog</title><subtitle>Willing to be a question, willing to be an answer.
</subtitle><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><entry><title type="html">博客的开头</title><link href="http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4.html" rel="alternate" type="text/html" title="博客的开头" /><published>2024-10-10T00:00:00+08:00</published><updated>2024-10-10T00:00:00+08:00</updated><id>http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4</id><content type="html" xml:base="http://localhost:4000/2024/10/10/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A4%B4.html"><![CDATA[<h1 id="博客的开头">博客的开头</h1>
<p>一直想要搞一个博客，但是奈何没有时间，现在终于闲下来了，找到网上的教程，做了这么个简陋的博客。
记忆会消失，文字不会，所以想要用博客来记录自己的成长，记录自己的学习，同时希望可以能帮助到你。</p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><summary type="html"><![CDATA[博客的开头 一直想要搞一个博客，但是奈何没有时间，现在终于闲下来了，找到网上的教程，做了这么个简陋的博客。 记忆会消失，文字不会，所以想要用博客来记录自己的成长，记录自己的学习，同时希望可以能帮助到你。]]></summary></entry><entry><title type="html">编译原理 第四次实验 自下而上语法分析2（LR分析法）</title><link href="http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902-LR%E5%88%86%E6%9E%90%E6%B3%95.html" rel="alternate" type="text/html" title="编译原理 第四次实验 自下而上语法分析2（LR分析法）" /><published>2024-06-13T00:00:00+08:00</published><updated>2024-06-13T00:00:00+08:00</updated><id>http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89</id><content type="html" xml:base="http://localhost:4000/2024/06/13/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902-LR%E5%88%86%E6%9E%90%E6%B3%95.html"><![CDATA[<p><!---more--></p>
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1-538-png_6_0_0_188_115_242_92_893.024_1263-1400-0-255-1400.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616111344139.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《编译原理实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">第四次实验 LR分析法</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">刘善梅</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 6月 13 日</p>
</div>

<p>[TOC]</p>

<h1 id="编译原理-第四次实验-自下而上语法分析2lr分析法">编译原理 第四次实验 自下而上语法分析2（LR分析法）</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>能采用<strong>LR分析法</strong>对一个算术表达式<strong>(b+9)*a</strong>做自下而上的语法分析；</li>
  <li>可自行设计一个LR文法，能识别含有句子(b+9)*a的语言；</li>
  <li>也可基于PL/0语言的文法(完整文法参见本文档最后的附录)来做，若基于PL/0语言文法，需重点关注以下几条文法的EBNF，若不习惯看文法的巴科斯范式EBNF,可先将文法改写成常规的产生式形式P75。</li>
</ul>

<blockquote>
  <p><strong>分析对象〈算术表达式〉的EBNF定义如下：</strong></p>

  <表达式> ::= [+|-]<项>{<加法运算符> <项>}

<项> ::= <因子>{<乘法运算符> <因子>}

<因子> ::= <标识符>|<无符号整数>| ‘(’<表达式>‘)’

<加法运算符> ::= +|-

<乘法运算符> ::= *|/

<关系运算符> ::= =|#|&lt;|&lt;=|&gt;|&gt;=

 <标识符> ::=<字母>{<字母>|<数字>}

<无符号整数> ::= <数字>{<数字>}

<字母> ::= a|b|…|X|Y|Z

<数字> ::= 0|1|…|8|9
</数字></字母></数字></数字></无符号整数></数字></字母></字母></标识符></关系运算符></乘法运算符></加法运算符></表达式></无符号整数></标识符></因子></因子></乘法运算符></因子></项></项></加法运算符></项></表达式>
</blockquote>

<h2 id="实验要求">实验要求</h2>

<blockquote>
  <ul>
    <li><strong>编程基础较扎实的同学，建议用程序构造文法的LR(0)项目集规范族（构造算法见教材P107）；判断文法是LR(0)、SLR和LR(1)中的哪一种，然后用程序构造LR分析表（LR(0)分析表构造算法P109;SLR分析表构造算法P112;LR(1)构造算法P115）</strong>；</li>
    <li>编程基础非常非常薄弱的同学，可以人工求解LR(0)项目集规范族，判断文法是LR(0)、SLR和LR(1)中的哪一种，构造LR分析表，然后直接在程序中给出手工设计好的LR分析表。</li>
    <li>编程基础尚可的同学，可根据自身情况编程构造文法的LR(0)项目集规范族、构造LR分析表（书上都有算法，建议同学们尽量用程序实现）</li>
  </ul>
</blockquote>

<h3 id="实验完成程度">实验完成程度</h3>

<p><strong>由于本次实验给出的样例文法直接使用LR(0)分析会产生冲突不能正确判断句子，所以在LR(0)的基础上实现了SLR(1)分析，最终成功解决了LR(0)的分析。</strong></p>

<table>
  <thead>
    <tr>
      <th>实现的内容</th>
      <th>实现的方式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>实现文法SLR(1)</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解闭包</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解转移goto</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>构建项目集规范族</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解FIRST和FOLLOW集合</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>构建分析表</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>语法分析过程</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>是否仅支持PL/0文法</td>
      <td>否、可以输出其他文法和句子进行判断</td>
    </tr>
  </tbody>
</table>

<h2 id="设计思想">设计思想</h2>

<h3 id="1-文法扩展与预处理">1. 文法扩展与预处理</h3>

<h4 id="11-文法表示">1.1 文法表示</h4>

<p>文法由以下部分组成：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">q0</code>：起始符号。</li>
  <li><code class="language-plaintext highlighter-rouge">vn</code>：非终结符集合。</li>
  <li><code class="language-plaintext highlighter-rouge">vt</code>：终结符集合。</li>
  <li><code class="language-plaintext highlighter-rouge">prods</code>：产生式集合，每个产生式表示为 <code class="language-plaintext highlighter-rouge">(head, body)</code> 的形式。</li>
</ul>

<h4 id="12-增广文法">1.2 增广文法</h4>

<p>为简化分析过程，我们引入一个新的开始符号 <code class="language-plaintext highlighter-rouge">FAKE_S</code>，并添加相应的产生式。同时，增加终结符 <code class="language-plaintext highlighter-rouge">EOF</code> 作为输入结束符号。</p>

<h4 id="13-生成初始项目">1.3 生成初始项目</h4>

<p>初始项目集从新引入的开始符号的产生式开始，表示项目 <code class="language-plaintext highlighter-rouge">(0, 0)</code>，其中 <code class="language-plaintext highlighter-rouge">0</code> 表示产生式索引，<code class="language-plaintext highlighter-rouge">0</code> 表示项目点位置。</p>

<h3 id="2-闭包与转移函数">2. 闭包与转移函数</h3>

<h4 id="21-闭包函数-closure">2.1 闭包函数 (closure)</h4>

<p>对一个项目集进行扩展，包含所有可能的后续项目。</p>

<ul>
  <li>从当前项目集中的每个项目出发，找到点后面的符号。</li>
  <li>对于每个非终结符，将其所有产生式作为新项目加入集合，直到不再有新的项目加入。</li>
</ul>

<h4 id="22-转移函数-goto">2.2 转移函数 (goto)</h4>

<p>计算从一个项目集经过某个符号转移后到达的下一个项目集。</p>

<ul>
  <li>从当前项目集中选取点后符号为给定符号的项目，将点后移一位。</li>
  <li>对这些新项目集合应用闭包操作，得到下一个项目集。</li>
</ul>

<h3 id="3-构建项目集规范族">3. 构建项目集规范族</h3>

<h4 id="31-项目集规范族">3.1 项目集规范族</h4>

<p>通过不断应用转移函数，从初始项目集出发，构建整个项目集规范族。</p>

<ul>
  <li>使用集合保存所有已处理和未处理的项目集。</li>
  <li>对每个未处理的项目集，计算其通过所有符号的转移，得到新的项目集，直到所有项目集都处理完毕。</li>
</ul>

<h3 id="4-first和follow集合">4. FIRST和FOLLOW集合</h3>

<h4 id="41-first集合">4.1 FIRST集合</h4>

<p>计算每个非终结符和终结符的FIRST集合。</p>

<ul>
  <li>对终结符，其FIRST集合是其本身。</li>
  <li>对非终结符，通过递归计算其产生式右部的FIRST集合，考虑空字 <code class="language-plaintext highlighter-rouge">LAMBDA</code>。</li>
</ul>

<h4 id="42-follow集合">4.2 FOLLOW集合</h4>

<p>计算每个非终结符的FOLLOW集合，用于规约时确定接下来的符号。</p>

<ul>
  <li>起始符号的FOLLOW集合包含 <code class="language-plaintext highlighter-rouge">EOF</code>。</li>
  <li>对每个产生式的右部，更新后续符号的FOLLOW集合，直到集合不再变化。</li>
</ul>

<h3 id="5-构建分析表">5. 构建分析表</h3>

<h4 id="51-动作表-action_table">5.1 动作表 (action_table)</h4>

<p>用于存储移入、规约、接受等操作。</p>

<ul>
  <li>对于每个项目集中的项目，如果是移入项目，添加移入操作。</li>
  <li>如果是规约项目，添加规约操作。</li>
  <li>特殊处理接受项目，添加接受操作。</li>
</ul>

<h4 id="52-goto表-goto_table">5.2 Goto表 (goto_table)</h4>

<p>用于存储状态间的转移关系。</p>

<ul>
  <li>对于每个项目集和每个符号，记录其转移后的项目集。</li>
</ul>

<h3 id="6-语法分析过程">6. 语法分析过程</h3>

<h4 id="61-分析过程">6.1 分析过程</h4>

<p>通过移入和规约操作，对输入的令牌序列进行分析，输出分析结果。</p>

<ul>
  <li>使用栈维护当前状态。</li>
  <li>根据当前状态和输入符号，从动作表中查找相应操作。
    <ul>
      <li>移入操作：将符号移入栈，并转移到下一个状态。</li>
      <li>规约操作：根据产生式进行规约，弹出符号并转移到下一个状态。</li>
      <li>接受操作：成功匹配输入序列，结束分析。</li>
      <li>错误处理：遇到无法处理的输入，报告错误。</li>
    </ul>
  </li>
</ul>

<h2 id="算法流程">算法流程</h2>

<p>SLR(1)分析程序为了实现对输入令牌序列的有效解析，能够判断输入是否符合给定的文法规则。</p>

<p>整个流程可以分为六步</p>

<ol>
  <li>文法扩展</li>
  <li>闭包与转移函数</li>
  <li>项目集规范族构建</li>
  <li>FIRST和FOLLOW集合计算</li>
  <li>分析表构建</li>
  <li>语法分析过程</li>
</ol>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/Untitled%20diagram-2024-06-18-161132.png" alt="Untitled diagram-2024-06-18-161132" style="zoom:33%;" /></p>

<h3 id="1-文法扩展与预处理-1">1. 文法扩展与预处理</h3>

<ol>
  <li>
    <p><strong>扩展文法</strong>：</p>

    <ul>
      <li>增加一个新的开始符号 <code class="language-plaintext highlighter-rouge">FAKE_S</code> 和相应的产生式 <code class="language-plaintext highlighter-rouge">FAKE_S -&gt; 原始起始符号</code>。</li>
      <li>在终结符集合中添加特殊符号 <code class="language-plaintext highlighter-rouge">EOF</code> 表示输入结束。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">prev_q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">q0</span> <span class="o">=</span> <span class="n">FAKE_S</span>
     <span class="n">vn</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q0</span><span class="p">)</span>
     <span class="n">vt</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
     <span class="n">prods</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="p">[</span><span class="n">prev_q0</span><span class="p">]))</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="2-闭包与转移函数-1">2. 闭包与转移函数</h3>
<ol>
  <li><strong>闭包函数 (closure)</strong>：
    <ul>
      <li>对给定项目集，添加所有可能的后续项目，直到不再有新的项目加入为止。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">clo</span> <span class="o">=</span> <span class="n">items</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="n">new_items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
         <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">clo</span><span class="p">:</span>
             <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="n">stacktop</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">stacktop</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
                 <span class="k">continue</span>
             <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">stacktop</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                 <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                 <span class="n">new_items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">new_items</span> <span class="o">&lt;=</span> <span class="n">clo</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">clo</span> <span class="o">=</span> <span class="n">clo</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_items</span><span class="p">)</span>
     <span class="k">return</span> <span class="nf">frozenset</span><span class="p">(</span><span class="n">clo</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>转移函数 (goto)</strong>：
    <ul>
      <li>计算从一个项目集经过某个符号转移后到达的下一个项目集。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
         <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="n">stacktop</span><span class="p">:</span>
             <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
             <span class="n">items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>
     <span class="k">return</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="3-构建项目集规范族-1">3. 构建项目集规范族</h3>
<ol>
  <li><strong>项目集规范族</strong>：
    <ul>
      <li>从初始项目集开始，反复应用转移函数，构建整个项目集规范族。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">grammar_symbols</span> <span class="o">=</span> <span class="n">vn</span> <span class="o">+</span> <span class="n">vt</span>
     <span class="n">goto_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">q0_item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
     <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([</span><span class="n">q0_item</span><span class="p">]),</span> <span class="n">grammar</span><span class="p">)</span>
     <span class="n">cc</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">cc0</span><span class="p">])</span>
     <span class="n">done</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="n">new_ccs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
         <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
             <span class="k">if</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                 <span class="k">continue</span>
             <span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">grammar_symbols</span><span class="p">:</span>
                 <span class="n">cc_next</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
                 <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">:</span>
                     <span class="n">new_ccs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span>
                     <span class="n">goto_table</span><span class="p">[(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)]</span> <span class="o">=</span> <span class="n">cc_next</span>
             <span class="n">done</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_i</span><span class="p">)</span>
         <span class="k">if</span> <span class="n">new_ccs</span> <span class="o">&lt;=</span> <span class="n">cc</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">cc</span> <span class="o">=</span> <span class="n">cc</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_ccs</span><span class="p">)</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="4-first和follow集合-1">4. FIRST和FOLLOW集合</h3>
<ol>
  <li><strong>计算FIRST集合</strong>：
    <ul>
      <li>对每个非终结符和终结符计算其FIRST集合。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">first_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
         <span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">])</span>
     <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
         <span class="n">first_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="k">while</span> <span class="n">first_table</span> <span class="o">!=</span> <span class="n">first_table_snapshot</span><span class="p">:</span>
         <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">first_table</span><span class="p">)</span>
         <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
             <span class="n">rhs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
             <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                 <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">body</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]:</span>
                     <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                         <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
                     <span class="k">else</span><span class="p">:</span>
                         <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
             <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">first_table</span>
</code></pre></div>    </div>
  </li>
  <li><strong>计算FOLLOW集合</strong>：
    <ul>
      <li>对每个非终结符计算其FOLLOW集合，用于在规约时确定接下来的符号。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">):</span>
     <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">follow_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
         <span class="n">follow_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
     <span class="n">follow_table</span><span class="p">[</span><span class="n">q0</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">])</span>
     <span class="k">while</span> <span class="n">follow_table</span> <span class="o">!=</span> <span class="n">follow_table_snapshot</span><span class="p">:</span>
         <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">follow_table</span><span class="p">)</span>
         <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
             <span class="n">trailer</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span>
             <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                 <span class="k">if</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
                     <span class="n">trailer</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">b</span><span class="p">])</span>
                 <span class="k">else</span><span class="p">:</span>
                     <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">trailer</span><span class="p">)</span>
                     <span class="k">if</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]:</span>
                         <span class="n">trailer</span> <span class="o">=</span> <span class="n">trailer</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
                     <span class="k">else</span><span class="p">:</span>
                         <span class="n">trailer</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
     <span class="k">return</span> <span class="n">follow_table</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="5-构建分析表-1">5. 构建分析表</h3>
<ol>
  <li><strong>构建动作表 (action_table)</strong> 和 <strong>Goto表 (goto_table)</strong>：
    <ul>
      <li>动作表用于存储移入、规约、接受等操作。</li>
      <li>Goto表用于存储状态间的转移。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
     <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
     <span class="n">action_table</span> <span class="o">=</span> <span class="p">{}</span>
     <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
         <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
             <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="ow">or</span> <span class="n">stacktop</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">):</span>
                 <span class="k">continue</span>
             <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
             <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="n">FAKE_S</span><span class="p">:</span>
                 <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">EOF</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">ACCEPT</span><span class="p">,))</span>
             <span class="k">elif</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                 <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]:</span>
                     <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">REDUCE</span><span class="p">,</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
             <span class="k">else</span><span class="p">:</span>
                 <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">))</span>
                 <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">SHIFT</span><span class="p">,</span> <span class="n">next_state</span><span class="p">))</span>
     <span class="k">return</span> <span class="n">action_table</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="6-语法分析过程-1">6. 语法分析过程</h3>
<ol>
  <li><strong>分析输入串</strong>：
    <ul>
      <li>使用栈维护当前状态，根据当前状态和输入符号，从动作表中查找相应操作，并执行移入、规约或接受操作。</li>
    </ul>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">):</span>
     <span class="n">grammar</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
     <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
     <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
     <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">cc0</span><span class="p">]</span>
     <span class="n">token_index</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="n">ok</span> <span class="o">=</span> <span class="bp">True</span>
     <span class="nb">iter</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
         <span class="nb">iter</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="n">token</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">token_index</span><span class="p">]</span>
         <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
         <span class="n">actions</span> <span class="o">=</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
         <span class="k">if</span> <span class="n">actions</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
             <span class="nf">return </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">No actions</span><span class="sh">"</span><span class="p">)</span>
         <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
             <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Conflicts in the action table</span><span class="sh">"</span><span class="p">)</span>
         <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
         <span class="n">action_str</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
         <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
             <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span><span class="p">:</span>
                 <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
             <span class="k">else</span><span class="p">:</span>
                 <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
         <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
             <span class="n">next_state</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
             <span class="n">token_index</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
             <span class="n">prod_index</span><span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">prods</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
             <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
             <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)):</span>
                 <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
             <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
             <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">head</span><span class="p">),</span> <span class="sh">"</span><span class="s">DEFAULT2</span><span class="sh">"</span><span class="p">)</span>
             <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
         <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
             <span class="k">break</span>
         <span class="k">else</span><span class="p">:</span>
             <span class="n">ok</span> 									<span class="o">=</span> <span class="bp">False</span>
             <span class="k">break</span>
     <span class="nf">return </span><span class="p">(</span><span class="n">ok</span><span class="p">,)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="源程序">源程序</h2>

<blockquote>
  <p>代码分为两个程序：</p>

  <ol>
    <li>主程序</li>
    <li>测试程序（单元测试）（由于程序的功能比较复杂，在写的过程就需要进行测试，一部分一部分的测试，这样汇总起来才不会有什么bug难找到。）</li>
  </ol>
</blockquote>

<ol>
  <li>主程序</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>

<span class="c1"># 定义一些常量
</span><span class="n">FAKE_S</span> <span class="o">=</span> <span class="sh">"</span><span class="s">FAKE_S</span><span class="sh">"</span>  <span class="c1"># 假的开始符号
</span><span class="n">EOF</span> <span class="o">=</span> <span class="sh">"</span><span class="s">EOF</span><span class="sh">"</span>  <span class="c1"># 输入结束符
</span><span class="n">SHIFT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span>  <span class="c1"># 移进操作
</span><span class="n">REDUCE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">reduce</span><span class="sh">"</span>  <span class="c1"># 规约操作
</span><span class="n">ACCEPT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">accept</span><span class="sh">"</span>  <span class="c1"># 接受操作
</span><span class="n">LAMBDA</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lambda</span><span class="sh">"</span>  <span class="c1"># 空字
</span>
<span class="c1"># 增广文法：为文法增加一个假的开始符号和结束符
</span><span class="k">def</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">prev_q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">q0</span> <span class="o">=</span> <span class="n">FAKE_S</span>
    <span class="n">vn</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">q0</span><span class="p">)</span>  <span class="c1"># 将假开始符号加入非终结符集合
</span>    <span class="n">vt</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>  <span class="c1"># 将结束符加入终结符集合
</span>    <span class="n">prods</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="p">[</span><span class="n">prev_q0</span><span class="p">]))</span>  <span class="c1"># 增加新的产生式：FAKE_S -&gt; 原始起始符号
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>

<span class="c1"># 构建规范LR(1)项目集族
</span><span class="k">def</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">grammar_symbols</span> <span class="o">=</span> <span class="n">vn</span> <span class="o">+</span> <span class="n">vt</span>  <span class="c1"># 文法符号 = 非终结符 + 终结符
</span>    <span class="n">goto_table</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="n">q0_item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 初始项目
</span>    <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([</span><span class="n">q0_item</span><span class="p">]),</span> <span class="n">grammar</span><span class="p">)</span>  <span class="c1"># 求初始项目的闭包
</span>    <span class="n">cc</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">cc0</span><span class="p">])</span>
    <span class="n">done</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>  <span class="c1"># 已处理的项目集
</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_ccs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
        <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">symbol</span> <span class="ow">in</span> <span class="n">grammar_symbols</span><span class="p">:</span>
                <span class="n">cc_next</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>  <span class="c1"># 计算转移
</span>                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">:</span>
                    <span class="n">new_ccs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_next</span><span class="p">)</span>
                    <span class="n">goto_table</span><span class="p">[(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)]</span> <span class="o">=</span> <span class="n">cc_next</span>
            <span class="n">done</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cc_i</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">new_ccs</span> <span class="o">&lt;=</span> <span class="n">cc</span><span class="p">:</span>  <span class="c1"># 如果没有新的项目集，跳出循环
</span>            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">cc</span> <span class="o">=</span> <span class="n">cc</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_ccs</span><span class="p">)</span>  <span class="c1"># 合并新的项目集
</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">)</span>

<span class="c1"># 闭包函数：对一个项目集进行闭包操作
</span><span class="k">def</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">clo</span> <span class="o">=</span> <span class="n">items</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">clo</span><span class="p">:</span>
            <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stacktop</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">stacktop</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">stacktop</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">new_items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">new_items</span> <span class="o">&lt;=</span> <span class="n">clo</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">clo</span> <span class="o">=</span> <span class="n">clo</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">new_items</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">frozenset</span><span class="p">(</span><span class="n">clo</span><span class="p">)</span>

<span class="c1"># 转移函数：计算从一个项目集经过某个符号转移后得到的项目集
</span><span class="k">def</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">items</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
        <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">symbol</span> <span class="o">==</span> <span class="n">stacktop</span><span class="p">:</span>
            <span class="n">new_item</span> <span class="o">=</span> <span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_item</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">closure</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

<span class="c1"># 构建分析表
</span><span class="k">def</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">action_table</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="n">cc</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">cc_i</span><span class="p">:</span>
            <span class="n">stacktop</span> <span class="o">=</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="ow">or</span> <span class="n">stacktop</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">head</span> <span class="o">==</span> <span class="n">FAKE_S</span><span class="p">:</span>
                <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">EOF</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">ACCEPT</span><span class="p">,))</span>
            <span class="k">elif</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]:</span>
                    <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">a</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">REDUCE</span><span class="p">,</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">))</span>
                <span class="n">action_table</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">((</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">stacktop</span><span class="p">),</span> <span class="p">[]).</span><span class="nf">append</span><span class="p">((</span><span class="n">SHIFT</span><span class="p">,</span> <span class="n">next_state</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">action_table</span>

<span class="c1"># 计算FIRST集合
</span><span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">first_table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
        <span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
        <span class="n">first_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="k">while</span> <span class="n">first_table</span> <span class="o">!=</span> <span class="n">first_table_snapshot</span><span class="p">:</span>
        <span class="n">first_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">first_table</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
            <span class="n">rhs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">body</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]:</span>
                    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                        <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">rhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>

            <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">head</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">first_table</span>

<span class="c1"># 计算FOLLOW集合
</span><span class="k">def</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">):</span>
    <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">follow_table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">for</span> <span class="n">nt</span> <span class="ow">in</span> <span class="n">vn</span><span class="p">:</span>
        <span class="n">follow_table</span><span class="p">[</span><span class="n">nt</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([])</span>

    <span class="n">follow_table</span><span class="p">[</span><span class="n">q0</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">])</span>

    <span class="k">while</span> <span class="n">follow_table</span> <span class="o">!=</span> <span class="n">follow_table_snapshot</span><span class="p">:</span>
        <span class="n">follow_table_snapshot</span> <span class="o">=</span> <span class="nf">deepcopy</span><span class="p">(</span><span class="n">follow_table</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">prods</span><span class="p">:</span>
            <span class="n">trailer</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">head</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
                    <span class="n">trailer</span> <span class="o">=</span> <span class="nf">set</span><span class="p">([</span><span class="n">b</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow_table</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="nf">union</span><span class="p">(</span><span class="n">trailer</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">LAMBDA</span> <span class="ow">in</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]:</span>
                        <span class="n">trailer</span> <span class="o">=</span> <span class="n">trailer</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">-</span> <span class="nf">set</span><span class="p">([</span><span class="n">LAMBDA</span><span class="p">]))</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">trailer</span> <span class="o">=</span> <span class="n">first_table</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">follow_table</span>

<span class="c1"># 解析输入串
</span><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">PARSE: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">tokens</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">++++++++++++++++++++++++</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">grammar</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
    <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
    <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
    <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">cc0</span><span class="p">]</span>
    <span class="n">token_index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">ok</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="nb">iter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">============</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ITER: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nb">iter</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">============</span><span class="sh">"</span><span class="p">)</span>
        <span class="nb">iter</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">)</span>

        <span class="n">token</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">token_index</span><span class="p">]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Token: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

        <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">actions</span> <span class="o">=</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">token</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">if</span> <span class="n">actions</span> <span class="o">==</span> <span class="bp">None</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">No actions</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">actions</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Conflicts in the action table</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">action</span> <span class="o">=</span> <span class="n">actions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">action_str</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">shift</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">action_str</span> <span class="o">+=</span> <span class="sh">"</span><span class="s"> {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Action: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">action_str</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
            <span class="n">next_state</span> <span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
            <span class="n">token_index</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
            <span class="n">prod_index</span><span class="o">=</span> <span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">prods</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
            <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">)):</span>
                <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
            <span class="n">stacktop_state</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">next_state</span> <span class="o">=</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">get</span><span class="p">((</span><span class="n">stacktop_state</span><span class="p">,</span> <span class="n">head</span><span class="p">),</span> <span class="sh">"</span><span class="s">DEFAULT2</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_state</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">reducing by {0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">))</span>

        <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
            <span class="n">ok</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">break</span>

    <span class="nf">return </span><span class="p">(</span><span class="n">ok</span><span class="p">,)</span>

<span class="c1">##################
# 辅助函数
###################
</span>
<span class="c1"># 获取项目的栈顶符号
</span><span class="k">def</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="n">stacktop_index</span><span class="p">)</span> <span class="o">=</span> <span class="n">item</span>
    <span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="o">=</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">stacktop_index</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">body</span><span class="p">):</span>
        <span class="c1"># 完成的项目
</span>        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">body</span><span class="p">[</span><span class="n">stacktop_index</span><span class="p">]</span>

<span class="c1"># 获取项目对应的产生式
</span><span class="k">def</span> <span class="nf">item_to_prod</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="p">(</span><span class="n">prod_index</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">item</span>
    <span class="k">return</span> <span class="n">prods</span><span class="p">[</span><span class="n">prod_index</span><span class="p">]</span>

<span class="c1"># 判断项目是否完成
</span><span class="k">def</span> <span class="nf">item_is_complete</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">item_to_stacktop</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span> <span class="o">==</span> <span class="bp">None</span>

<span class="c1"># 根据产生式头部获取产生式列表
</span><span class="k">def</span> <span class="nf">get_prods_with_head</span><span class="p">(</span><span class="n">desired_head</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">desired_head</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">current_head</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">prods</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">current_head</span> <span class="o">!=</span> <span class="n">desired_head</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">result</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">prod_index</span><span class="p">,</span> <span class="p">(</span><span class="n">current_head</span><span class="p">,</span> <span class="n">body</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="c1"># 打印goto表
</span><span class="k">def</span> <span class="nf">print_goto_table</span><span class="p">(</span><span class="n">goto_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">GOTO</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">next_state</span> <span class="ow">in</span> <span class="n">goto_table</span><span class="p">.</span><span class="nf">iteritems</span><span class="p">():</span>
        <span class="n">state</span><span class="p">,</span> <span class="n">symbol</span> <span class="o">=</span> <span class="n">key</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0:&lt;10} {1:&lt;10} -&gt; {2}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">),</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">next_state</span><span class="p">)))</span>

<span class="c1"># 打印action表
</span><span class="k">def</span> <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ACTION</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">actions</span> <span class="ow">in</span> <span class="n">action_table</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">state</span><span class="p">,</span> <span class="n">symbol</span> <span class="o">=</span> <span class="n">key</span>
        <span class="n">action_str</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">action</span> <span class="ow">in</span> <span class="n">actions</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ACCEPT</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">ACCEPT</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">REDUCE</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">Reduce {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">prod_to_string</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">]])))</span>
            <span class="k">elif</span> <span class="n">action</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">SHIFT</span><span class="p">:</span>
                <span class="n">action_str</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">Shift {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">action</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>

        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0:&lt;10} {1:&lt;10} -&gt; {2}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">),</span> <span class="n">symbol</span><span class="p">,</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">action_str</span><span class="p">)))</span>

<span class="c1"># 打印栈内容
</span><span class="k">def</span> <span class="nf">print_stack</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">id_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">cc_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">cc</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">index</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">INDEX</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cc_list</span><span class="p">):</span>
        <span class="n">id_map</span><span class="p">[</span><span class="n">cc_i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">if</span> <span class="n">index</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">cc_i</span><span class="p">))</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STACK: {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="n">stack</span><span class="p">))))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=======</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="n">stack</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">stack</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">id_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">state</span><span class="p">)))</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=======</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 将产生式转换为字符串
</span><span class="k">def</span> <span class="nf">prod_to_string</span><span class="p">(</span><span class="n">prod</span><span class="p">):</span>
    <span class="n">head</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">prod</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">{0} -&gt; {1}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">body</span><span class="p">))</span>

<span class="c1"># 主函数
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">prods</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">]</span>
    <span class="n">q0</span> <span class="o">=</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span>
    <span class="n">vn</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">vt</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">line</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">""</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>
            <span class="k">break</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="nb">type</span> <span class="o">=</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">line</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)]</span>
        <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lparen</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">rparen</span><span class="sh">"</span> <span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">ident</span><span class="sh">"</span> <span class="ow">or</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">number</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">plus</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">times</span><span class="sh">"</span> <span class="p">:</span>
            <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span> <span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">break</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[(</span><span class="n">element</span><span class="p">,)</span> <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">]</span> <span class="o">+</span> <span class="p">[(</span><span class="n">EOF</span><span class="p">,)]</span>
    <span class="n">grammar</span> <span class="o">=</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>
    <span class="nf">if</span><span class="p">(</span><span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Yes,it is correct.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No,it is wrong.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>测试程序</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">unittest</span>
<span class="kn">from</span> <span class="n">main</span> <span class="kn">import</span> <span class="o">*</span>


<span class="n">prods</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
<span class="p">]</span>
<span class="n">q0</span> <span class="o">=</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span>
<span class="n">vn</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]</span>
<span class="n">vt</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span>

<span class="n">grammar</span> <span class="o">=</span> <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">test_grammar_with_fake_start</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">grammar_ext</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>

        <span class="n">expected</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">FAKE_S</span><span class="p">,</span>
            <span class="p">[</span><span class="n">FAKE_S</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">[</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="n">EOF</span><span class="p">],</span>
            <span class="p">[</span>
                <span class="p">(</span><span class="n">FAKE_S</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">(</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">,</span> <span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]),</span>
            <span class="p">]</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_closure</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">expected</span> <span class="o">=</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_goto</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">cc0</span> <span class="o">=</span> <span class="nf">closure</span><span class="p">(</span><span class="nf">set</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">cc_i</span> <span class="o">=</span> <span class="nf">goto</span><span class="p">(</span><span class="n">cc0</span><span class="p">,</span> <span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">,</span> <span class="n">grammar</span><span class="p">)</span>
        <span class="n">expected</span> <span class="o">=</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
        <span class="p">])</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">cc_i</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_first</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">vt</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="n">t</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">t</span><span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">first_table</span><span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]))</span>

    <span class="k">def</span> <span class="nf">test_follow</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="n">vn</span><span class="p">,</span> <span class="n">vt</span><span class="p">,</span> <span class="n">prods</span><span class="p">)</span> <span class="o">=</span> <span class="n">grammar</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">E</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">T</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">follow_table</span><span class="p">[</span><span class="sh">"</span><span class="s">F</span><span class="sh">"</span><span class="p">],</span> <span class="nf">set</span><span class="p">([</span><span class="n">EOF</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">]))</span>

    <span class="k">def</span> <span class="nf">test_parse</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,),</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>

        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[(</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="p">),</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>

        <span class="n">ok</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">grammar</span><span class="p">,</span> <span class="p">[</span> <span class="p">(</span><span class="n">EOF</span><span class="p">,</span> <span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertTrue</span><span class="p">(</span><span class="n">ok</span><span class="p">)</span>




    <span class="k">def</span> <span class="nf">test_canonical_collection</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">q0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">q0</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
            <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">cc</span><span class="p">,</span>
            <span class="nf">set</span><span class="p">([</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
            <span class="p">])</span>
        <span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">goto_table</span><span class="p">,</span>
            <span class="p">{</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span>
                <span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span>
                        <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span>
                        <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span>
                <span class="p">}</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_build_action_table</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">grammar_ext</span> <span class="o">=</span> <span class="nf">grammar_with_fake_start</span><span class="p">(</span><span class="n">grammar</span><span class="p">)</span>
        <span class="n">cc0</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span> <span class="o">=</span> <span class="nf">canonical_collection</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">)</span>
        <span class="n">first_table</span> <span class="o">=</span> <span class="nf">first</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">)</span>
        <span class="n">follow_table</span> <span class="o">=</span> <span class="nf">follow</span><span class="p">(</span><span class="n">grammar_ext</span><span class="p">,</span> <span class="n">first_table</span><span class="p">)</span>
        <span class="n">action_table</span> <span class="o">=</span> <span class="nf">build_action_table</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span> <span class="n">goto_table</span><span class="p">,</span> <span class="n">follow_table</span><span class="p">,</span> <span class="n">grammar_ext</span><span class="p">)</span>

        <span class="nf">print_action_table</span><span class="p">(</span><span class="n">action_table</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">grammar_ext</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span>
            <span class="n">action_table</span><span class="p">,</span>
            <span class="p">{</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span>
                <span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">accept</span><span class="sh">'</span><span class="p">,</span> <span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span>
                        <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">EOF</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">5</span><span class="p">,</span>
                        <span class="mi">3</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">6</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span>
                <span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
                        <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]))],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]),</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">reduce</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span>
                <span class="p">(</span><span class="nf">frozenset</span><span class="p">([</span>
                    <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                    <span class="p">]),</span> <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">):</span> <span class="p">[(</span><span class="sh">'</span><span class="s">shift</span><span class="sh">'</span><span class="p">,</span> <span class="nf">frozenset</span><span class="p">([(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]))],</span>
                <span class="p">}</span>
        <span class="p">)</span>



<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">unittest</span><span class="p">.</span><span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="调试数据">调试数据</h2>

<p>样例输入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(lparen,()

(ident,b)

(plus,+)

(number,9)

(rparen,))

(times,\*)

(ident,a)
</code></pre></div></div>

<p>样例输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Yes,it is correct.
</code></pre></div></div>

<p>运行结果</p>

<ol>
  <li>分析产生action表的过程：</li>
</ol>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/image-20240619001518476.png" alt="image-20240619001518476" /></p>

<ol>
  <li>
    <p>语法分析过程</p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%902%EF%BC%88LR%E5%88%86%E6%9E%90%E6%B3%95%EF%BC%89.assets/image-20240619001730470.png" alt="image-20240619001730470" style="zoom:10%;" /></p>
  </li>
</ol>

<h2 id="实验调试情况及体会">实验调试情况及体会</h2>

<p>在这次实验中，尽管题目仅仅要求编写一个分析程序，但我却主动挑战自己，完成了SLR(1)分析表的构建。这无疑加大了实验的难度，但也为我提供了难得的挑战和成长机会。选择使用SLR(1)文法进行分析，不仅需要考虑向前搜索符，更是对自己能力的一次全面考验。</p>

<p>本次实验得益于以前良好的编程习惯，每写一部分就调试一部分查看一部分的bug，这样总的程序虽然非常长，但是中间的bug都被一一排除了，然后就能够得出了正确的结果，还是非常的不容易，最终实现了SLR(1)的分析，并且适用于其他文法，可以自己输入产生式，然后进行分析。并且实验过程中，我一步步地完成实验各个环节。当设计尚未明确时，我了分阶段完成。首先生成一个状态的所有项目，然后考虑如何求该状态的转移，再进一步求转移后的状态。在这个过程中，逐步深化细节，例如如何判断两个状态集是否相同等问题。最终，我成功地求出了所有状态，并记录了状态转移情况。这样，编写分析表和分析程序的过程变得更加顺利。</p>

<p>这次实验带给我巨大的收获，与之前编写的LL(1)文法形成了鲜明对比。例如，在一开始编写时，我没有注意到左递归的消除问题，这让我在完成实验后对此问题印象更加深刻。通过这次实验，我对每一个过程和步骤都有了更深的理解。</p>

<p>这次实验不仅让我提升了技术能力，更让我体会到了从挑战中获得成长的喜悦。实验过程中的每一个小细节，都让我对编译原理有了更深入的理解。尽管实验过程充满挑战，但最终的成功让我感到无比的满足和自豪。感谢这次实验，让我在编程的道路上迈出了重要的一步，未来我将继续努力，不断提升自己的技能，迎接更多的挑战。</p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">编译原理 第三次实验 算符优先分析</title><link href="http://localhost:4000/2024/04/25/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90.html" rel="alternate" type="text/html" title="编译原理 第三次实验 算符优先分析" /><published>2024-04-25T00:00:00+08:00</published><updated>2024-04-25T00:00:00+08:00</updated><id>http://localhost:4000/2024/04/25/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/2024/04/25/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90.html"><![CDATA[<p><!---more--></p>
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1-538-png_6_0_0_188_115_242_92_893.024_1263-1400-0-255-1400.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616111344139.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《编译原理实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">第三次实验 算符优先分析</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">刘善梅</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 4月 25 日</p>
</div>

<p>[TOC]</p>

<h1 id="编译原理-第三次实验-算符优先分析">编译原理 第三次实验 算符优先分析</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>根据算符优先分析法，对表达式进行语法分析，使其能够判断一个表达式是否正确。</li>
  <li>通过算符优先分析方法的实现，加深对自下而上语法分析方法的理解。</li>
  <li>加深对语法分析器工作过程的理解；</li>
  <li>加强对算符优先分析法实现语法分析程序的掌握；</li>
  <li>能够采用一种编程语言实现简单的语法分析程序；</li>
</ul>

<h2 id="实验要求">实验要求</h2>

<ol>
  <li>根据简单表达式文法构造算符优先分析表</li>
  <li>根据构造出来的算符优先分析表进行表达式的分析</li>
  <li>能采用<strong>算符优先分析法</strong>对一个算术表达式<strong>(b+9)*a</strong>做自下而上的语法分析；</li>
  <li>可自行设计一个算符优先文法，能识别含有句子(b+9)*a的语言；</li>
  <li>也可基于PL/0语言的文法(完整文法参见本文档最后的附录)来做，若基于PL/0语言文法，需重点关注以下几条文法的EBNF，若不习惯看文法的巴科斯范式EBNF,可先将文法改写成常规的产生式形式P75。</li>
</ol>

<blockquote>
  <p><strong>分析对象〈算术表达式〉的BNF定义如下：</strong></p>

  <表达式> ::= [+|-]<项>{<加法运算符> <项>}

<项> ::= <因子>{<乘法运算符> <因子>}

<因子> ::= <标识符>|<无符号整数>| ‘(’<表达式>‘)’

<加法运算符> ::= +|-

<乘法运算符> ::= *|/

<关系运算符> ::= =|#|&lt;|&lt;=|&gt;|&gt;=

 <标识符> ::=<字母>{<字母>|<数字>}

<无符号整数> ::= <数字>{<数字>}

<字母> ::= a|b|…|X|Y|Z

<数字> ::= 0|1|…|8|9
</数字></字母></数字></数字></无符号整数></数字></字母></字母></标识符></关系运算符></乘法运算符></加法运算符></表达式></无符号整数></标识符></因子></因子></乘法运算符></因子></项></项></加法运算符></项></表达式>
</blockquote>

<p><strong>实验要求：</strong></p>

<blockquote>
  <p>​      编程基础扎实的同学，建议用程序分别求解firstvt集和lastvt集，并用程序实现算符优先分析表；</p>

  <p>​      编程基础非常非常薄弱的同学，可以人工求解firstvt集和lastvt集，人工设计好算符优先分析表，然后直接在程序中给出手工设计好的算符优先分析表。</p>

  <p>​      编程基础尚可的同学，可根据自身情况编程firstvt集、lastvt集和算符优先<strong>分析表</strong>这三个部分的某些部分。（书上都有算法，建议同学们尽量用程序实现）</p>
</blockquote>

<h3 id="实验完成程度">实验完成程度</h3>

<p>本次实验我完成了一下功能：</p>

<table>
  <thead>
    <tr>
      <th>实现的内容</th>
      <th>实现的方式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>求解firstvt集</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解lastvt集</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解算符优先分析表</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>判断是否是简单优先文法</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>使用算符优先分析过程</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>是否仅支持PL/0文法</td>
      <td>否、可以输出其他文法和句子进行判断</td>
    </tr>
  </tbody>
</table>

<p><strong>由于是先把算符优先分析实现了，先实现了一般形式的算符优先分析（可以自己输入产生式、和句子），所以在最后提交的时候，为了适应itc的输入输出格式，最后做出了一些输入输出格式的修改</strong></p>

<h2 id="设计思想">设计思想</h2>

<h3 id="1-文法每个非终结符的-firstvt-集和-lastvt-集">1 文法每个非终结符的 FIRSTVT 集和 LASTVT 集</h3>

<p>FirstLast 类用于 FIRSTVT 集合和 LASTVT 集合构造。</p>

<p>主要数据：</p>

<ul>
  <li><strong>first</strong>：char[][] 用于存储非终结符的 FIRSTVT 集合</li>
  <li><strong>last</strong>：char[][] 用于存储非终结符的 LASTVT 集合</li>
</ul>

<p>对 FIRSTVT 集的构造我们可以给出一个算法，这个算法基于下面两条规则：</p>

<ul>
  <li>若有产生式 A→a…或 A→Ba…，则 a 属于 FIRSTVT（A），其中 A，B为非终结符，a 为终结符</li>
  <li>若 a 属于 FIRSTVT（B）且有产生式 A→B…则有 a 属于 FIRSTVT（A）</li>
</ul>

<p>为了计算方便，我们建立一个布尔数组 F[m,n]（m 为非终结符个数，n 为终结符个数）和一个后进先出栈 STACK。我们将所有的非终结符排序，用的序号，再将所有的终结符排序，用 表示终结符 a 的序号。算法的目的是要合数组每一个元素最终取什满足：F[ , ]的值为真，当且仅当 a 属于 FIRSTVT（A）。至此，显然所有非终结符的 FIRSTVT 集己完全确定。</p>

<p>步骤如下：</p>

<ul>
  <li>首先按规则（1）对每个数组元素赋初值。观察这些初值，若 F [ Ai ， aj ]的值为真，则将（A ,a）推入栈中，直至对所有数组元素的初值都按此处处理完</li>
  <li>然后对栈做以下运算</li>
  <li>将栈顶项弹出，设为（B，a），再用规则（2）检查所有产生式，若有形为 A→B…的产生式，而 F [ Ai ， aj ]的值是假，则令其变为真，且将（A ,a）推进栈，如此重复直到栈弹空为止</li>
</ul>

<p>具体的算法可用程序描述为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PROCEDURE INSERT(A，a)
    IF NOT F [ Ai ， aj ] THEN
        BEGIN
            F[ Ai ， aj ]:=TRUE
            PUSH(A,a) ONTO STACK
     	   END
     	   
</code></pre></div></div>

<p>此过程用于当 a 属于 FIRSTVT(A)时置 F[ Ai, aj ]为真，并将符号对(A, a)下推到栈中，其主程序为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BEGIN （MAIN）
   	FOR I 从 1 到 m,j 从 1 到 n
    		 DO F[ Ai ， aj ] ：=FALSE；
    	FOR 每个形如 A→a…或 A→Ba…的产生式
		   DO INSERT（A，a）
	  	WHILE STACK 非空 DO
		BEGIN
			把 STACK 的顶项记为（B，a）弹出去
			FOR 每个形如 A→B…的产生式
				DO INSERT（A，a）
			END
END （MAIN）
</code></pre></div></div>

<p>利用类似的方法可求得每个非终结符的 LASTVT(A)。</p>

<h3 id="2-由-lastvt-和-firstvt-集建立优先矩阵">2 由 LASTVT 和 FIRSTVT 集建立优先矩阵</h3>

<p>Table 类利用之前构造的 LASTVT 和 FIRSTVT 生成。</p>

<p>主要数据：</p>

<ul>
  <li><strong>table</strong>: int[][] 用于存储算符优先关系矩阵</li>
</ul>

<p>有了文法中的每个非终结符的 FIRSTVT 集和 LASTVT 集，我们就可以用如下算法最后构造文法的优先关系表：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FOR 每个产生式 A→ X1 X2… Xn DO
	FOR i:=1 TO n-1 DO
		BEGIN
			IF Xi 和 Xi+1均为终结符
				THEN 置 Xi = Xi+1
			IF Xi 和 Xi+2都为终结符，但 Xi+1为非终结符
				THEN 置 Xi = Xi+2；
			IF Xi 为终结符而 Xi+1为非中介符
				THEN FOR FIRSTFVT( Xi+1 )中的每个 b DO 置 Xi &lt;b；
			IF Xi 为非终结符而 Xi+1为终结符
				THEN FOR LASTVT( Xi )中的每个 a DO 置 a&gt; Xi+1
		END
</code></pre></div></div>

<p>以上算法对任何算符文法 G 可自动构造其算符优先关系表，并可判断 G 是否为算符优先关系。</p>

<h3 id="3-算符文法的分析归约过程算法">3 算符文法的分析归约过程算法</h3>

<p>自底向上的算符优先分析法，也为自左右向右归约，我们已经知道它不是规范归约。规范归约的关键问题是如何寻找当前句型的句柄，句柄为某一产生式的右面部，归约结果为用与句柄相同的产生式右面部之左部非终结符代替句柄，而算符优先分析归约的关键，是如何找最左素短语，而最左右素短语 Ni ai Ni+1。</p>

<p>ai+1…… aj Nj+1应满足：</p>

<ul>
  <li>ai-1 &lt;· ai</li>
  <li>ai = ai+1 =…… aj</li>
  <li>aj ·&gt; aj+1</li>
</ul>

<p>在文法的产生式中存在右面部符号串的符号个数与该素短语的符号个数相等，非终结符号对应 Nk ，（k=i,…,j+1）不管其符号名是什么。终结符对应 i a ,…, j a ,其符号表示要与实际的终结符相一致才有可能形成素短语。由此，我们在分析过程中可以设置一个符号栈 S，用以寄存归约或待形成最左素短语的符号串，用一个工作单元 a 存放当前读入的终结符号，归约成功的标志是当读到句子结束符#时，S 本中只剩#N，即只剩句子最左括号“#”和一非终结符 N。下面给出分析过程的示意图 在归约时要检查是否有对应产生式的右部与 S[j+1]…S[k]形式相符，（忽略非终结符名的不同）若有才可归约，否则出错。在这个分析过程中把“#”也放在终结符串中。</p>

<p>算符优先分析的移进规约流程图：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90.assets/Untitled%20diagram-2024-06-17-155513.png" alt="Untitled diagram-2024-06-17-155513" style="zoom: 25%;" /></p>

<h3 id="4-语法分析树">4 语法分析树</h3>

<p>语法树是在对字串进行算符优先分析时同步生成的，一个子树对应一个最左速短语。语法树的每一次构建操作对应算符优先分析时的一个规约操作。</p>

<p>语法树根据算符优先规约的规则和逻辑，以自下而上的顺序生成每次算符优先分析时要对 S[j+1]…S[k]规约为某个 N 时，记录下要规约的 S[j+1]…S[k]字符作为当前一个子树的叶子节点，N 作为当前子树的根节点建立父子关系。</p>

<p>将 S[j+1]…S[k]规约成的 N，存入一个栈中（代码中使用一个指针数组实现），保存下来，作为之后规约操作时一个子树的叶节点。</p>

<p>循环执行后，在最后一步规约时，将 S[j+1]…S[k]规约成的 N 作为语法树的根节点 root。</p>

<p>将建立好的语法树逻辑结构，带入多叉树建立算法中，生成语法树，并打印出来。</p>

<h2 id="算法流程">算法流程</h2>

<p>算符优先文法的执行过程为：输入已知文法，分析其正确性，提取非终结符和终结符，构造非终结符的 FIRSTVT 集和 LASTVT 集，再次基础上构造算符优先关系矩阵，并用来判断表达式是否符合该文法。</p>

<p>算符优先文法程序总的流程图为：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90.assets/Untitled%20diagram-2024-06-17-122241.png" alt="Untitled diagram-2024-06-17-122241" style="zoom: 33%;" /></p>

<p>这个算符优先分析程序的算法流程如下：</p>

<h3 id="1-数据结构初始化">1. 数据结构初始化</h3>
<ul>
  <li><strong>定义变量和数据结构</strong>：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">table[20][20]</code>：存储算符优先关系表。</li>
      <li><code class="language-plaintext highlighter-rouge">grammar[10][30]</code>：存储文法产生式。</li>
      <li><code class="language-plaintext highlighter-rouge">FIRSTVT[10][10]</code>和<code class="language-plaintext highlighter-rouge">LASTVT[10][10]</code>：存储每个非终结符的FirstVT和LastVT集合。</li>
      <li><code class="language-plaintext highlighter-rouge">T_label[20]</code>：存储所有的终结符。</li>
      <li><code class="language-plaintext highlighter-rouge">input_s[100]</code>：存储待分析的输入串。</li>
      <li><code class="language-plaintext highlighter-rouge">s[100]</code>：用于语法分析的栈。</li>
    </ul>
  </li>
</ul>

<h3 id="2-读取文法规则">2. 读取文法规则</h3>
<ul>
  <li>从输入中读取文法产生式，直到遇到结束符号<code class="language-plaintext highlighter-rouge">#</code>。在读取过程中，初始化<code class="language-plaintext highlighter-rouge">FIRSTVT</code>和<code class="language-plaintext highlighter-rouge">LASTVT</code>。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"输入产生式，以#结束"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="n">r</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">else</span> <span class="n">r</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="3-判断是否为算符文法">3. 判断是否为算符文法</h3>
<ul>
  <li>检查每个产生式，确保符合算符文法的定义：
    <ul>
      <li>每个产生式的左部必须是一个单一的非终结符。</li>
      <li>每个产生式的右部不能有连续的非终结符。</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符文法</span><span class="se">\n</span><span class="s">!"</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'Z'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符文法</span><span class="se">\n</span><span class="s">!"</span><span class="p">);</span>
            <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="4-收集终结符">4. 收集终结符</h3>
<ul>
  <li>在读取文法规则的过程中，收集所有的终结符并存储在<code class="language-plaintext highlighter-rouge">T_label</code>数组中。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="sc">'Z'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'-'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'&gt;'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'|'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">T_label</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">T_label</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
<span class="n">T_label</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="5-生成firstvt和lastvt集合">5. 生成FIRSTVT和LASTVT集合</h3>
<ul>
  <li>对于每个非终结符，递归计算其FIRSTVT和LASTVT集合。通过遍历文法产生式，判断并合并相应的终结符。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">firstvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">lastvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="6-生成算符优先关系表">6. 生成算符优先关系表</h3>
<ul>
  <li>根据文法规则，推导出终结符之间的优先关系，并填入<code class="language-plaintext highlighter-rouge">table</code>中。
    <ul>
      <li>若<code class="language-plaintext highlighter-rouge">a</code>和<code class="language-plaintext highlighter-rouge">b</code>均为终结符且相邻，则<code class="language-plaintext highlighter-rouge">a = b</code>。</li>
      <li>若<code class="language-plaintext highlighter-rouge">a</code>为终结符，<code class="language-plaintext highlighter-rouge">B</code>为非终结符且<code class="language-plaintext highlighter-rouge">B</code>的FIRSTVT集中包含终结符<code class="language-plaintext highlighter-rouge">b</code>，则<code class="language-plaintext highlighter-rouge">a &lt; b</code>。</li>
      <li>若<code class="language-plaintext highlighter-rouge">A</code>为非终结符，<code class="language-plaintext highlighter-rouge">b</code>为终结符且<code class="language-plaintext highlighter-rouge">A</code>的LASTVT集中包含终结符<code class="language-plaintext highlighter-rouge">a</code>，则<code class="language-plaintext highlighter-rouge">a &gt; b</code>。</li>
      <li>特殊处理<code class="language-plaintext highlighter-rouge">#</code>与其他符号的关系。</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">P_table</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 生成FIRSTVT和LASTVT</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">firstvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">lastvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="c1">// 生成优先关系表</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 遍历文法规则，填表</span>
    <span class="p">}</span>
    <span class="c1">// 处理#与其他符号的关系</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">FIRSTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&lt;'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">LASTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">LASTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&gt;'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">table</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'='</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="7-输出firstvt和lastvt集合">7. 输出FIRSTVT和LASTVT集合</h3>
<ul>
  <li>输出每个非终结符的FIRSTVT和LASTVT集合。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">FIRSTVT集</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c: "</span><span class="p">,</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%c "</span><span class="p">,</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">LASTVT集</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c: "</span><span class="p">,</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%c "</span><span class="p">,</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="8-输出算符优先关系表">8. 输出算符优先关系表</h3>
<ul>
  <li>输出算符优先分析表，显示各终结符之间的优先关系。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">算符优先分析表:</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">%c"</span><span class="p">,</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="9-输入待分析字符串">9. 输入待分析字符串</h3>
<ul>
  <li>读取待分析的输入串。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">输入单词串</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="10-语法分析过程">10. 语法分析过程</h3>
<ul>
  <li>初始化分析栈，将<code class="language-plaintext highlighter-rouge">#</code>压入栈底，开始逐步分析输入串。</li>
  <li>根据栈顶符号和当前输入符号的优先关系，选择进行移进或规约操作。
    <ul>
      <li><strong>移进</strong>：将当前输入符号移入栈，并继续读取下一个输入符号。</li>
      <li><strong>规约</strong>：根据文法规则进行规约操作，将栈顶符号规约为对应的非终结符。</li>
      <li>在规约过程中，同时构建语法树，记录规约过程的节点关系。</li>
    </ul>
  </li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">test_s</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"栈             输入串         动作</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">a</span> <span class="o">=</span> <span class="n">input_s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
        <span class="k">else</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"规约</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
            <span class="c1">// 进行规约操作并更新栈</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">||</span> <span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"移进</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
            <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">该单词串不是该文法的句子</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">该单词串不是该文法的句子</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="11-生成并打印语法树">11. 生成并打印语法树</h3>
<ul>
  <li>如果规约成功，生成语法树并打印。</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
    <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"接受</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"accept</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">生成的语法树: </span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printTree</span><span class="p">(</span><span class="n">sn</span><span class="p">[</span><span class="n">sn_c</span><span class="p">],</span>

 <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">deleteTree</span><span class="p">(</span><span class="n">sn</span><span class="p">[</span><span class="n">sn_c</span><span class="p">]);</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 规约成功</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="源程序">源程序</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">state</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">sn_c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="cm">/*
E-&gt;E+T|T
T-&gt;T*F|F
F-&gt;(E)|i
#

(b+9)*a
(b+8)+*a#
*/</span>
<span class="cm">/*
E-&gt;E+T|T
T-&gt;T*F|F
F-&gt;P^F|P
P-&gt;(E)|i

S-&gt;a|^|(T)
T-&gt;T,S|S
*/</span>
<span class="c1">//.............................</span>

<span class="kt">char</span> <span class="n">table</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span> <span class="c1">// 算符优先关系表</span>
<span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
<span class="kt">char</span> <span class="n">str_in</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">10</span><span class="p">];</span>
<span class="kt">char</span> <span class="n">T_label</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
<span class="kt">char</span> <span class="n">input_s</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">FVT</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">LVT</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">r</span><span class="p">;</span> <span class="c1">// 文法规则个数</span>
<span class="kt">int</span> <span class="n">r1</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">N</span><span class="p">;</span>
<span class="kt">char</span> <span class="n">grammar</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">30</span><span class="p">];</span> <span class="c1">// 用来存储文法产生式</span>
<span class="kt">char</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">10</span><span class="p">];</span> <span class="c1">// FIRSTVT集</span>
<span class="kt">char</span> <span class="n">LASTVT</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">10</span><span class="p">];</span>  <span class="c1">// LASTVT集</span>

<span class="kt">int</span> <span class="nf">test_s</span><span class="p">();</span> <span class="c1">// 字串分析</span>
<span class="kt">int</span> <span class="nf">is_T</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">index</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">stack_p</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span> <span class="c1">// 打印</span>
<span class="kt">void</span> <span class="nf">firstvt</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>                <span class="c1">// 求FIRSTVT集</span>
<span class="kt">void</span> <span class="nf">lastvt</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">);</span>                 <span class="c1">// 求LASTVT集</span>
<span class="kt">void</span> <span class="nf">P_table</span><span class="p">();</span>                      <span class="c1">// 生成算符文法优先关系表</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="nc">TNode</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">table</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">TNode</span> <span class="o">*</span><span class="n">child</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
<span class="p">}</span> <span class="n">TreeNode</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">printTree</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">flag</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">newflag</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"  "</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"│"</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"├"</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"└"</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"─"</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"  "</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="nf">printf</span><span class="p">(</span><span class="s">"─"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span>
            <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">newflag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="n">newflag</span> <span class="o">|=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">newflag</span> <span class="o">|=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">state</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="n">state</span><span class="p">[</span><span class="n">depth</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

        <span class="n">tmp</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="c1">// printTree(root-&gt;child[i], depth + 1, newflag);</span>
        <span class="n">state</span><span class="p">[</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">add_node</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">TreeNode</span> <span class="o">*</span><span class="n">sub</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">n</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">deleteTree</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="n">deleteTree</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">child</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">free</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">TreeNode</span> <span class="o">*</span><span class="nf">new_node</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">table</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">TreeNode</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">TreeNode</span><span class="p">));</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">table</span> <span class="o">=</span> <span class="n">table</span><span class="p">;</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">TreeNode</span> <span class="o">*</span><span class="n">sn</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">P_table</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">text</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">10</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">firstvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">lastvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">y</span><span class="o">++</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'|'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
                <span class="n">x</span><span class="o">++</span><span class="p">;</span>
                <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                <span class="n">y</span><span class="o">++</span><span class="p">;</span>
                <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'-'</span><span class="p">;</span>
                <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&gt;'</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
                <span class="n">y</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">text</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
        <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">r1</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="c1">// printf("产生式展开\n");</span>
    <span class="c1">// for (i = 0; i &lt; x; i++)</span>
    <span class="c1">// {</span>
    <span class="c1">//     printf("%s\n", text[i]);</span>
    <span class="c1">// }</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">str_in</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">,</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span>
            <span class="n">str_in</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>

        <span class="n">str_in</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span>
            <span class="p">{</span>
                <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符优先文法</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'='</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span> <span class="o">&amp;&amp;</span> <span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span>
            <span class="p">{</span>
                <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符优先文法</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'='</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">FIRSTVT</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符优先文法</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&lt;'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">is_T</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">LASTVT</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">|</span> <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">printf</span><span class="p">(</span><span class="s">"该文法不是算符优先文法</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                    <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&gt;'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">FIRSTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&lt;'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">LASTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">LASTVT</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">t</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="n">table</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'&gt;'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">table</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'='</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">firstvt</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">FVT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'|'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]))</span>
                <span class="p">{</span>
                    <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
                    <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]))</span>
                    <span class="p">{</span>
                        <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">2</span><span class="p">];</span>
                        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">c</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">firstvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
                        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                                <span class="k">break</span><span class="p">;</span>
                        <span class="p">}</span>
                        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
                            <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="k">if</span> <span class="p">(</span><span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">==</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                                    <span class="k">break</span><span class="p">;</span>
                            <span class="p">}</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
                                <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">m</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">);</span>
        <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
        <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">--</span><span class="n">n</span><span class="p">;</span>
        <span class="n">FVT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">lastvt</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">LVT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

        <span class="k">do</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'\0'</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'|'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]))</span>
                <span class="p">{</span>
                    <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">];</span>
                    <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span>
                    <span class="p">{</span>
                        <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
                        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                    <span class="p">}</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">!=</span> <span class="n">c</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">lastvt</span><span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]);</span>
                        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">])</span>
                                <span class="k">break</span><span class="p">;</span>

                        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
                            <span class="k">for</span> <span class="p">(</span><span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span>
                                <span class="k">if</span> <span class="p">(</span><span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">t</span><span class="p">]</span> <span class="o">==</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                                    <span class="k">break</span><span class="p">;</span>

                            <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span>
                            <span class="p">{</span>
                                <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">LASTVT</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
                                <span class="n">n</span><span class="o">++</span><span class="p">;</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">m</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">);</span>

        <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
        <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">--</span><span class="n">n</span><span class="p">;</span>
        <span class="n">LVT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">test_s</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">;</span>
    <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="c1">// printf("栈             输入串         动作\n");</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">input_s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">;</span>
    <span class="n">z</span> <span class="o">=</span> <span class="n">i</span><span class="o">--</span><span class="p">;</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">a</span> <span class="o">=</span> <span class="n">input_s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
        <span class="k">else</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
            <span class="c1">// printf("%c", a);</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
            <span class="c1">// printf("规约\n");</span>
            <span class="k">do</span>
            <span class="p">{</span>
                <span class="n">q</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]))</span>
                <span class="p">{</span>
                    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="c1">// printf("输入串错误\n");</span>
                        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">2</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="c1">// printf("输入串错误\n");</span>
                        <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">index</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'&lt;'</span><span class="p">);</span>

            <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">N</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">N1</span><span class="p">;</span>        <span class="c1">// 存放规约符号标号</span>
            <span class="kt">char</span> <span class="n">tep</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span> <span class="c1">// 存放最左素短语</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">tep</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
            <span class="p">}</span>

            <span class="k">for</span> <span class="p">(</span><span class="n">m</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">m</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">;</span> <span class="n">m</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">N</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">N</span> <span class="o">&lt;</span> <span class="n">r1</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span><span class="p">)</span>
                    <span class="k">for</span> <span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">m</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">is_T</span><span class="p">(</span><span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">n</span><span class="p">]))</span>
                        <span class="p">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">is_T</span><span class="p">(</span><span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
                            <span class="p">{</span>
                                <span class="n">s</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                                <span class="n">N1</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
                                <span class="k">break</span><span class="p">;</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">is_T</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">m</span><span class="p">]))</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">==</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">n</span><span class="p">])</span>
                            <span class="p">{</span>
                                <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">&amp;&amp;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">)</span>
                                <span class="p">{</span>
                                    <span class="c1">// printf("\n该单词串不是该文法的句子\n");</span>
                                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                                <span class="p">}</span>
                                <span class="n">s</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                                <span class="n">N1</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
                                <span class="k">break</span><span class="p">;</span>
                            <span class="p">}</span>
                    <span class="p">}</span>
            <span class="p">}</span>

            <span class="c1">//.................</span>
            <span class="c1">// N为根节点,s[j+1--k]为子节点</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">c_n</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
            <span class="n">c_n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">str_in</span><span class="p">[</span><span class="n">N1</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="n">c_n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
            <span class="n">TreeNode</span> <span class="o">*</span><span class="n">s2</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">c_n</span><span class="p">);</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">x</span><span class="o">--</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">char</span> <span class="o">*</span><span class="n">c_t</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
                <span class="n">c_t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">tep</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
                <span class="n">c_t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
                <span class="n">TreeNode</span> <span class="o">*</span><span class="n">s1</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span><span class="n">c_t</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">tep</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">tep</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'Z'</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">add_node</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="n">sn</span><span class="p">[</span><span class="n">sn_c</span><span class="p">]);</span>
                    <span class="n">sn_c</span><span class="o">--</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">add_node</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">sn_c</span><span class="o">++</span><span class="p">;</span>
            <span class="n">sn</span><span class="p">[</span><span class="n">sn_c</span><span class="p">]</span> <span class="o">=</span> <span class="n">s2</span><span class="p">;</span>
            <span class="c1">//......................</span>

            <span class="n">k</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
                <span class="c1">// printf("%c", a);</span>
                <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
                <span class="c1">// printf("接受\n");</span>
                <span class="c1">// printf("accept\n");</span>

                <span class="c1">// printf("\n生成的语法树: \n");</span>
                <span class="c1">// printTree(sn[sn_c], 0, 0);</span>
                <span class="n">deleteTree</span><span class="p">(</span><span class="n">sn</span><span class="p">[</span><span class="n">sn_c</span><span class="p">]);</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 规约成功</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'&lt;'</span> <span class="o">||</span> <span class="n">table</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'='</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 移进操作</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
            <span class="c1">// printf("%c", a);</span>
            <span class="n">stack_p</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">input_s</span><span class="p">);</span>
            <span class="c1">// printf("移进\n");</span>
            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
            <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="c1">// printf("\n该单词串不是该文法的句子\n");</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// printf("\n该单词串不是该文法的句子\n");</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">stack_p</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// printf("%c", s[i]);</span>
        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">;</span> <span class="n">n</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// printf(" ");</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">index</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span> <span class="c1">// 计算下标</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">is_T</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">)</span> <span class="c1">// 判断非终结符</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="n">T_label</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">initial</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">temps</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">"E-&gt;E+T|T"</span><span class="p">,</span> <span class="s">"T-&gt;T*F|F"</span><span class="p">,</span> <span class="s">"F-&gt;(E)|i"</span><span class="p">,</span> <span class="s">"#"</span><span class="p">};</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">temps</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temps</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">string</span> <span class="n">temp</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">res</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span> <span class="o">||</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'a'</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'z'</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="sc">'i'</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
        <span class="n">pos</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">res</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">input_s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// printf("输入产生式，以#结束");</span>
    <span class="c1">// S-&gt;a|^|(T)</span>
    <span class="c1">// T-&gt;T,S|S</span>
    <span class="n">initial</span><span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// scanf("%s", grammar[i]);</span>

        <span class="n">FIRSTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">LASTVT</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="p">)</span>
                    <span class="n">r</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">else</span>
                    <span class="n">r</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// 判断是否为算符文法</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="sc">'Z'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// printf("该文法不是算符文法\n!");</span>
                <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'Z'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'A'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'Z'</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// printf("该文法不是算符文法\n!");</span>
                    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'\0'</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="sc">'Z'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'-'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'&gt;'</span> <span class="o">&amp;&amp;</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'|'</span><span class="p">)</span>
                <span class="n">T_label</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">grammar</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">T_label</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="n">T_label</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
    <span class="n">P_table</span><span class="p">();</span>
    <span class="c1">// printf("\nFIRSTVT集\n");</span>
    <span class="c1">// for (i = 0; i &lt; r; i++)</span>
    <span class="c1">// {</span>
    <span class="c1">//     printf("%c: ", grammar[i][0]);</span>
    <span class="c1">//     for (j = 0; j &lt; FIRSTVT[i][0]; j++)</span>
    <span class="c1">//     {</span>
    <span class="c1">//         printf("%c ", FIRSTVT[i][j + 1]);</span>
    <span class="c1">//     }</span>
    <span class="c1">//     printf("\n");</span>
    <span class="c1">// }</span>
    <span class="c1">// printf("\nLASTVT集\n");</span>
    <span class="c1">// for (i = 0; i &lt; r; i++)</span>
    <span class="c1">// {</span>
    <span class="c1">//     printf("%c: ", grammar[i][0]);</span>
    <span class="c1">//     for (j = 0; j &lt; LASTVT[i][0]; j++)</span>
    <span class="c1">//     {</span>
    <span class="c1">//         printf("%c ", LASTVT[i][j + 1]);</span>
    <span class="c1">//     }</span>
    <span class="c1">//     printf("\n");</span>
    <span class="c1">// }</span>
    <span class="c1">// printf("\n算符优先分析表:\n");</span>

    <span class="c1">// for (i = 0; T_label[i] != '\0'; i++)</span>
    <span class="c1">//     printf("\t%c", T_label[i]);</span>

    <span class="c1">// printf("\n");</span>

    <span class="c1">// for (i = 0; i &lt; k + 1; i++)</span>
    <span class="c1">// {</span>
    <span class="c1">//     printf("%c\t", T_label[i]);</span>

    <span class="c1">//     for (j = 0; j &lt; k + 1; j++)</span>
    <span class="c1">//     {</span>
    <span class="c1">//         printf("%c\t", table[i][j]);</span>
    <span class="c1">//     }</span>
    <span class="c1">//     printf("\n");</span>
    <span class="c1">// }</span>

    <span class="c1">// printf("\n输入单词串\n");</span>

    <span class="c1">// scanf("%s", input_s);</span>
    <span class="c1">// for (int i = 0; i &lt; 100; i++)</span>
    <span class="c1">// {</span>
    <span class="c1">//     if ((input_s[i] &gt;= 'a' &amp;&amp; input_s[i] &lt;= 'z') || (input_s[i] &gt;= '0' &amp;&amp; input_s[i] &lt;= '9'))</span>
    <span class="c1">//     {</span>
    <span class="c1">//         input_s[i] = 'i';</span>
    <span class="c1">//     }</span>
    <span class="c1">// }</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">test_s</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Yes,it is correct."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"No,it is wrong."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="调试数据">调试数据</h2>

<p>样例输入</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(lparen,()

(ident,b)

(plus,+)

(number,9)

(rparen,))

(times,\*)

(ident,a)
</code></pre></div></div>

<p>样例输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Yes,it is correct.
</code></pre></div></div>

<p>运行结果</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E5%88%86%E6%9E%90.assets/image-20240618001516937.png" alt="image-20240618001516937" style="zoom: 50%;" /></p>

<h2 id="实验调试情况及体会">实验调试情况及体会</h2>

<p>在这个算符优先文法的实验过程中，我深刻体会到了程序设计的复杂性。尤其是在数据结构的设计阶段，耗费了大量的时间和精力。选择合适的数据结构来满足程序需求，这一步远比我想象中要困难得多。</p>

<p>回想起最初的几天，我一直在不同的数据结构之间反复权衡和尝试。每一种选择都需要考虑它的优缺点，如何才能最好地支持接下来的程序编写。这个过程充满了反复和不确定性，但也正是这个过程，让我对数据结构有了更深入的理解。</p>

<p>一旦数据结构确定下来，程序编写的过程就显得相对顺利了许多。看到程序能够对正确的输入做出正确的处理，内心有一种难以言表的成就感。然而，事情并没有那么简单。程序还缺乏查错纠错的能力，这使得它在面对错误输入时显得无力。这也是我在这次实验中最大的挑战之一。</p>

<p>为了增加查错纠错功能，我花费了大量的时间和精力。每次遇到问题，我都不得不重新思考程序的逻辑，调整代码，进行无数次的调试。这段时间的工作虽然艰难，但也让我学会了如何更好地处理错误，如何使程序更加健壮和可靠。</p>

<p>在整个编程过程中，我逐渐意识到，编写代码不仅仅是技术上的挑战，更是一种艺术。需要在理性与感性之间找到平衡，既要严谨细致，又要灵活变通。调试的过程虽然痛苦，但每次成功解决一个问题，都让我感到无比的喜悦。</p>

<p>这次实验不仅让我在技术上有所提升，更让我在心态上得到了磨炼。我学会了如何面对复杂的问题，如何在困境中找到解决的办法。这段经历让我对编程有了新的认识和更深的热爱。尽管过程艰难，但我为自己最终完成任务感到自豪。</p>

<p>感谢这次实验，让我在编程的道路上迈出了重要的一步。未来，我将继续努力，不断提升自己的技能，迎接更多的挑战。</p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">嵌入式 第四次实验 设备驱动实验</title><link href="http://localhost:4000/2024/04/22/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="嵌入式 第四次实验 设备驱动实验" /><published>2024-04-22T00:00:00+08:00</published><updated>2024-04-22T00:00:00+08:00</updated><id>http://localhost:4000/2024/04/22/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/04/22/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%AE%9E%E9%AA%8C.html"><![CDATA[<h2 id="嵌入式-第二次实验-设备驱动实验">嵌入式 第二次实验 设备驱动实验</h2>

<!---more-->
<style> .pdf-embed-wrap-6e4566f5-00dc-4460-a16d-ad1a664c61a8 { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-6e4566f5-00dc-4460-a16d-ad1a664c61a8 { height: 100%; } .pdf-embed-container-6e4566f5-00dc-4460-a16d-ad1a664c61a8 iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-6e4566f5-00dc-4460-a16d-ad1a664c61a8"> <div class="pdf-embed-container-6e4566f5-00dc-4460-a16d-ad1a664c61a8"> <iframe src="/assets/pdf/嵌入式/第四次实验.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="嵌入式" /><category term="实验报告" /><summary type="html"><![CDATA[嵌入式 第二次实验 设备驱动实验]]></summary></entry><entry><title type="html">编译原理 第二次实验 自上而下语法分析</title><link href="http://localhost:4000/2024/04/11/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html" rel="alternate" type="text/html" title="编译原理 第二次实验 自上而下语法分析" /><published>2024-04-11T00:00:00+08:00</published><updated>2024-04-11T00:00:00+08:00</updated><id>http://localhost:4000/2024/04/11/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/2024/04/11/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.html"><![CDATA[<p><!---more--></p>
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1-538-png_6_0_0_188_115_242_92_893.024_1263-1400-0-255-1400.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616111344139.png" alt="校徽" style="width:100%;" /></div>
    <br /><br /> <!---more-->
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《编译原理实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">第二次实验 自上而下语法分析</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024-春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">刘善梅</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 4月 11 日</p>
</div>

<p>[TOC]</p>

<h1 id="编译原理-第二次实验-自上而下语法分析">编译原理 第二次实验 自上而下语法分析</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>能采用LL(1)分析法对一个算术表达式<strong>(a+15)*b</strong>做自上而下的语法分析；</li>
  <li>可自行设计一个文法，能识别类似(a+15)*b句子的语言；</li>
  <li>也可基于PL/0语言的文法(完整文法参见本文档最后的附录)来做，若基于PL/0语言文法，需重点关注以下几条文法的EBNF，若不习惯看文法的巴科斯范式EBNF,可先将文法改写成常规的产生式形式P75。</li>
  <li>通过设计、编制、调试一个具体的文法分析程序，深入理解LL(1)预测分析法的基本分析原理.</li>
  <li>理解FIRST集、FOLLOW集的构造方法并对其加以实现，构造LL(1)预测分析表并利用分析表对语句、文法进行分析。</li>
  <li>加深对的语法分析的理解</li>
</ul>

<blockquote>
  <p><strong>PL/0</strong> <strong>语言文法的EBNF</strong></p>

  <程序>::=<分程序>.

<分程序> ::=\[<常量说明>]\[<变量说明>][<过程说明>]<语句>

<常量说明> ::=CONST<常量定义>{，<常量定义>};

<常量定义> ::=<标识符>=<无符号整数>

<无符号整数> ::= <数字>{<数字>}

<变量说明> ::=VAR <标识符>{, <标识符>};

<标识符> ::=<字母>{<字母>|<数字>}

<过程说明> ::=<过程首部><分程序>{; <过程说明> };

<过程首部> ::=PROCEDURE <标识符>;

<语句> ::=<赋值语句>|<条件语句>|<当循环语句>|<过程调用语句>

​        |<复合语句>|<读语句><写语句>|<空>

<赋值语句> ::=<标识符>:=<表达式>

<复合语句> ::=BEGIN <语句> {;<语句> }END

<条件语句> ::= <表达式> <关系运算符> <表达式> |ODD<表达式>

<表达式> ::= [+|-]<项>{<加法运算符> <项>}

<项> ::= <因子>{<乘法运算符> <因子>}

<因子> ::= <标识符>|<无符号整数>| ‘(’<表达式>‘)’

<加法运算符> ::= +|-

<乘法运算符> ::= *|/

<关系运算符> ::= =|#|&lt;|&lt;=|&gt;|&gt;=

<条件语句> ::= IF <条件> THEN <语句>

<过程调用语句> ::= CALL 标识符

<当循环语句> ::= WHILE <条件> DO <语句>

<读语句> ::= READ‘(’<标识符>{,<标识符>}‘)’

<写语句> ::= WRITE‘(’<表达式>{,<表达式>}‘)’

<字母> ::= a|b|…|X|Y|Z

<数字> ::= 0|1|…|8|9

**PL/0 语言文法的产生式**

```gfm
E-&gt;AXF|XF
F-&gt;AXF|@
X-&gt;YZ
Z-&gt;CYZ|@
Y-&gt;b|z|(E)
A-&gt;+|-
C-&gt;*|/
```

@ 代表 空
</数字></字母></表达式></表达式></写语句></标识符></标识符></读语句></语句></条件></当循环语句></过程调用语句></语句></条件></条件语句></关系运算符></乘法运算符></加法运算符></表达式></无符号整数></标识符></因子></因子></乘法运算符></因子></项></项></加法运算符></项></表达式></表达式></表达式></关系运算符></表达式></条件语句></语句></语句></复合语句></表达式></标识符></赋值语句></空></写语句></读语句></复合语句></过程调用语句></当循环语句></条件语句></赋值语句></语句></标识符></过程首部></过程说明></分程序></过程首部></过程说明></数字></字母></字母></标识符></标识符></标识符></变量说明></数字></数字></无符号整数></无符号整数></标识符></常量定义></常量定义></常量定义></常量说明></语句></过程说明></变量说明></常量说明></分程序></分程序></程序>
</blockquote>

<h2 id="实验任务">实验任务</h2>

<blockquote>
  <p>采用预测分析法实现自上而下的语法分析；采用递归下降分析法得到的结果不得分。若自行设计的文法含左递归，要写程序消除左递归。</p>

  <p>​    编程基础扎实的同学，强烈建议<strong>用程序分别求解</strong>first集和follow集，并用程序实现预测分析表；</p>

  <p>​    编程基础非常薄弱的同学，可以人工求解first集和follow集，人工设计好预测分析表，然后直接在程序中给出手工设计好的预测分析表。</p>

  <p>​    编程基础尚可的同学，可根据自身情况<strong>编程求解</strong> <strong>first集</strong>、<strong>follow集</strong>和<strong>预测分析表</strong>这三个部分的某些部分。（书上都有算法，建议同学们尽量用程序实现）</p>
</blockquote>

<p>我实现了<strong>用程序分别求解</strong>first集和follow集，并用程序实现预测分析表；</p>

<h3 id="实验完成程度">实验完成程度</h3>

<table>
  <thead>
    <tr>
      <th>实现的内容</th>
      <th>实现的方式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>求解First集</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解Follow集</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>求解预测分析表</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>判断是否是LL（1）文法</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>使用预测分析表进行分析</td>
      <td>程序实现</td>
    </tr>
    <tr>
      <td>是否仅支持PL/0文法</td>
      <td>否、可以输出其他文法和句子进行判断</td>
    </tr>
  </tbody>
</table>

<h2 id="设计思想">设计思想</h2>

<p>LL(1)语法分析器的实现相比递归下降而言复杂了很多，但概括起来程序的实现总共需要如下几步：</p>

<ol>
  <li>构造非终结符的First集</li>
  <li>构造非终结符的Follow集</li>
  <li>根据First集和Follow集构造LL(1)分析表</li>
  <li>判断是否是LL（1）文法</li>
  <li>根据分析表构造分析栈逐个匹配</li>
</ol>

<p><img src="https://hnjia00.github.io/images/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/LL1%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/data.png" alt="img" /></p>

<h3 id="1-数据结构设计">1. 数据结构设计</h3>

<ul>
  <li><strong>字符与编号映射</strong>：使用<code class="language-plaintext highlighter-rouge">map</code>数据结构将字符映射到编号(<code class="language-plaintext highlighter-rouge">gtnum</code>)以及编号映射到字符(<code class="language-plaintext highlighter-rouge">gtchar</code>)，方便快速查找。</li>
  <li><strong>文法集合</strong>：使用<code class="language-plaintext highlighter-rouge">vector&lt;string&gt;</code>存储文法产生式集合。</li>
  <li><strong>预测分析表</strong>：使用二维数组<code class="language-plaintext highlighter-rouge">table</code>存储预测分析表。</li>
  <li><strong>First、Follow、Select 集合</strong>：使用字符串数组分别存储每个非终结符的First、Follow、Select集合。</li>
</ul>

<h3 id="2-初始化与输入读取">2. 初始化与输入读取</h3>

<ul>
  <li><strong>读取文法规则</strong>：通过字符串流(<code class="language-plaintext highlighter-rouge">stringstream</code>)读取预定义的文法规则、终结符和非终结符。将这些符号映射到唯一编号，并存储在相应的数据结构中。</li>
</ul>

<h3 id="3-first集合计算">3. First集合计算</h3>

<ul>
  <li><strong>递归计算</strong>：对每个终结符，其First集合是其本身。对每个非终结符，递归计算其First集合，通过合并产生式右部各符号的First集合来获取。</li>
  <li><strong>合并与判断空字</strong>：使用<code class="language-plaintext highlighter-rouge">Union</code>函数合并多个集合，并判断产生式能否推出空字。</li>
</ul>

<h3 id="4-follow集合计算">4. Follow集合计算</h3>

<ul>
  <li><strong>初始化Follow集合</strong>：对开始符号，其Follow集合初始化为包含终结符<code class="language-plaintext highlighter-rouge">#</code>。</li>
  <li><strong>递归获取</strong>：遍历所有产生式，考虑右部符号的后续符号的First集合，根据能否推出空字来更新Follow集合。</li>
</ul>

<h3 id="5-select集合计算">5. Select集合计算</h3>

<ul>
  <li><strong>直接推出空字</strong>：对于右部能直接推出空字的产生式，Select集合为左部符号的Follow集合。</li>
  <li><strong>合并First集合</strong>：对其他产生式，Select集合为右部第一个符号的First集合，如果多个符号均可推出空字，则继续考虑后续符号的First集合，直到无法推出空字为止。</li>
</ul>

<h3 id="6-预测分析表生成">6. 预测分析表生成</h3>

<ul>
  <li><strong>构建表项</strong>：根据Select集合构建预测分析表。对于能直接推出空字的产生式，使用Follow集合填表。对于其他产生式，使用First集合填表。</li>
</ul>

<h3 id="7-ll1文法检查">7. LL(1)文法检查</h3>

<ul>
  <li><strong>交集判断</strong>：定义<code class="language-plaintext highlighter-rouge">intersection</code>函数检查两个集合是否有交集。遍历所有产生式，检查同一个非终结符的不同产生式的Select集合是否有交集。</li>
  <li><strong>结果输出</strong>：如果有交集，则输出产生冲突的Select集合，并判定该文法不是LL(1)文法；如果所有Select集合均无交集，则判定该文法是LL(1)文法。</li>
</ul>

<h3 id="8-句子合法性分析">8. 句子合法性分析</h3>

<ul>
  <li><strong>分析过程</strong>：定义一个<code class="language-plaintext highlighter-rouge">analyze</code>函数，通过栈模拟分析过程。初始化栈并推入起始符号和终结符。逐步从输入串中读取符号，并根据预测分析表中的指引，逐步匹配和推导输入串。</li>
  <li><strong>结果判定</strong>：如果输入串能够完全匹配并使栈空，则输入串符合文法；否则，不符合文法。</li>
</ul>

<h2 id="算法流程">算法流程</h2>

<h3 id="算法流程图">算法流程图</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240617092002921.png" alt="image-20240617092002921" /></p>

<p><strong>本次实验是先实现了对各种文法的一般算法，然后为了让itc通过，对itc 的输入格式进行了适配的，所以本质上还是可以通过输入文法来进行LL1分析的。</strong></p>

<h3 id="1-获取first集">1 获取First集</h3>

<ol>
  <li><strong>初始化</strong>：
    <ul>
      <li>对于每个终结符，First集是其本身。</li>
      <li>初始化所有非终结符的First集为空集。</li>
    </ul>
  </li>
  <li><strong>处理每个产生式</strong>：
    <ul>
      <li>对于每个产生式$A \rightarrow \alpha$，我们从左到右处理’产生式中的每个符号。</li>
      <li>如果是终结符，直接加入 A 的First集。</li>
      <li>如果是非终结符，将该非终结符的First集（去掉空字）加入 A 的First集。</li>
      <li>如果该非终结符可以推出空字（$\epsilon$），继续处理下一个符号。</li>
      <li>如果所有符号都可以推出空字，则将空字加入 A 的First集。</li>
    </ul>
  </li>
</ol>

<h3 id="2-获取follow集">2 获取Follow集</h3>

<ol>
  <li><strong>初始化</strong>：
    <ul>
      <li>对于开始符号，将结束符号（#）加入其Follow集。</li>
    </ul>
  </li>
  <li><strong>处理每个产生式</strong>：
    <ul>
      <li>对于每个产生式$ A \rightarrow \alpha B \beta$，将 β\betaβ 的First集（去掉空字）加入 B 的Follow集。</li>
      <li>如果 $\beta$ 可以推出空字，将 A 的Follow集加入 B 的Follow集。</li>
    </ul>
  </li>
  <li><strong>迭代处理</strong>：
    <ul>
      <li>多次扫描所有产生式，直到所有Follow集都不再变化。</li>
    </ul>
  </li>
</ol>

<h3 id="3-获取select集">3 获取Select集</h3>

<ol>
  <li>处理每个产生式：
    <ul>
      <li>对于每个产生式$ A \rightarrow \alpha$：
        <ul>
          <li>如果$ \alpha$可以直接推出空字，将 A 的Follow集加入该产生式的Select集。</li>
          <li>否则，将$ \alpha$​的First集加入该产生式的Select集。、</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="4-检查ll1文法">4 检查LL(1)文法：</h3>

<ul>
  <li>遍历所有产生式，检查同一个非终结符对应的不同产生式的Select集是否有交集。</li>
  <li>如果有交集，说明该文法不是LL(1)文法，并输出产生冲突的Select集。</li>
  <li>如果没有交集，说明该文法是LL(1)文法。</li>
</ul>

<h3 id="5-获取预测分析表">5 获取预测分析表</h3>

<ol>
  <li><strong>初始化</strong>：
    <ul>
      <li>初始化预测分析表为-1，表示为空。</li>
    </ul>
  </li>
  <li><strong>处理每个产生式</strong>：
    <ul>
      <li>对于每个产生式 $A \rightarrow \alpha$
        <ul>
          <li>对于该产生式的Select集中的每个终结符，将对应表项设置为该产生式的编号。</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="6-根据预测分析表构造分析栈并逐个匹配输入字符串">6 根据预测分析表构造分析栈并逐个匹配输入字符串</h3>

<ol>
  <li><strong>初始化分析栈</strong>：
    <ul>
      <li>分析栈初始状态为 <code class="language-plaintext highlighter-rouge">#</code> 和开始符号。</li>
      <li>输入串在末尾加上结束符号 <code class="language-plaintext highlighter-rouge">#</code>。</li>
    </ul>
  </li>
  <li><strong>逐步匹配</strong>：
    <ul>
      <li>栈顶符号与当前输入符号进行比较。</li>
      <li>如果栈顶符号与当前输入符号相同，匹配成功，弹出栈顶符号并推进输入符号。</li>
      <li>如果栈顶符号是非终结符，查预测分析表，根据表中的产生式进行展开，即用产生式右部替换栈顶符号。</li>
      <li>如果栈顶符号是终结符且与当前输入符号不同，或者预测分析表中无对应产生式，解析失败。</li>
      <li>当栈为空且输入符号也匹配完毕时，解析成功。</li>
    </ul>
  </li>
</ol>

<h3 id="具体流程实现">具体流程实现</h3>

<h4 id="1-初始化与读取输入">1. 初始化与读取输入</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">readin</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">stringstream</span> <span class="n">datascin</span><span class="p">(</span><span class="n">datas</span><span class="p">);</span>
    <span class="n">stringstream</span> <span class="n">endcin</span><span class="p">(</span><span class="n">endchar</span><span class="p">);</span>
    <span class="n">stringstream</span> <span class="n">noendcin</span><span class="p">(</span><span class="n">noendchar</span><span class="p">);</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table</span><span class="p">));</span>
    <span class="n">gtnum</span><span class="p">[</span><span class="sc">'#'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">gtchar</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">endcin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">gtnum</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
        <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">endcin</span><span class="p">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">'\n'</span><span class="p">);</span>
    <span class="n">numvt</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
    <span class="n">gtnum</span><span class="p">[</span><span class="sc">'@'</span><span class="p">]</span> <span class="o">=</span> <span class="n">numvt</span><span class="p">;</span> <span class="c1">// 空，用@表示</span>
    <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sc">'@'</span><span class="p">);</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">noendcin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">gtnum</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
        <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">noendcin</span><span class="p">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">'\n'</span><span class="p">);</span>
    <span class="n">string</span> <span class="n">pro</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">datascin</span> <span class="o">&gt;&gt;</span> <span class="n">pro</span> <span class="o">&amp;&amp;</span> <span class="n">pro</span> <span class="o">!=</span> <span class="s">"end"</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">string</span> <span class="n">ss</span><span class="p">;</span>
        <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pro</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pro</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'|'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">proce</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
                <span class="n">ss</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
                <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">proce</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="2-生成first集">2. 生成First集</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">getfirst</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">numvt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]</span> <span class="o">+=</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">numvt</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">has_0</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3-生成follow集">3. 生成Follow集</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cpp</span><span class="err">复制代码</span><span class="kt">void</span> <span class="nf">getfollow</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]],</span> <span class="s">"0"</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">jj</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">jj</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">jj</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">numvt</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">jj</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">has_0</span><span class="p">;</span>
            <span class="k">do</span>
            <span class="p">{</span>
                <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">k</span><span class="o">++</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]],</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">has_0</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="4-生成select集">4. 生成Select集</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">getselect</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'@'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]];</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="n">numvt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]];</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">flag1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">tepf</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]]];</span>
            <span class="kt">int</span> <span class="n">flag2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">tepf</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">tepf</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">numvt</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">flag2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flag2</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">tepf</span><span class="p">);</span>
                <span class="n">flag1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kt">int</span> <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
            <span class="n">flag1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">flag1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="5-检查ll1文法条件">5. 检查LL(1)文法条件</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">intersection</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="nf">check_LL1</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">intersection</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
                <span class="p">{</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"此文法不是LL(1)文法, 原因如下："</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"select ( "</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"-&gt;"</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" ) = "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"select ( "</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"-&gt;"</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" ) = "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"两个产生式的交集不为空集！"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="6-句子合法性分析">6. 句子合法性分析</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cpp</span><span class="err">复制代码</span><span class="kt">bool</span> <span class="nf">analyze</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sta</span><span class="p">;</span>
    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">sta</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">sta</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">sta</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">cur</span><span class="p">]][</span><span class="n">gtnum</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]]]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">cur</span><span class="p">]][</span><span class="n">gtnum</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]]];</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'@'</span><span class="p">)</span>
                    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="源程序逐行注释">源程序（逐行注释）</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
#define MaxSize 200
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">/// 定义有关数据结构体</span>
<span class="c1">// const int MaxSize = 200;     // 定义常量，表示数组最大长度</span>
<span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">gtnum</span><span class="p">;</span>        <span class="c1">// 获得对应编号</span>
<span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span><span class="o">&gt;</span> <span class="n">gtchar</span><span class="p">;</span>       <span class="c1">// 获得对应字符</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">proce</span><span class="p">;</span>        <span class="c1">// 定义文法集合</span>
<span class="kt">int</span> <span class="n">table</span><span class="p">[</span><span class="n">MaxSize</span><span class="p">][</span><span class="n">MaxSize</span><span class="p">];</span> <span class="c1">// 预测分析表</span>
<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                 <span class="c1">// 字符计数器</span>
<span class="kt">int</span> <span class="n">numvt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>               <span class="c1">// numvt是终结符的个数，</span>
<span class="n">string</span> <span class="n">word</span><span class="p">;</span>                 <span class="c1">// 存放输入的字符串</span>
<span class="n">string</span> <span class="n">first</span><span class="p">[</span><span class="n">MaxSize</span><span class="p">];</span>       <span class="c1">// 定义first集合</span>
<span class="n">string</span> <span class="n">follow</span><span class="p">[</span><span class="n">MaxSize</span><span class="p">];</span>      <span class="c1">// 定义follow集合</span>
<span class="n">string</span> <span class="n">selects</span><span class="p">[</span><span class="n">MaxSize</span><span class="p">];</span>     <span class="c1">// 定义select集合</span>

<span class="c1">/// 定义文法</span>
<span class="n">string</span> <span class="n">datas</span> <span class="o">=</span> <span class="s">R"(E-&gt;AXF|XF
F-&gt;AXF|@
X-&gt;YZ
Z-&gt;CYZ|@
Y-&gt;b|z|(E)
A-&gt;+|-
C-&gt;*|/
end)"</span><span class="p">;</span>
<span class="c1">///</span>
<span class="n">string</span> <span class="n">endchar</span> <span class="o">=</span> <span class="s">R"(+ - * / ( ) b z
)"</span><span class="p">;</span>
<span class="n">string</span> <span class="n">noendchar</span> <span class="o">=</span> <span class="s">R"(E F X Z Y A C
)"</span><span class="p">;</span>

<span class="c1">/// 读入函数</span>
<span class="kt">void</span> <span class="nf">readin</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">stringstream</span> <span class="n">datascin</span><span class="p">(</span><span class="n">datas</span><span class="p">);</span>
    <span class="n">stringstream</span> <span class="n">endcin</span><span class="p">(</span><span class="n">endchar</span><span class="p">);</span>
    <span class="n">stringstream</span> <span class="n">noendcin</span><span class="p">(</span><span class="n">noendchar</span><span class="p">);</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table</span><span class="p">));</span>
    <span class="n">gtnum</span><span class="p">[</span><span class="sc">'#'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">gtchar</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'#'</span><span class="p">;</span>
    <span class="c1">// cout &lt;&lt; "请输入该文法包含的所有终结符：" &lt;&lt; endl;</span>
    <span class="kt">char</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">endcin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">gtnum</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
        <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">endcin</span><span class="p">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">'\n'</span><span class="p">);</span>
    <span class="n">numvt</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
    <span class="n">gtnum</span><span class="p">[</span><span class="sc">'@'</span><span class="p">]</span> <span class="o">=</span> <span class="n">numvt</span><span class="p">;</span> <span class="c1">// 空，用@表示</span>
    <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="sc">'@'</span><span class="p">);</span>
    <span class="c1">// cout &lt;&lt; "请输入该文法包含的所有非终结符：" &lt;&lt; endl;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">noendcin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">gtnum</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">num</span><span class="p">;</span>
        <span class="n">gtchar</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">noendcin</span><span class="p">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">'\n'</span><span class="p">);</span>
    <span class="c1">// cout &lt;&lt; "输入要判断的文法（空字用'@'表示）,以'end'结束:" &lt;&lt; endl;</span>
    <span class="n">string</span> <span class="n">pro</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">datascin</span> <span class="o">&gt;&gt;</span> <span class="n">pro</span> <span class="o">&amp;&amp;</span> <span class="n">pro</span> <span class="o">!=</span> <span class="s">"end"</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">string</span> <span class="n">ss</span><span class="p">;</span>
        <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">pro</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">pro</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'|'</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">proce</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
                <span class="n">ss</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
                <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">ss</span> <span class="o">+=</span> <span class="n">pro</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">proce</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 定义交集函数</span>
<span class="kt">void</span> <span class="nf">Union</span><span class="p">(</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">)</span> <span class="c1">// a=a or b 取a,b交集赋值给a</span>
<span class="p">{</span>
    <span class="n">set</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">se</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">se</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">se</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">string</span> <span class="n">ans</span><span class="p">;</span>
    <span class="n">set</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">it</span> <span class="o">=</span> <span class="n">se</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">se</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">it</span><span class="o">++</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="o">*</span><span class="n">it</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 利用dfs返回first(Vn)-@集合，并且判断vn能否推出空字</span>
<span class="n">string</span> <span class="nf">get_first</span><span class="p">(</span><span class="kt">int</span> <span class="n">vn</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">has_0</span><span class="p">)</span> <span class="c1">// dfs:vn能推出的不含空字的vt集合，并且判断vn能否推出空字</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">vn</span> <span class="o">==</span> <span class="n">numvt</span><span class="p">)</span>
        <span class="n">has_0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">vn</span> <span class="o">&lt;</span> <span class="n">numvt</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">first</span><span class="p">[</span><span class="n">vn</span><span class="p">];</span>
    <span class="n">string</span> <span class="n">ans</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">==</span> <span class="n">vn</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 获得产生式</span>
<span class="n">string</span> <span class="nf">get_proce</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="c1">// 由对应下标获得对应产生式。</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">" "</span><span class="p">;</span> <span class="c1">// 无该产生式</span>
    <span class="n">string</span> <span class="n">ans</span><span class="p">;</span>
    <span class="n">ans</span> <span class="o">+=</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
    <span class="n">ans</span> <span class="o">+=</span> <span class="s">"-&gt;"</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 定义first函数</span>
<span class="kt">void</span> <span class="nf">getfirst</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">numvt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span> <span class="c1">// 终结符，first集是其本身。</span>
        <span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span> <span class="c1">// 扫描所有产生式</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// k扫瞄该产生式</span>
        <span class="k">do</span>
        <span class="p">{</span>
            <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">())</span>
            <span class="p">{</span> <span class="c1">// 推到最后一个了，则附加空字</span>
                <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]</span> <span class="o">+=</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">numvt</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span> <span class="c1">// 合并之</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">has_0</span><span class="p">);</span> <span class="c1">// 到无法推出空字为止</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 定义follow函数</span>
<span class="kt">void</span> <span class="nf">getfollow</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]],</span> <span class="s">"0"</span><span class="p">);</span> <span class="c1">// 先添加'#'；</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span> <span class="c1">// 扫所有产生式</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">jj</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">jj</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">jj</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 每个非终结符的follow集</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]</span> <span class="o">&lt;=</span> <span class="n">numvt</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span> <span class="c1">// vt无follow集</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">jj</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">has_0</span><span class="p">;</span>
            <span class="k">do</span>
            <span class="p">{</span>
                <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">k</span><span class="o">++</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">())</span>
                <span class="p">{</span> <span class="c1">// 都能推出空字，follow集=产生式左边的vn，</span>
                    <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]],</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]);</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">Union</span><span class="p">(</span><span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">jj</span><span class="p">]]],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">has_0</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 定义select函数</span>
<span class="kt">void</span> <span class="nf">getselect</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 扫描所有的产生式</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// 直接推导出空的产生式</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'@'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]];</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="n">numvt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]];</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">flag1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">string</span> <span class="n">tepf</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]]];</span>
            <span class="kt">int</span> <span class="n">flag2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">tepf</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">tepf</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">numvt</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">flag2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flag2</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">tepf</span><span class="p">);</span>
                <span class="n">flag1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="kt">int</span> <span class="n">has_0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">get_first</span><span class="p">(</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]],</span> <span class="n">has_0</span><span class="p">));</span>
            <span class="n">flag1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">flag1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Union</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 打印first函数</span>
<span class="kt">void</span> <span class="nf">print_first</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span>
         <span class="o">&lt;&lt;</span> <span class="s">"该文法的first集如下:"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"first ("</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">") = "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">first</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 打印follow集合</span>
<span class="kt">void</span> <span class="nf">print_follow</span><span class="p">()</span>

<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"该文法的follow集如下："</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">numvt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"follow ("</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">") = "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">follow</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">follow</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 打印select集合</span>
<span class="kt">void</span> <span class="nf">printselect</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"该文法的select集如下："</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"select ( "</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"-&gt;"</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" ) = "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 定义预测分析表</span>
<span class="kt">void</span> <span class="nf">gettable</span><span class="p">()</span> <span class="c1">// 得预测分析表</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span> <span class="c1">// 扫所有产生式</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'@'</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 直接推出空字的，特判下（follow集=产生式左边的vn中元素填）</span>
            <span class="n">string</span> <span class="n">flw</span> <span class="o">=</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]];</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">flw</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]][</span><span class="n">flw</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">string</span> <span class="n">temps</span> <span class="o">=</span> <span class="n">first</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">temps</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 考察first集</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">temps</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">+</span> <span class="n">numvt</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]][</span><span class="n">temps</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span> <span class="c1">// 有空字的，考察follw集</span>
                <span class="n">string</span> <span class="n">flw</span> <span class="o">=</span> <span class="n">follow</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]];</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">flw</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]][</span><span class="n">flw</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 打印预测分析表</span>
<span class="kt">void</span> <span class="nf">print_table</span><span class="p">()</span>

<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span>
         <span class="o">&lt;&lt;</span> <span class="s">"该文法的预测分析表如下："</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numvt</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\t'</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">numvt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">numvt</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'\t'</span> <span class="o">&lt;&lt;</span> <span class="n">get_proce</span><span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 判断是否有交集</span>
<span class="kt">bool</span> <span class="nf">intersection</span><span class="p">(</span><span class="n">string</span> <span class="n">a</span><span class="p">,</span> <span class="n">string</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 判断是否为LL(1)文法</span>
<span class="c1">// First集中含有ε的非终结符的Follow集与其First集交集是否为空</span>
<span class="kt">bool</span> <span class="nf">check_LL1</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">proce</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">intersection</span><span class="p">(</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
                <span class="p">{</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"此文法不是LL(1)文法, 原因如下："</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"select ( "</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"-&gt;"</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" ) = "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">selects</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"select ( "</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">"-&gt;"</span> <span class="o">&lt;&lt;</span> <span class="n">proce</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">" ) = "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"{ "</span><span class="p">;</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
                        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">gtchar</span><span class="p">[</span><span class="n">selects</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"}"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"两个产生式的交集不为空集！"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// cout &lt;&lt; "此文法是LL(1)文法" &lt;&lt; endl;</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">/// 定义判断句子合法性函数</span>
<span class="kt">bool</span> <span class="nf">analyze</span><span class="p">()</span> <span class="c1">// 总控，分析字word的合法性，若合法，输出所有产生式。</span>
<span class="p">{</span>
    <span class="c1">// cout &lt;&lt; endl</span>
    <span class="c1">//      &lt;&lt; "分析所得的产生式如下：" &lt;&lt; endl;</span>
    <span class="n">stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">sta</span><span class="p">;</span>
    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="sc">'#'</span><span class="p">);</span>
    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">sta</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">sta</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">sta</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span> <span class="c1">// 是终结符，推进</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="sc">'#'</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 成功，结束</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">cur</span><span class="p">]][</span><span class="n">gtnum</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]]]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span> <span class="c1">// 查表</span>
            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">gtnum</span><span class="p">[</span><span class="n">cur</span><span class="p">]][</span><span class="n">gtnum</span><span class="p">[</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">]]];</span>
            <span class="c1">// cout &lt;&lt; proce[k][0] &lt;&lt; "-&gt;";</span>
            <span class="c1">// for (int j = 1; j &lt; proce[k].size(); j++)</span>
            <span class="c1">//     cout &lt;&lt; proce[k][j];</span>
            <span class="c1">// cout &lt;&lt; endl;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span>
            <span class="p">{</span> <span class="c1">// 逆序入栈</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'@'</span><span class="p">)</span>
                    <span class="n">sta</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">proce</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span> <span class="c1">// 失败！</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">string</span> <span class="nf">getInFomula</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">res</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">temp</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">temp</span><span class="p">)</span>
    <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="sc">'z'</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">'a'</span> <span class="o">&amp;&amp;</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">'z'</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="sc">'b'</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">temp</span><span class="p">[</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">2</span><span class="p">];</span>
        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>

    <span class="n">readin</span><span class="p">();</span>    <span class="c1">// 读入文法</span>
    <span class="n">getfirst</span><span class="p">();</span>  <span class="c1">// 获取此文法的first集</span>
    <span class="n">getfollow</span><span class="p">();</span> <span class="c1">// 获取此文法的follow集</span>
    <span class="n">getfollow</span><span class="p">();</span>
    <span class="n">getselect</span><span class="p">();</span> <span class="c1">// 获取此文法的Select集</span>
    <span class="n">gettable</span><span class="p">();</span>  <span class="c1">// 获取预测分析表</span>
    <span class="c1">// print_first();  // 打印first集</span>
    <span class="c1">// print_follow(); // 打印follow集</span>
    <span class="c1">// printselect();  // 打印select集</span>
    <span class="c1">// 判断是否是LL(1)文法</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">check_LL1</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="c1">// print_table(); // 打印此文法的预测表</span>
    <span class="c1">// cout &lt;&lt; "请输入一个字符串：" &lt;&lt; endl;</span>
    <span class="c1">// cin &gt;&gt; word;</span>
    <span class="n">word</span> <span class="o">=</span> <span class="n">getInFomula</span><span class="p">();</span> <span class="c1">// 输入要分析的字符串</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">analyze</span><span class="p">())</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Yes,it is correct."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"No,it is wrong."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></div></div>

<h2 id="调试数据">调试数据</h2>

<blockquote>

  <p><strong>样例输入</strong></p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(a+15)*b
</code></pre></div>  </div>

  <p><strong>样例输出</strong></p>

  <div class="language-pl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">lparen</span><span class="p">,()</span>
<span class="p">(</span><span class="nv">ident</span><span class="p">,</span><span class="nv">a</span><span class="p">)</span>
<span class="p">(</span><span class="nv">plus</span><span class="p">,</span><span class="o">+</span><span class="p">)</span>
<span class="p">(</span><span class="nv">number</span><span class="p">,</span><span class="mi">15</span><span class="p">)</span>
<span class="p">(</span><span class="nv">rparen</span><span class="p">,))</span>
<span class="p">(</span><span class="nb">times</span><span class="p">,</span><span class="o">*</span><span class="p">)</span>
<span class="p">(</span><span class="nv">ident</span><span class="p">,</span><span class="nv">b</span><span class="p">)</span>
<span class="nv">Yes</span><span class="p">,</span><span class="nv">it</span> <span class="nv">is</span> <span class="nv">correct</span><span class="o">.</span>
</code></pre></div>  </div>

  <p><strong>运行结果</strong></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240617121500458.png" alt="image-20240617121500458" style="zoom:67%;" /></p>
</blockquote>

<h2 id="实验调试情况及体会">实验调试情况及体会</h2>

<p>通过这次实验，我成功实现了LL(1)分析法进行语法分析，深刻体会到了其利用预测分析表和栈来进行符号匹配和选择产生式，从而推导出输入串语法结构的奥妙。</p>

<p>首先，我清晰地认识到LL(1)分析法的核心在于构建预测分析表。预测分析表由非终结符和终结符构成，通过它，我们可以根据当前栈顶符号和输入串首符号，快速确定应选择的产生式，从而进行语法推导。在实验中，我通过定义非终结符和终结符的数组，以及对预测分析表的初始化，成功构建了一个完整的预测分析表。这一步骤让我感受到逻辑推理的魅力，每一个细节都在逻辑中紧密相连，犹如编织一张精密的网。</p>

<p>其次，我深刻意识到LL(1)分析法对文法的严格要求。文法必须满足LL(1)的条件，即每个非终结符的每个产生式的选择集与其他产生式的选择集不能有交集，以确保在分析过程中不会出现二义性和回溯。实验中，我针对给定的文法，仔细检查每个非终结符的产生式，并根据LL(1)文法的条件进行了调整和修改。这一过程不仅让我对文法结构有了更深刻的理解，更让我感受到精益求精的追求和不断完善的动力。</p>

<p>在编写代码的过程中，我深入理解了LL(1)分析法的工作原理。通过构建<code class="language-plaintext highlighter-rouge">analyze()</code>函数，我实现了循环的语法分析过程。每次循环中，根据栈顶字符和输入串首字符进行匹配，并根据预测分析表选择相应的产生式。通过不断地匹配和选择产生式，逐步推导出输入串的语法结构。每一次成功匹配和推导，都让我体验到如同解谜般的成就感。</p>

<p>这次实验不仅让我对LL(1)分析法的应用有了更深刻的理解，还让我意识到它在编译原理中的重要性。LL(1)分析法不仅是构建抽象语法树的基石，更是生成中间代码的重要工具。通过这次实践，我不仅掌握了理论知识，更培养了严谨的思维方式和解决问题的能力。</p>

<p>这次实验让我真切感受到编译原理的魅力，也更加坚定了我对计算机科学的热爱。每一个细节的推敲，每一个逻辑的验证，都让我沉浸其中，乐在其中。感谢这次实验，让我在知识的海洋中遨游，收获颇丰。</p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">嵌入式 第三次实验 SOCKET网络编程</title><link href="http://localhost:4000/2024/04/01/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="嵌入式 第三次实验 SOCKET网络编程" /><published>2024-04-01T00:00:00+08:00</published><updated>2024-04-01T00:00:00+08:00</updated><id>http://localhost:4000/2024/04/01/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/04/01/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%AE%9E%E9%AA%8C.html"><![CDATA[<h2 id="嵌入式-第二次实验-socket网络编程">嵌入式 第二次实验 SOCKET网络编程</h2>

<!---more-->
<style> .pdf-embed-wrap-e1c4d25c-5622-4779-81b5-ae196d3bf055 { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-e1c4d25c-5622-4779-81b5-ae196d3bf055 { height: 100%; } .pdf-embed-container-e1c4d25c-5622-4779-81b5-ae196d3bf055 iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-e1c4d25c-5622-4779-81b5-ae196d3bf055"> <div class="pdf-embed-container-e1c4d25c-5622-4779-81b5-ae196d3bf055"> <iframe src="/assets/pdf/嵌入式/第三次实验.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="嵌入式" /><category term="实验报告" /><summary type="html"><![CDATA[嵌入式 第二次实验 SOCKET网络编程]]></summary></entry><entry><title type="html">编译原理笔记</title><link href="http://localhost:4000/2024/03/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="编译原理笔记" /><published>2024-03-31T00:00:00+08:00</published><updated>2024-03-31T00:00:00+08:00</updated><id>http://localhost:4000/2024/03/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/2024/03/31/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.html"><![CDATA[<h1 id="编译原理笔记">编译原理笔记</h1>

<p>[TOC]</p>

<h2 id="第一章绪论">第一章绪论</h2>

<p>什么是编译程序</p>

<p>把某一种高级语言程序等价的转换成另一种低级语言程序的程序
<!---more--></p>

<p>编译器的各个阶段</p>

<p>源程序 词法分析 语法分析 语义分析与中间代码产生 代码优化 代码生成</p>

<h2 id="第二章高级语言及其语法描述">第二章高级语言及其语法描述</h2>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/QQ_1720412281411.png" alt="QQ_1720412281411" /></p>

<h3 id="语法">语法</h3>

<p>一组规则，用它可以形成和产生一个合适的程序</p>

<p>词法规则：单词符号的形成规则</p>

<ol>
  <li>语法规则和词法规则定义了程序的形式结构</li>
  <li>定义语法单位的意义属于语义问题</li>
</ol>

<h3 id="语义">语义</h3>

<p>一组规则，用它可以定义一个程序的意义</p>

<p>描述方法：属性文法</p>

<h3 id="程序语言的语法描述">程序语言的语法描述</h3>

<h4 id="一些概念">一些概念</h4>

<ul>
  <li>有穷字母表$\sum$ : 又叫字符集，其中每一个元素称为一个字符</li>
  <li>例子：$\sum$ = {a-z, A-Z,0-9}</li>
  <li>$\sum$上的字（字符串）是指由$\sum$ 中的字符所构成的有穷序列</li>
  <li>不含任何字符的称为空字 记为 $\epsilon$</li>
  <li>
    <p>$\sum ^ *$ 表示 $\sum$ 上的左右字的全，包含空字</p>
  </li>
  <li>
    <p>连接（积）</p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/image-20240630233343441.png" alt="image-20240630233343441" /></p>
  </li>
  <li>
    <p>n次积 $V^n=VV\dots V$</p>
  </li>
  <li>
    <p>闭包：<img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/image-20240630233432724.png" alt="image-20240630233432724" /></p>
  </li>
  <li>正则闭包：$V^+ = V V^*$</li>
</ul>

<h4 id="上下文无关文法">上下文无关文法</h4>

<p>文法：描述语言的语法结构的形式规则（或语法规则）</p>

<p>上下文无关文法 ：是一个四元式 G=($V_T,V_N,S,P$)</p>

<ul>
  <li>
    <p>VT：终结符集合（非空）V，就是句子中的单词</p>
  </li>
  <li>
    <p>VN：非终结符集合（非空），且V， V=0</p>
  </li>
  <li>
    <p>S：文法的开始符号，SEYN 必须属于某个产生式的左部</p>
  </li>
  <li>
    <p>P：产生式集合（有限），每个产生式形式为</p>

    <p>P→a, PeVN a E (VyUVN)*  P就是规则</p>
  </li>
</ul>

<p>然后由此我们可以完善一下相关概念</p>

<ul>
  <li>直接推出：<img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/894e08c7c4eca3d92549b32cd886b233.png" alt="894e08c7c4eca3d92549b32cd886b233" /></li>
  <li>推导：如果$\alpha \rightarrow \alpha_2 \dots \rightarrow \alpha_n$，则我们称这个序列是从c，到a，的一个推导。若存在一个从a到an的推导，则称a可以推导出an。</li>
  <li>一步或若干步推导：通常，用$\alpha_1 \rightarrow^+ a_n$，表示：从a出发，经过一步或若千步，苛以推出an。</li>
  <li>0步或若干步推导：通常，用$\alpha_1 \rightarrow^* a_n$，表示：从a出发，经过一步或若千步，苛以推出an</li>
  <li>句型：定义：假定G是一个文法，S 是它的开始符号。如果$S\rightarrow^* \alpha$则a称是一个句型。</li>
  <li>句子：仅含终结符号的句型是一个句子。</li>
  <li>语言：文法G所产生的句子的全体是一个语言，将它记为 L（G）。</li>
</ul>

<h4 id="应用做题">应用（做题）</h4>

<p>文法-》语言</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b30534dfe75216394035d5c3b271074e.png" alt="b30534dfe75216394035d5c3b271074e" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b8a7f96576ba1833c40608220ccb76d8.png" alt="b8a7f96576ba1833c40608220ccb76d8" /></p>

<p>语言-》文法</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/image-20240701002129602.png" alt="image-20240701002129602" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/91e47ba94bdc0e6622cef29110a38dca.png" alt="91e47ba94bdc0e6622cef29110a38dca" /></p>

<h4 id="语法树与二义性">语法树与二义性</h4>

<p>文法二义性：果一个文法存在某个句子对应两棵不同的语法树，则说这个文法是二义的。</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/a6599f62c71a27f77c265fc1aa30b1d5.png" alt="a6599f62c71a27f77c265fc1aa30b1d5" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/c80b5d98f10f3a9df271c8a34ee1c0bf.png" alt="c80b5d98f10f3a9df271c8a34ee1c0bf" /></p>

<p>语言二义性：一个语言是二义的，如果对它不存在无二义的文法。语言不是二义性就是，存在一个文法不是二义性的。</p>

<h2 id="第三章词法分析">第三章词法分析</h2>

<h3 id="词法分析器">词法分析器</h3>

<h4 id="功能和输出形式">功能和输出形式</h4>

<p>功能：输入源程序、输出单词符号</p>

<blockquote>
  <p>单词符号的种类</p>

  <ul>
    <li>基本字：如begin，repeat，……</li>
    <li>标识符：表示各种名字，如变量名，数组名和过程名</li>
    <li>常数：各种类型的常熟</li>
    <li>运算符：+，-，* ，/ ,……</li>
    <li>界符：逗号，分号、括号和空白</li>
  </ul>
</blockquote>

<p>输出的单词符号的表示形式：（单词种别，单词自身的值）</p>

<blockquote>
  <p><strong>单词种别通常用整数编码表示</strong></p>

  <ul>
    <li>若一个种别只有一个单词符号，则种别编码就代表该单词符号。假定基本字、运算符和界符都是一符一种。</li>
    <li>若一个种别有多个单词符号，则对于每个单词符号，给出种别编码和自身的值。
•标识符单列一种；标识符自身的值表示成按机器字节划分的内部码。
•常数按类型分种；常数的值则表示成标准的二进制形式。</li>
  </ul>

  <p>例子:<img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/8900d5238bdb7728bdc5b594c2bafd40.png" alt="8900d5238bdb7728bdc5b594c2bafd40" /></p>

  <p><strong>助忆符：直接用编码表示不便于记忆，因此用助忆符表示编码</strong></p>

  <p>例子<img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/8aba0427f01d14085bcb391ebd223e3d.png" alt="8aba0427f01d14085bcb391ebd223e3d" /></p>
</blockquote>

<h4 id="作为一个独立子程序">作为一个独立子程序</h4>

<p>词法分析是作为一个独立的阶段，是否应当将其处理为独立的一遍呢？</p>

<ul>
  <li>作为独立阶段的优点：
使整个编译程序结构简洁、清晰和条理化，
有利于集中考虑词法分析一些枝节问题。</li>
  <li>不作为独立的一遍：
将其处理为一个子程序。</li>
</ul>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/53b6e0211456ba729bcf5c62b55dc286.png" alt="53b6e0211456ba729bcf5c62b55dc286" /></p>

<h4 id="词法分析器的设计">词法分析器的设计</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/597115ef9574e2d8dba91f55b993099d.png" alt="597115ef9574e2d8dba91f55b993099d" /></p>

<p>扫描缓冲区的设计</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/72c50b34e3e8df66323156dc2e2f1794.png" alt="72c50b34e3e8df66323156dc2e2f1794" /></p>

<h4 id="超前搜索">超前搜索</h4>

<p>• Fortran语言基本字的识别：
• Fortran语言书写时可不写空格，看起来方便，却给编译程序带来很大的困难！Fortran语言的基本字不叫保留字，因为它的关键字可以作为普通的标识符用。例如：
（1） DO99K是什么意思？</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DO99K=1,10 DO 99 K= 1,10 //99是标号
DO99K=1.10
// DO99K是标识符
</code></pre></div></div>

<p>（2） IF是基本字，还是普通标识符？</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IF (5. EQ.M) GOT055 IF (5. EQ.M) GOTO 55
IE （5）=55
// IF是数组名
</code></pre></div></div>

<p>• 需要超前搜索才能确定哪些是基本字</p>

<p>需要超前搜索的情况</p>

<ul>
  <li>标识符识别
字母开头的字母数字串，后跟界符或算符</li>
  <li>常数识别
    <ul>
      <li>识别出算术常数并将其转变为二进制内码表
示。有些也要超前搜索。
5.EQ.M</li>
    </ul>
  </li>
  <li>算符和界符的识别
    <ul>
      <li>把多个字符符合而成的算符和界符拼合成一个单一单词符号。
；，**，，EQ.十，：&gt;=</li>
    </ul>
  </li>
</ul>

<p>不必使用超前搜索的条件</p>

<ul>
  <li>所有基本字都是保留字；用户不能用它们作自己的标识符；
<strong>基本字作为特殊的标识符来处理；不用特殊的状态图来识别，只要查保留字表。</strong></li>
  <li>如果基本字、标识符和常数（或标号）之间没有确定的运算符或界符作间隔，则必须<strong>使用一个空白符作间隔</strong></li>
</ul>

<h4 id="词法分析器的设计流程">词法分析器的设计流程</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/efc110b2b9c6a30dc16c42e8254e9521.png" alt="efc110b2b9c6a30dc16c42e8254e9521" /></p>

<h3 id="正规表达式与有限自动机">正规表达式与有限自动机</h3>

<ul>
  <li>
    <p>字符集：考虑一个有<strong>穷字母表∑</strong> 字符集</p>
  </li>
  <li>
    <p>字符：其中每一个元素称为一个<strong>字符</strong></p>
  </li>
  <li>
    <p>字符：∑上的<strong>字</strong>(也叫字符串) 是指由∑中的字符所构成的一个有穷序列</p>
  </li>
  <li>
    <p>空字：不包含任何字符的序列称为<strong>空字</strong>，记为 ε</p>
  </li>
  <li>
    <p>全体：用∑*表示∑上的所有字的全体,包含空字ε</p>

    <blockquote>
      <p>例如:设={a，b}，则 ∑*={ε,a b,aa,ab,ba,bb,aaa,…}</p>
    </blockquote>
  </li>
  <li>
    <p>连接（积）：∑*的子集U和V的<strong>连接(积)</strong>定义为</p>

    <p>UV={aβ| αeU &amp; BeV}
V自身的 n次积记为
Vn=VV…V</p>
  </li>
  <li>
    <p>正规闭包：规定Vo={ε}，令
V<em>=VoUV1UV2UV3U…
称V“是V的闭包:
记 V+≡V∨</em>，称V*是V的正规闭包</p>
  </li>
</ul>

<h4 id="正规式和正规集的关系">正规式和正规集的关系</h4>

<p>正规集可以用正规表达式(简称正规式)表示。
正规表达式是表示正规集一种方法。
一个字集合是正规集当且仅当它能用正规式表示。</p>

<h4 id="正规式">正规式</h4>

<p>对给定的字母表$\sum$</p>

<ol>
  <li>ε和∅都是上的正规式，它们所表示的正规集为 {ε} 和Ø;</li>
  <li>
    <p>任何$a \in \sum$​，a是Z上的正规式，它所表示的正规集为{a};</p>
  </li>
  <li>假定e和e,都是Σ上的正规式，它们所表示的正规集为L(e,)和L(ez)，则
    <ol>
      <li>(e l ez)为正规式，它所表示的正规集为L(ej)uL(ez);</li>
      <li>(e.ez)为正规式，它所表示的正规集为L(e,)L(ez)(连接积)</li>
      <li>(e)*为正规式，它所表示的正规集为
(L(e,))(闭包，即任意有限次的自重复连接)</li>
    </ol>
  </li>
</ol>

<p>仅由有限次使用上述三步骤而定义的表达式才是Z上的正规式，仅由这些正规式表示的字集才是∑上的正规集。</p>

<ul>
  <li>所有词法结构一般都可以用正规式描述</li>
  <li>若两个正规式所表示的正规集相同，则称
这两个正规式等价。如
b(ab)*=(ba)*b       (a*b*)*=(alb)</li>
</ul>

<h4 id="确定有限自动机dfa">确定有限自动机（DFA）</h4>

<p>确定有限自动机M是一个五元式M=（S, 2, f, So,F），其中</p>

<ol>
  <li>S：有穷状态集，</li>
  <li>2：输入字母表（有穷），</li>
  <li>f：状态转换函数，为SxZ-S的单值映射函数 f（S,a）=s’表示：当现行状态为S，输入字符为
a时，将状态转换到下一状态s’。我们把s’ 称为s的一个后继状态。</li>
  <li>$S_0$是唯一的一个初态；</li>
  <li>FS：终态集（可空）。</li>
</ol>

<h4 id="非确定有限自动机nfa">非确定有限自动机（NFA）</h4>

<p>非确定有限自动机（NFA）M是一个五元式M=（S, 2, f, So,F），其中</p>

<ol>
  <li>S：有穷状态集，</li>
  <li>$\sum$：输入字母表（有穷），</li>
  <li>f：状态转换函数，为$S_x\sum^* \rightarrow 2^S$的部分映射<strong>(非单值）</strong></li>
  <li>$S_0 \in S$是非空的初态集</li>
  <li>F：终态集（可空）。</li>
</ol>

<p>NFA M 所示别的字符串的全体记为L（M）</p>

<h4 id="nfa和dfa的区别">NFA和DFA的区别</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/152b562b81d2bc5ae24ba21fc624ac25.png" alt="152b562b81d2bc5ae24ba21fc624ac25" /></p>

<p>从状态图可看出NFA 和DFA的区别：</p>

<ol>
  <li>NFA可有多个初态</li>
  <li>NFA弧上的标记可以是$\sum^*$中的一个字（甚至可以是一个正规式），而不一定是单个字符；</li>
  <li>NFA同一个字可能出现在同状态射出的多条弧上。</li>
</ol>

<p><strong>所以 DFA是NFA的特例。</strong></p>

<h4 id="nfa与dfa的转换">NFA与DFA的转换</h4>

<h5 id="理论基础">理论基础</h5>

<p>自动机等价定义：对于任何两个有限自动机M和M’，如果L（M）=L（M’），则称M与M’等价。</p>

<p>自动机理论中一个重要的结论：判定两个自动机等价性的算法是存在的。</p>

<p><strong>对于每个NFA M存在一个DFA M’，使得L（M）=L（M’）。亦即DFA与NFA描述能力相同。</strong></p>

<h5 id="nfa转换为等价的dfa">NFA转换为等价的DFA</h5>

<p>假定NFA M=&lt;S,2, 6,So, F&gt;，我们对NFA M的状态转换图进行以下改造：</p>

<ol>
  <li>
    <p><strong>引进新的初态结点X和终态结点Y</strong>，X,Y¢S，
从X到S。中任意状态结点连一条$\epsilon$箭弧，从F中任意状态结点连一条e箭弧到Y。</p>
  </li>
  <li>
    <p>按以下3条规则对NFA M的状态转换图进一步施行替换，直到把这个图转变为每条弧只标记
$\sum$上的一个字符或$\epsilon$；其中k是新引入的状态。</p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/image-20240701115426004.png" alt="image-20240701115426004" /></p>

    <blockquote>
      <p><strong>例子</strong></p>

      <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ab7fdc62e5672379937b124b48bab3d8.png" alt="ab7fdc62e5672379937b124b48bab3d8" /></p>
    </blockquote>
  </li>
  <li>
    <p>将上述NFA确定化——采用子集法</p>

    <blockquote>
      <p>理论：</p>

      <p>闭包定理</p>

      <p>设I是NFA的状态集的一个子集，定义I的$\epsilon$-闭包：$\epsilon$-closure（I）为：</p>

      <ol>
        <li>若$s \in I$，则$s \in \epsilon$-closure（I）；</li>
        <li>若$s \in I$，则从s出发经过任意条$\epsilon$弧而能到达的任何状态s’都属于$\epsilon$-closure（I）
即<strong>e-closure（I）={s’ | 从某个$s \in I$出发经过任意条：弧能到达s’｝</strong></li>
      </ol>

      <p>$I_a$定义</p>

      <p>设a是2中的一个字符，定义
\(I_a=\epsilon-closure(J)\)
其中，J为I中的某个状态出发经过一条a弧而到达的状态集合。</p>

      <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/bf32ba843acb2f729db278f285c4c00b.png" alt="bf32ba843acb2f729db278f285c4c00b" /></p>

      <p>例子</p>

      <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/c59b405c483037f2b5cf068455ac8941.png" alt="c59b405c483037f2b5cf068455ac8941" /></p>
    </blockquote>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/6bd774202fa7016a466ae0c252eef39b.png" alt="6bd774202fa7016a466ae0c252eef39b" /></p>

    <p>例子</p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/42eb9487fdb40fe37910aad8ffc020af.png" alt="42eb9487fdb40fe37910aad8ffc020af" /></p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/884a02fa9b473173154725eeb0d46665.png" alt="884a02fa9b473173154725eeb0d46665" /></p>

    <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/3bd7179431ee4494d15b80bd70090930.png" alt="3bd7179431ee4494d15b80bd70090930" /></p>
  </li>
</ol>

<h4 id="有限自动机转换为正规式">有限自动机转换为正规式</h4>

<blockquote>
  <p>理论：</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/92412a5c1ebfe5bbc6cd27b1d1816358.png" alt="92412a5c1ebfe5bbc6cd27b1d1816358" /></p>
</blockquote>

<h5 id="nfa-r正规式">NFA-&gt;R(正规式)</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b655f0065044f8a135bf13dcff632554.png" alt="b655f0065044f8a135bf13dcff632554" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/872bc6fa5bb25a258b9b00c445977e31.png" alt="872bc6fa5bb25a258b9b00c445977e31" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ac7d1af4612156c33abf1421d90c19fc.png" alt="ac7d1af4612156c33abf1421d90c19fc" /></p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/6214a9863f57670eef1681edd811e44a.png" alt="6214a9863f57670eef1681edd811e44a" /></p>

<h4 id="r-nfa">r-&gt;NFA</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/5f8d9203dc0675f180931f2d27ce2529.png" alt="5f8d9203dc0675f180931f2d27ce2529" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/578bba46808b49cf88f1827e1ad003bf.png" alt="578bba46808b49cf88f1827e1ad003bf" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/69563e4ebc27e2c6d5b7c288289333b3.png" alt="69563e4ebc27e2c6d5b7c288289333b3" /></p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b693ba5d2ed90015971c039eea06b42f.png" alt="b693ba5d2ed90015971c039eea06b42f" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/0a392157a34acfc3f41195a4610c34dd.png" alt="0a392157a34acfc3f41195a4610c34dd" /></p>

<h4 id="dfa确定有限自动机化简dfa最小化">DFA（确定有限自动机）化简(DFA最小化)</h4>

<p>目的（我们要干什么）</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/989f418393e62439f3f306bf073db990.png" alt="989f418393e62439f3f306bf073db990" /></p>

<p>基本思想：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/5007188a9e332fa45d37313e1880fac2.png" alt="5007188a9e332fa45d37313e1880fac2" /></p>

<p>怎么做</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/bf1316cf967172c1211050c6e91de293.png" alt="bf1316cf967172c1211050c6e91de293" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/5998de650c2797dc58674b40d1352b2b.png" alt="5998de650c2797dc58674b40d1352b2b" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d45a8a0cc38d7d9a385b0126c68c8847.png" alt="d45a8a0cc38d7d9a385b0126c68c8847" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1ccc3d13208404ff60e763cbe721a232.png" alt="1ccc3d13208404ff60e763cbe721a232" /></p>

<p>注意要分成N个分组</p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/20138ccb129c6d9b46fe97a5be137b9d.png" alt="20138ccb129c6d9b46fe97a5be137b9d" /></p>

<h2 id="第四章语法分析-自上而下分析">第四章语法分析 自上而下分析</h2>

<h3 id="语法分析">语法分析</h3>

<p><strong>使用上下文无关文法对语言的语法结构进行描述</strong></p>

<p>语法分析的任务是分析一个文法的句子结构</p>

<p>语法分析器的功能：按照文法的产生式（语言的语法规则），识别输入符号串是否为一个句子</p>

<p>这里就要判断，看能否从文法的开始符号出发推导出这个输入串，或建立一棵与输入串匹配的语法树</p>

<p>语法分析的方法：</p>

<ol>
  <li>
    <p>自下而上</p>

    <ol>
      <li>从输入串开始，逐步进行归约，直到文法的开始符号</li>
      <li>归约根据文法的产生式规则，把串中出现的产生式的右部替换成左部符号</li>
      <li>从树叶节点开始，构造语法树</li>
      <li>算符优先分析法，LR分析法</li>
    </ol>
  </li>
  <li>
    <p>自上而下</p>

    <ol>
      <li>从文法的开始符号出发反复使用各种产生式，寻找『匹配』的推导</li>
      <li>推导：根据文法的产生式规则，把串中出现的产生式的左部符号替换成右部</li>
      <li>从树的根开始，构造语法树</li>
      <li>递归下降分析法、预测分析程序</li>
    </ol>
  </li>
</ol>

<h3 id="ll1分析法">LL(1)分析法</h3>

<h4 id="消除左递归">消除左递归</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/700f22a85bb940e8f3568a3fa15e8e06.png" alt="700f22a85bb940e8f3568a3fa15e8e06" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/bd71ea6daf95db8f5dc8913683f10b94.png" alt="bd71ea6daf95db8f5dc8913683f10b94" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/3e2afc4e25c08998a4545f27658b0a74.png" alt="3e2afc4e25c08998a4545f27658b0a74" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/00c9b5d12e76ca5a998c834f5e43b0fb.png" alt="00c9b5d12e76ca5a998c834f5e43b0fb" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/df3d84d9881636dde6f36e43698eb647.png" alt="df3d84d9881636dde6f36e43698eb647" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ec302c845dcdce52fb43eaa08a4e30a3.png" alt="ec302c845dcdce52fb43eaa08a4e30a3" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/90a168d9317f08637cf92eeb041263a7.png" alt="90a168d9317f08637cf92eeb041263a7" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e7ea751d49ad3b10438d9dd176356a1e.png" alt="e7ea751d49ad3b10438d9dd176356a1e" /></p>

</blockquote>

<h4 id="消除回溯">消除回溯</h4>

<h5 id="提取公共左因子">提取公共左因子</h5>

<p>如果一个非终结符的候选FIRST相交则使用提取公共左因子，来使得两两不相交</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/bf97bd3ca49559412f392e2bd6f11696.png" alt="bf97bd3ca49559412f392e2bd6f11696" /></p>

<h5 id="判断是否是ll1文法">判断是否是LL(1)文法</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/3832b2a27ca8c0403d274ef34b87f7a3.png" alt="3832b2a27ca8c0403d274ef34b87f7a3" /></p>

<blockquote>
  <p>(3)的原因</p>

  <p><strong>FIRST 集合与 FOLLOW 集合</strong>：</p>

  <ul>
    <li><strong>FIRST(A)</strong>：表示从非终结符 A 推导出的字符串的首字符的集合。</li>
    <li><strong>FOLLOW(A)</strong>：表示所有在文法中能够出现在 A 之后的符号集合。</li>
  </ul>

  <p><strong>条件(3) 的要求</strong>：</p>

  <ul>
    <li>如果存在某个候选首符集合包含 ε（空串），则要求 FIRST(A) 与 FOLLOW(A) 的交集为空集合，即 <code class="language-plaintext highlighter-rouge">FIRST(A) ∩ FOLLOW(A) = ∅</code>。</li>
  </ul>

  <p><strong>原因</strong>：</p>

  <ul>
    <li>如果非终结符 A 的某个候选首符集合包含 ε，意味着 A 可以推导出空串。</li>
    <li>这种情况下，如果 FOLLOW(A) 中的某个符号也在 FIRST(A) 中存在，则当解析器遇到这个符号时，就无法确定是因为 A 推导出了空串还是需要使用 A 的其他产生式进行推导，导致解析器产生歧义。</li>
    <li>通过要求 <code class="language-plaintext highlighter-rouge">FIRST(A) ∩ FOLLOW(A) = ∅</code>，可以避免这种歧义，从而使文法成为 LL(1) 文法，保证解析器可以顺利进行自上而下的分析而不会回溯。</li>
  </ul>
</blockquote>

<h5 id="求解first集">求解FIRST集</h5>

<p>定义：</p>

<p>$FIRST(\alpha)$指从$\alpha$所能推导出的所有串的首终结符结合
<img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/777f97cae6a9dc2d4eec3a40f05c9cec.png" alt="777f97cae6a9dc2d4eec3a40f05c9cec" /></p>

<p>求法：</p>

<p><img src="/assets/编译原理笔记.assets/9c63929ceb960b7e053cea864ad93a4d.jpeg" alt="9c63929ceb960b7e053cea864ad93a4d" /></p>

<p><img src="/assets/编译原理笔记.assets/a0505363077d0a6b6085adfa0715a993.jpeg" alt="a0505363077d0a6b6085adfa0715a993" /></p>

<h5 id="求解follow集">求解FOLLOW集</h5>

<p><img src="/assets/编译原理笔记.assets/662168eae05c8874a67ea783065db0db.jpeg" alt="662168eae05c8874a67ea783065db0db" /></p>

<h5 id="预测分析程序">预测分析程序</h5>

<p>根据当前输入符号，为当前要处理的非终结符选择产生式</p>

<h6 id="利用预测分析表进行分析总控程序">利用预测分析表进行分析(总控程序)</h6>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e6eb3e0bf24f79368b541b532c993526.png" alt="e6eb3e0bf24f79368b541b532c993526" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/dccc34fe6328d36137ee2390204c22a2.png" alt="dccc34fe6328d36137ee2390204c22a2" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/101be9d0500db3648ed9e51a5ff47b20.png" alt="101be9d0500db3648ed9e51a5ff47b20" /></p>

<blockquote>
  <p>例子：</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/27386ac6780f1931f6535682e4badbe8.png" alt="27386ac6780f1931f6535682e4badbe8" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/4101c32d9ea5ec8f5df45b0351b8f5a4.png" alt="4101c32d9ea5ec8f5df45b0351b8f5a4" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/401e0f37132645f1d7e1162be6275dc9.png" alt="401e0f37132645f1d7e1162be6275dc9" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/07d46d62d1f9543c012370f4eee85de8.png" alt="07d46d62d1f9543c012370f4eee85de8" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/0e06e0c66b78edcdc08920db611deb83.png" alt="0e06e0c66b78edcdc08920db611deb83" /></p>
</blockquote>

<h6 id="预测分析表的构造">预测分析表的构造</h6>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1a9bed2a3f5028947c18f959ba6ef078.png" alt="1a9bed2a3f5028947c18f959ba6ef078" /></p>

<h2 id="第五章-语法分析自下而上分析">第五章 语法分析——自下而上分析</h2>

<p>基本思想：用一个寄存符号的先进后出栈，把输入符号一个一个地移进到栈里，当栈顶形成某个产生式的候选式时，即把栈顶的这一部分替换（归约为）该产生式的左部符号</p>

<p><strong>核心问题：识别可归约串</strong></p>

<h3 id="一些概念-1">一些概念</h3>

<h4 id="短语">短语：</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/cf1a065a2627d1e7708a4958e7793848.png" alt="cf1a065a2627d1e7708a4958e7793848" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/fd308fe8a6d238192583139c621128e9.png" alt="fd308fe8a6d238192583139c621128e9" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ed5645edce4fe7144e6f4ceaa244cb74.png" alt="ed5645edce4fe7144e6f4ceaa244cb74" /></p>
</blockquote>

<h4 id="规范规约">规范规约</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/18facb101e44833e4238cd95d90be6ca.png" alt="18facb101e44833e4238cd95d90be6ca" /></p>

<h4 id="符号栈">符号栈</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d61d370653181205343976c6171760e7.png" alt="d61d370653181205343976c6171760e7" /></p>

<h3 id="算符优先分析">算符优先分析</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/14c8bc4a97176a84e548c5a8eb98dac3.png" alt="14c8bc4a97176a84e548c5a8eb98dac3" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/14df460dd60cfedbb746dc02985ca5fc.png" alt="14df460dd60cfedbb746dc02985ca5fc" /></p>

<h4 id="优先关系定义">优先关系定义</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/7b40fd3be09389fc9ed909fcac54b3ad.png" alt="7b40fd3be09389fc9ed909fcac54b3ad" /></p>

<h4 id="算符文法定义">算符文法定义</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ecd0d0208c7cb33f7f7c536e24a8f407.png" alt="ecd0d0208c7cb33f7f7c536e24a8f407" /></p>

<h4 id="判断优先关系判断算符优先文法">判断优先关系+判断算符优先文法</h4>

<p>文法中任何两个终结符之间的关系必须满足下列三种关系之一，才是算符优先文法</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/674aceaa3e5c8d93b1016a5fa9f43f65.png" alt="674aceaa3e5c8d93b1016a5fa9f43f65" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/8c11fbef478b15557d53296f2a001fb6.png" alt="8c11fbef478b15557d53296f2a001fb6" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/2b6cf78cfc933a904cd439e8b93a3a50.png" alt="2b6cf78cfc933a904cd439e8b93a3a50" /></p>
</blockquote>

<h4 id="构造优先关系表算法">构造优先关系表算法</h4>

<h5 id="求firstvt">求FIRSTVT</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/bae8b0d50d4968b794a42c40ea6a3f83.png" alt="bae8b0d50d4968b794a42c40ea6a3f83" /></p>

<h5 id="求lastvtp">求LASTVT(P)</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/91145b066d5113b61fb2e73feccc0eea.png" alt="91145b066d5113b61fb2e73feccc0eea" /></p>

<h5 id="构造优先关系表">构造优先关系表</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/02b11277728ac84e12ced85fe3630ea4.png" alt="02b11277728ac84e12ced85fe3630ea4" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1ea2ca8897b9c11af08c0bd6bf957eb2.png" alt="1ea2ca8897b9c11af08c0bd6bf957eb2" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1a99e4d152750a8981e0a1ec69e95a83.png" alt="1a99e4d152750a8981e0a1ec69e95a83" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/638e8801de5bbe588bbe7443c6cf1739.png" alt="638e8801de5bbe588bbe7443c6cf1739" /></p>
</blockquote>

<h4 id="最左素短语">最左素短语</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/75445867455eb5d678d1f9dc9645c1cc.png" alt="75445867455eb5d678d1f9dc9645c1cc" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e1247686b51d3490d9eead8e52c795f5.png" alt="e1247686b51d3490d9eead8e52c795f5" /></p>
</blockquote>

<h4 id="算符优先分析过程">算符优先分析过程</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d00078a95b34312303a49ba080e3277e.png" alt="d00078a95b34312303a49ba080e3277e" /></p>

<blockquote>
  <p>例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/a10105f1e2398c3c02baf847a0ddf517.png" alt="a10105f1e2398c3c02baf847a0ddf517" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d3ccf4be6e80ab8f18c1e0088d3dd19a.png" alt="d3ccf4be6e80ab8f18c1e0088d3dd19a" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ef7657f3f167f69b93f5be255c484da6.png" alt="ef7657f3f167f69b93f5be255c484da6" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/4aab4a2a533dad8b72ff85729b070973.png" alt="4aab4a2a533dad8b72ff85729b070973" /></p>
</blockquote>

<h3 id="lr0-分析">LR（0） 分析</h3>

<h4 id="一些概念-2">一些概念</h4>

<h5 id="活前缀">活前缀</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/eed9a036033b38d237eadf2114d2d856.png" alt="eed9a036033b38d237eadf2114d2d856" /></p>

<h4 id="项目">项目</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e92389be04e0ff9a917b2944fee3f2b5.png" alt="e92389be04e0ff9a917b2944fee3f2b5" /></p>

<blockquote>
  <p>#例子</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/2f9f78df9005be572f124177e56ca209.png" alt="2f9f78df9005be572f124177e56ca209" /></p>
</blockquote>

<h4 id="拓广文法">拓广文法</h4>

<p>加入S’</p>

<p>然后拆成单个文法</p>

<h4 id="步骤一-构造项目集规范族">步骤一 构造项目集规范族</h4>

<h5 id="两种情况"><strong>两种情况：</strong></h5>

<p><strong>情况1后面是终结符：</strong></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425194516541.png" alt="image-20240425194516541" /></p>

<p><strong>情况2：后面是非终结符（要把左边是该非终结符的产生式全部搬过来</strong></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/fdc8926cd89794e0fa15801bf28fe9b9.png" alt="fdc8926cd89794e0fa15801bf28fe9b9" /></p>

<p><img src="C:\Users\15858\AppData\Roaming\Typora\typora-user-images\image-20240425193437613.png" alt="image-20240425193437613" /></p>

<p>####例子</p>

<p><img src="/assets/编译原理笔记.assets/image-20240425194525018.png" alt="image-20240425194525018" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425194530893.png" alt="image-20240425194530893" /></p>

<h4 id="步骤二构造lr0分析表">步骤二构造LR（0）分析表</h4>

<h5 id="算法">算法</h5>

<p><img src="/assets/编译原理笔记.assets/image-20240425194535476.png" alt="image-20240425194535476" /></p>

<p>####例子</p>

<p><img src="/assets/编译原理笔记.assets/image-20240425194539604.png" alt="image-20240425194539604" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425194544666.png" alt="image-20240425194544666" /></p>

<h4 id="步骤三-使用lr0分析表">步骤三 使用LR（0）分析表</h4>

<p><img src="/assets/编译原理笔记.assets/image-20240425195436567.png" alt="image-20240425195436567" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425195452931.png" alt="image-20240425195452931" /></p>

<p><strong>归约详细解释：</strong></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/5062ec67b21ced44b96cd135aed9450a.png" alt="5062ec67b21ced44b96cd135aed9450a" /><img src="/assets/编译原理笔记.assets/image-20240425195501579.png" alt="image-20240425195501579" />（此图可能归约讲不清楚，建议看详细解释）</p>

<p><img src="/assets/编译原理笔记.assets/image-20240425195513016.png" alt="image-20240425195513016" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425195521255.png" alt="image-20240425195521255" /></p>

<p>####例子</p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200138719.png" alt="image-20240425200138719" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200147264.png" alt="image-20240425200147264" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200157716.png" alt="image-20240425200157716" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200206059.png" alt="image-20240425200206059" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200215569.png" alt="image-20240425200215569" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425200226032.png" alt="image-20240425200226032" /></p>

<h3 id="slr1分析">SLR（1）分析</h3>

<h4 id="判断lr0是否是slr1文法">判断LR(0)是否是SLR（1）文法</h4>

<p><img src="/assets/编译原理笔记.assets/QQ截图20240425202521.png" alt="QQ截图20240425202521" /></p>

<h5 id="判断移进归约冲突是否可解决">判断移进—归约冲突是否可解决</h5>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/FkTxEossjcOFHKlfSTDkEbGB06Dt.png" alt="img" /></p>

<p><img src="/assets/编译原理笔记.assets/image-20240425202847894.png" alt="image-20240425202847894" /></p>

<p><strong>判断FOLLOW(S’)和{+}是不是有交集</strong></p>

<p><strong>判断FOLLOW(E)和{*}是不是有交集</strong></p>

<p>归约的左边和移进的终结符</p>

<h5 id="判断归约归约冲突是否可解决">判断归约归约冲突是否可解决</h5>

<p>如果是规约规约冲突 就把两个左边的FOLLWO集相交</p>

<h4 id="解决冲突slr1与lr0的区别">解决冲突（SLR（1）与LR（0）的区别）</h4>

<h5 id="构造slr1分析表算法">构造SLR（1）分析表算法</h5>

<p><img src="/assets/编译原理笔记.assets/image-20240425204607977.png" alt="image-20240425204607977" /></p>

<h3 id="lr1分析">LR（1）分析</h3>

<h4 id="判断是否是lr1文法">判断是否是LR（1）文法</h4>

<p>先构造向前搜索符的的文法</p>

<p>然后再判断是否有移进归约冲突、归约归约冲突并且是否可消解，只不过是把follow集换成向前搜索符号</p>

<p>例子：</p>

<p><img src="/assets/编译原理笔记.assets/image-20240426140815793.png" alt="image-20240426140815793" /></p>

<h4 id="构造lr1项目集规范族">构造LR（1）项目集规范族</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/6df6bad6f1dfa395c683904f3e30ce00.png" alt="6df6bad6f1dfa395c683904f3e30ce00" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/FlEk00S66tObR5hg1H-dWFJSHLr7.png" alt="img" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/Fvl37gPGPFIq3CLpxPFA5aKmxgcQ.png" alt="img" /></p>

<h4 id="构造lr1分析表">构造LR（1）分析表</h4>

<p><img src="/assets/编译原理笔记.assets/image-20240426141006274.png" alt="image-20240426141006274" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/FkYUpMosNymaG1PYCO71zGnvS_QF.png" alt="img" /></p>

<h4 id="lalr1">LALR(1)</h4>

<p>就是在LR（1）的基础上，增加合并同心集，相同产生式不同向前搜索符。</p>

<p>判断是否是LALR（1）与LR（1）相同</p>

<h2 id="第六章属性文法和语法制导翻译">第六章属性文法和语法制导翻译</h2>

<h3 id="属性文法">属性文法</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1c802557e751df112f4e433a97e34cc6.png" alt="1c802557e751df112f4e433a97e34cc6" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/7b3379d75505d293886c8190903acff3.png" alt="7b3379d75505d293886c8190903acff3" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ea925aecca2c57a07b31f1e2d40cb438.png" alt="ea925aecca2c57a07b31f1e2d40cb438" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/057e42dbd24256b56d2985f4375fb84f.png" alt="057e42dbd24256b56d2985f4375fb84f" /></p>

<h4 id="s属性文法">S—属性文法</h4>

<p>仅仅使用综合属性的文法成为S—属性文法。</p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/aa9ace2381cb85405c58588eeb678ce5.png" alt="aa9ace2381cb85405c58588eeb678ce5" /></p>

<h4 id="l-属性文法">L-属性文法</h4>

<p>仅仅使用继承属性的文法称为L—属性文法</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b1db9d9d065f0dd881865b9eb56e04bd.png" alt="b1db9d9d065f0dd881865b9eb56e04bd" /></p>

<h3 id="基于属性文法的处理方法">基于属性文法的处理方法</h3>

<p>基于属性文法的处理过程通常为：</p>

<p>输入串——》语法树——》按照语义规则计算属性</p>

<ul>
  <li>这种由源程序的语法结构所驱动的处理方法就是<strong>语法制导翻译法</strong></li>
  <li>语义规则的计算
    <ul>
      <li>产生代码</li>
      <li>符号表中存放信息</li>
      <li>给出错误信息</li>
      <li>执行任何其他动作</li>
    </ul>
  </li>
  <li>对输入符号串的翻译也就是根据语义规则进行计算的结果</li>
</ul>

<h4 id="一遍扫描的处理方法">一遍扫描的处理方法</h4>

<p>一遍扫描的处理方法是在语法分析的同时计算属性值</p>

<ul>
  <li>L—属性文法适合于一遍扫描的自上而下的分析</li>
  <li>S—属性文法适合于一遍扫描的自下而上分析</li>
</ul>

<h3 id="翻译模式">翻译模式</h3>

<p>语法规则：给出了属性计算的定义，没有属性计算的次序等实现细节</p>

<p>翻译模式：给出了使用语义规则进行计算的次序，这样就可以把某些实现细节表示出来。</p>

<p>在翻译模式中，和文法符号相关的属性和一样规则（这里我们称语义动作），用花括号括起来插入到产生式右部的合适位置上</p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/00eb0ccfc4b461799fdcb5f9ca3c2eb9.png" alt="00eb0ccfc4b461799fdcb5f9ca3c2eb9" /></p>

<h2 id="第七章语义分析和中间代码产生">第七章语义分析和中间代码产生</h2>

<h3 id="中间语言">中间语言</h3>

<ul>
  <li>
    <p>常用的中间语言：</p>

    <ul>
      <li>
        <p>后缀式，又叫逆波兰表示</p>
      </li>
      <li>
        <p>图表示：DAG图、抽象语法树</p>
      </li>
      <li>
        <p>三地址代码</p>
        <ul>
          <li>三元式</li>
          <li>四元式</li>
          <li>间接三元式</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="后缀式">后缀式</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/56fcff110316daddf26d1ed447361d57.png" alt="56fcff110316daddf26d1ed447361d57" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/9557183ef839131c0f6902b17ab64d41.png" alt="9557183ef839131c0f6902b17ab64d41" /></p>

<h4 id="图表示法">图表示法</h4>

<ul>
  <li>DAG</li>
  <li>抽象语法树</li>
</ul>

<p>无循环有向图（Directed acyclic Graph，DAG）</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/319ad90a4d57d118a8335b33cb81bd77.png" alt="319ad90a4d57d118a8335b33cb81bd77" /></p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/903d0cde7675ea161a67c0e2ee926e52.png" alt="903d0cde7675ea161a67c0e2ee926e52" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1822cb2f559b64f9a8fb667b5a609fac.png" alt="1822cb2f559b64f9a8fb667b5a609fac" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/354f95528a032b0e6b00c6c280aa7738.png" alt="354f95528a032b0e6b00c6c280aa7738" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/3f4b740df3024eb3c06b3e90d4298ee2.png" alt="3f4b740df3024eb3c06b3e90d4298ee2" /></p>

<h4 id="三地址代码">三地址代码</h4>

<ul>
  <li>三地址代码
x：=y op z /<em>每个语句的右边只能有一个运算符</em></li>
  <li>三地址代码可以看成是抽象语法树或DAG的一种线性表示</li>
</ul>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/31b17eab270dc5311757ada3c43c496d.png" alt="31b17eab270dc5311757ada3c43c496d" /></p>

<p>例子：</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/051ea41557c8914f725a9f016a5c4d36.png" alt="051ea41557c8914f725a9f016a5c4d36" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d14d2875281ece3ec2b53a242f0dbfff.png" alt="d14d2875281ece3ec2b53a242f0dbfff" /></p>

<p>###例子</p>

<pre><code class="language-assembly">j&lt;,A,C,3
j, , ,13
j&lt;,B,D,5
j, , ,13
j&gt;,A,1,7
j, , ,10
+,y,z,T1
:=,T1, ,x
j, , ,12
-,y,z,T1
:=,T1, ,x
j, , ,1

</code></pre>

<h3 id="一遍扫描实现的翻译模式">一遍扫描实现的翻译模式</h3>

<h4 id="布尔表达式">布尔表达式</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/c663d0a48f61d756dbcb2691e7b98590.png" alt="c663d0a48f61d756dbcb2691e7b98590" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/f5024e6fc276facec7c507733bb3fdd7.png" alt="f5024e6fc276facec7c507733bb3fdd7" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/89880a93d7d9cd90a22c4309159810ce.png" alt="89880a93d7d9cd90a22c4309159810ce" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/b22acf2d4ba7000f37a5712e949fea1f.png" alt="b22acf2d4ba7000f37a5712e949fea1f" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/7dbac3b149b0701692736faa2d976c8f.png" alt="7dbac3b149b0701692736faa2d976c8f" /></p>

<h4 id="控制语句">控制语句</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/101b726625f3827058e2d760aa54c2ca.png" alt="101b726625f3827058e2d760aa54c2ca" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/8d96c90aadd5b11b168cb7ff4da2777e.png" alt="8d96c90aadd5b11b168cb7ff4da2777e" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/4dc5cd41d0e451bd93725147ff5b43af.png" alt="4dc5cd41d0e451bd93725147ff5b43af" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e07b572d9098891b50009b772876a1fb.png" alt="e07b572d9098891b50009b772876a1fb" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d187ebfb0e946d18d624ed6c8a958de1.png" alt="d187ebfb0e946d18d624ed6c8a958de1" /></p>

<h2 id="第八章符号表">第八章符号表</h2>

<h3 id="符号表的组织与作用">符号表的组织与作用</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/cbb4f57a1e9d36418d328c75414eab78.png" alt="cbb4f57a1e9d36418d328c75414eab78" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/635fdbf369964e7f776e2bb9084c2091.png" alt="635fdbf369964e7f776e2bb9084c2091" /></p>

<ul>
  <li>
    <p>对符号表进行操作的时机</p>

    <ul>
      <li>定义出现：int x；</li>
      <li>使用性出现： if x&lt;100</li>
    </ul>
  </li>
  <li>
    <p>按照名字的不同种属建立多张符号表，如常数表，变量名表、过程名表</p>
  </li>
  <li>
    <p>符号表的组织方式</p>

    <ul>
      <li>
        <p>安排各项各栏的存储单元为固定长度</p>
      </li>
      <li>
        <p>用间接方式安排各栏存储单元</p>

        <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/8185e5f24884d79acfa5cef0ebfd7e34.png" alt="8185e5f24884d79acfa5cef0ebfd7e34" /></p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="整理和查找">整理和查找</h3>

<ol>
  <li>线性查找</li>
  <li>二分查找</li>
  <li>杂凑查找（HASH技术）</li>
</ol>

<h3 id="名字的作用范围">名字的作用范围</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/c5d8aec6cdf899d8e543fe1de51a91a1.png" alt="c5d8aec6cdf899d8e543fe1de51a91a1" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/49a6e6a4f99e77f5c77c12d7465bc968.png" alt="49a6e6a4f99e77f5c77c12d7465bc968" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/9a7980941d654d577e8b7a63cb56ea3e.png" alt="9a7980941d654d577e8b7a63cb56ea3e" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e3a5be580e570840f401be95c441f328.png" alt="e3a5be580e570840f401be95c441f328" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/08765bed5f687c34207358190e00e7d8.png" alt="08765bed5f687c34207358190e00e7d8" /></p>

<h3 id="符号表的内容">符号表的内容</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/e9d2a5c13e496027b70f9ac89d9aaceb.png" alt="e9d2a5c13e496027b70f9ac89d9aaceb" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/ddff082397da637d75844ddda49696d6.png" alt="ddff082397da637d75844ddda49696d6" /></p>

<h2 id="第九章运行时存储空间组织">第九章运行时存储空间组织</h2>

<h3 id="目标程序运行时的活动">目标程序运行时的活动</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/a77f0ac2b322c92913cc4fa754da9a4a.png" alt="a77f0ac2b322c92913cc4fa754da9a4a" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/2ae705926bad41e715f2309ebfec1005.png" alt="   " /></p>

<h3 id="运行时存储器的划分">运行时存储器的划分</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/2a830d60cb34e0c07e55df338634cfb6.png" alt="2a830d60cb34e0c07e55df338634cfb6" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/3f85af89fe1f07ac9c0bc73f4ccf0752.png" alt="3f85af89fe1f07ac9c0bc73f4ccf0752" /></p>

<h4 id="活动记录">活动记录</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/c68f7043a46941bcea261a724126d55f.png" alt="c68f7043a46941bcea261a724126d55f" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/40b383cb96af424da1ad91c1ab214975.png" alt="40b383cb96af424da1ad91c1ab214975" /></p>

<h4 id="存储分配策略">存储分配策略</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/5a00d527dcf094637474b88982ee8e29.png" alt="5a00d527dcf094637474b88982ee8e29" /></p>

<h3 id="简单的栈式存储分配">简单的栈式存储分配</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/818ad59a399120399c1304c052368799.png" alt="818ad59a399120399c1304c052368799" /></p>

<h3 id="嵌套过程语言的栈实现">嵌套过程语言的栈实现</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/d47e20560da4c014669e202cbffc6298.png" alt="d47e20560da4c014669e202cbffc6298" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/19687b6b52f6bf0c9efdcf961156ca8b.png" alt="19687b6b52f6bf0c9efdcf961156ca8b" /></p>

<h2 id="第十章优化">第十章优化</h2>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/eab82006bd8bf3b41b7a45cf3374dc8f.png" alt="eab82006bd8bf3b41b7a45cf3374dc8f" /></p>

<h3 id="概述">概述</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/9111089faecf585fafc24b726701eadf.png" alt="9111089faecf585fafc24b726701eadf" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/30c81d793397b85866053e79112da600.png" alt="30c81d793397b85866053e79112da600" /></p>

<h3 id="局部优化">局部优化</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/cad58a9d161d75991d6cd5ac78456fd4.png" alt="cad58a9d161d75991d6cd5ac78456fd4" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/9b39aa5fdf06e2bfc73a1e4856fdef2b.png" alt="9b39aa5fdf06e2bfc73a1e4856fdef2b" /></p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/7406fa5c6a1900a981ec2b288923dd92.png" alt="7406fa5c6a1900a981ec2b288923dd92" /></p>

<p>例子：</p>

<blockquote>
  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/1572cdc1ba99b32068e3edf175607921.png" alt="1572cdc1ba99b32068e3edf175607921" /></p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/72c3c316bd2ce1c780da05ba038e1d9a.png" alt="72c3c316bd2ce1c780da05ba038e1d9a" /></p>
</blockquote>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0.assets/f69bb25197732689b097358af0bedff3.png" alt="f69bb25197732689b097358af0bedff3" /></p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[编译原理笔记 [TOC] 第一章绪论 什么是编译程序 把某一种高级语言程序等价的转换成另一种低级语言程序的程序]]></summary></entry><entry><title type="html">编译原理 第一次实验 词法分析</title><link href="http://localhost:4000/2024/03/28/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html" rel="alternate" type="text/html" title="编译原理 第一次实验 词法分析" /><published>2024-03-28T00:00:00+08:00</published><updated>2024-03-28T00:00:00+08:00</updated><id>http://localhost:4000/2024/03/28/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90</id><content type="html" xml:base="http://localhost:4000/2024/03/28/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86-%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C-%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.html"><![CDATA[<p><!---more--></p>
<div class="cover" style="page-break-after:always;font-family:仿宋;width:100%;height:100%;border:none;margin: 0 auto;text-align:center;">
    <div style="width:80%;;margin: 0 auto;height:0;padding-bottom:25%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1-538-png_6_0_0_188_115_242_92_893.024_1263-1400-0-255-1400.jpg" alt="校名" style="width:100%;" /></div>
    <br /><br />
    <div style="width:40%;margin: 0 auto;height:0;padding-bottom:40%;">
        <img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616111344139.png" alt="校徽" style="width:100%;" /></div>
    <br /><br />
    <p style="text-align:center;font-size:24pt;margin: 0 auto">《编译原理实验》</p>
    <p style="text-align:center;font-size:24pt;margin: 0 auto">实验报告 </p>
    <br /><br />
    <table style="border:none;text-align:center;width:80%;font-family:仿宋;margin: 0 auto;">
    <tbody style="font-family:仿宋;font-size:16pt;">
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">题&emsp;&emsp;目</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">第⼀次实验 词法分析</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">姓&emsp;&emsp;名</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">高星杰</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">学&emsp;&emsp;号</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2021307220712</td></tr>
        <tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">专&emsp;&emsp;业</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">计算机科学与技术</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">上课时间</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">2024春</td></tr>
    	<tr style="font-weight:bold;"> 
    		<td style="width:25%;text-align:right;">授课教师</td><td style="width:5%">：</td> 
    		<td style="font-weight:normal;border-bottom: 2px solid;text-align:center;">刘善梅</td></tr>
    </tbody></table>
 		<br /><br /><p style="text-align:center;">2024 年 3月 28 日</p>
</div>

<p>[TOC]</p>

<h1 id="编译原理-第一次实验-词法分析">编译原理 第一次实验 词法分析</h1>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>设计、编制并调试一个简单的词法分析程序。</li>
  <li>加深对词法分析原理的理解</li>
</ul>

<h2 id="实验要求">实验要求</h2>

<p>根据PL/0语言的文法规范，编写PL/0语言的词法分析程序。要求：</p>

<ul>
  <li>把词法分析器设计成一个独立一遍的过程。</li>
  <li>词法分析器的输出形式采用二元式序列，即：(单词种类, 单词的值)</li>
</ul>

<blockquote>
  <p>[!important]</p>

  <p>【PL语言简介】</p>

  <p>PL0语言功能简单、结构清晰、可读性强，而又具备了一般高级程序设计语言的必须部分，因而PL0语言的编译程序能充分体现一个高级语言编译程序实现的基本方法和技术。</p>

  <p><strong>1．PL/0语言文法的EBNF</strong></p>

  <p><strong>1.1</strong> <strong>符号说明：</strong></p>

  <p>‘&lt;&gt;’用左右尖括号括起来的中文字表示语法构造成分，或称语法单位，为非终结符。</p>

  <p>‘::=’该符号的左部由右部定义，可读作“定义为”。</p>

  <table>
    <tbody>
      <tr>
        <td>‘</td>
        <td>’表示“或”，为左部可由多个右部定义.</td>
      </tr>
    </tbody>
  </table>

  <p>‘{}’表示花括号内的语法成分可以重复。在不加上下界时可重复0到任意次数，有上下界时为可重复次数的限制。</p>

  <p>‘[]’表示方括号内的成分为任选项。</p>

  <p>‘()’表示圆括号内的成分优先。上述符号称“元符号”，定义文法用到上述符号作为文法符号时需要引号‘’括起。</p>

  <p><strong>1.2 PL/0 语言文法的EBNF:</strong></p>

  <程序>::=<分程序>.

<分程序> ::=[<常量说明>\]\[<变量说明>][<过程说明>]<语句>

<常量说明> ::=CONST<常量定义>{，<常量定义>};

<常量定义> ::=<标识符>=<无符号整数>

<无符号整数> ::= <数字>{<数字>}

<变量说明> ::=VAR <标识符>{, <标识符>};

<标识符> ::=<字母>{<字母>|<数字>}

<过程说明> ::=<过程首部><分程序>{; <过程说明> };

<过程首部> ::=PROCEDURE <标识符>;

<语句> ::=<赋值语句>|<条件语句>|<当循环语句>|<过程调用语句>

​        |<复合语句>|<读语句><写语句>|<空>

<赋值语句> ::=<标识符>:=<表达式>

<复合语句> ::=BEGIN <语句> {;<语句> }END

<条件语句> ::= <表达式> <关系运算符> <表达式> |ODD<表达式>

<表达式> ::= [+|-]<项>{<加法运算符> <项>}

<项> ::= <因子>{<乘法运算符> <因子>}

<因子> ::= <标识符>|<无符号整数>| ‘(’<表达式>‘)’

<加法运算符> ::= +|-

<乘法运算符> ::= *|/

<关系运算符> ::= =|#|&lt;|&lt;=|&gt;|&gt;=

<条件语句> ::= IF <条件> THEN <语句>

<过程调用语句> ::= CALL 标识符

<当循环语句> ::= WHILE <条件> DO <语句>

<读语句> ::= READ‘(’<标识符>{,<标识符>}‘)’

<写语句> ::= WRITE‘(’<表达式>{,<表达式>}‘)’

<字母> ::= a|b|…|X|Y|Z

<数字> ::= 0|1|…|8|9



**2．PL/0语言的词汇表**

| **序号** | **类别**   | **单词**                                                     | **编码**                                                     |
| -------- | ---------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| **1**    | **基本字** | begin, call, const, do, end if, odd, procedure, read then, var, while, write | **beginsym, callsym, constsym** **dosym, endsym, ifsym, oddsym** **，** **proceduresym, readsym,  thensym** **，** **varsym, whilesym, writesym** |
| **2**    | **标识符** |                                                              | **ident**                                                    |
| **3**    | **常数**   |                                                              | **number**                                                   |
| **4**    | **运算符** | +, -, \*, /, odd =, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=,  :=                    | **plus, minus, times, slash, oddsym** **，** **eql, neq, lss, leq, gtr, geq,  becomes** |
| **5**    | **界符**   | （ ） ， ； .                                                | **lparen, rparen, comma, semicolon** **，** **period**       |
</数字></字母></表达式></表达式></写语句></标识符></标识符></读语句></语句></条件></当循环语句></过程调用语句></语句></条件></条件语句></关系运算符></乘法运算符></加法运算符></表达式></无符号整数></标识符></因子></因子></乘法运算符></因子></项></项></加法运算符></项></表达式></表达式></表达式></关系运算符></表达式></条件语句></语句></语句></复合语句></表达式></标识符></赋值语句></空></写语句></读语句></复合语句></过程调用语句></当循环语句></条件语句></赋值语句></语句></标识符></过程首部></过程说明></分程序></过程首部></过程说明></数字></字母></字母></标识符></标识符></标识符></变量说明></数字></数字></无符号整数></无符号整数></标识符></常量定义></常量定义></常量定义></常量说明></语句></过程说明></变量说明></常量说明></分程序></分程序></程序>
</blockquote>

<h2 id="设计思想">设计思想</h2>

<p>要想手工设计词法分析器，实现PL/0语言子集的识别，就要明白什么是词法分析器，它的功能是什么。词法分析是编译程序进行编译时第一个要进行的任务，主要是对源程序进行编译预处理（去除注释、无用的回车换行找到包含的文件等）之后，对整个源程序进行分解，分解成一个个单词，这些单词有且只有五类，分别是<strong>标识符、保留字、常数、运算符、界符</strong>。以便为下面的语法分析和语义分析做准备。<strong>可以说词法分析面向的对象是单个的字符，目的是把它们组成有效的单词（字符串）；而语法的分析则是利用词法分析的结果作为输入来分析是否符合语法规则并且进行语法制导下的语义分析，最后产生四元组(中间代码)，进行优化（可有可无）之后最终生成目标代码</strong>。可见词法分析是所有后续工作的基础，如果这一步出错，比如明明是‘&lt;=’却被拆分成‘&lt;’和‘=’就会对下文造成不可挽回的影响。因此，在进行词法分析的时候一定要定义好这五种符号的集合。</p>

<p>首先我们可以从需求入手，然后再尝试设计出一个词法分析器。</p>

<h3 id="1-预计成果">1 预计成果</h3>

<p>词法分析的成果就是由一系列单词符号构成的单词流。单词符号其实就是 token，一般有以下五大类：</p>

<ul>
  <li>关键字：例如 <code class="language-plaintext highlighter-rouge">while</code>，<code class="language-plaintext highlighter-rouge">if</code>，<code class="language-plaintext highlighter-rouge">int</code> 等</li>
  <li>标识符：变量名、常量名、函数名等</li>
  <li>常数：例如，<code class="language-plaintext highlighter-rouge">100</code>，<code class="language-plaintext highlighter-rouge">'text'</code>，<code class="language-plaintext highlighter-rouge">TRUE</code> 等</li>
  <li>运算符：例如 <code class="language-plaintext highlighter-rouge">+</code>，<code class="language-plaintext highlighter-rouge">*</code>，<code class="language-plaintext highlighter-rouge">/</code> 等</li>
  <li>界符：逗号，分号，括号，点等</li>
</ul>

<p>具体来说，一个单词符号在形式上是这样的一个二元式：<code class="language-plaintext highlighter-rouge">（单词种别，单词符号的属性值）</code></p>

<blockquote>
  <p>[!tip]</p>

  <p>为了更好的解释，这里解释一下两个概念：</p>

  <p><strong>单词种别：</strong></p>

  <p>单词种别通常用整数编码。一个语言的单词符号如何分种，分成几种，怎样编码是一个技术问题。它取决于处理上的方便。</p>

  <ul>
    <li>标识符一般统归为一种。比如说变量 <code class="language-plaintext highlighter-rouge">a</code> 和 <code class="language-plaintext highlighter-rouge">b</code>，可能我们都只用 <code class="language-plaintext highlighter-rouge">1</code> 作为它们的单词种别。</li>
    <li>常数则宜按类型（整、实、布尔等）分种，比如说整数可能用 <code class="language-plaintext highlighter-rouge">2</code> 表示，布尔值可能用 <code class="language-plaintext highlighter-rouge">3</code> 表示。</li>
    <li>关键字可以把全体视为一种，也可以一字一种。</li>
    <li>运算符可以把具有一定共性的运算符视为一种，也可以一符一种。</li>
    <li>界符一般是一符一种。</li>
  </ul>

  <p><strong>单词符号的属性值</strong></p>

  <p>由上面的单词种别可以知道，关键字、运算符、界符基本都是一字（或者一符）对应一个种别，所以只依靠单词种别即可确切地判断出具体是哪一种单词符号了。但是标识符和常数却不是这样，一个种别可能对应好几个单词符号。所以我们需要借助单词符号的属性值<strong>做进一步的区分</strong>。</p>

  <p>对于标识符类型的单词符号，它的属性值通常是一个指针，这个指针指向符号表的某个表项，这个表项包含了该单词符号的相关信息；对于常数类型的单词符号，它的属性值也是一个指针，这个指针指向常数表的某个表项，这个表项包含了该单词符号的相关信息。</p>
</blockquote>

<p><strong>而我们要生成的单词种别是PL/0的单词种别，实验的要求中已经全部给出了单词种别，我们要做的就是要识别每个单词是属于哪个单词种别的。</strong> <strong>然后我们最终的输出结构就用token这种数据结构给出。</strong></p>

<h3 id="2-设计要点">2 设计要点</h3>

<h4 id="21-是否作为一趟">2.1 是否作为一趟？</h4>

<p>按照我们常规的想法，应该是词法分析器扫描整个源程序，产生单词流，之后再由语法分析器分析生成的单词。如果是这样，那么就说词法分析器独立负责了一趟的扫描。但其实，更多的时候我们认为词法分析器并不负责独立的一趟，而是作为语法分析器的子程序被调用。也就是说，一上来就准备对源程序进行语法分析，但是语法分析无法处理字符流，所以它又回过头调用了词法分析器，将字符流转化成单词流，再去分析它的语法。以此类推，后面每次遇到字符串流，都是这样的一个过程。</p>

<p><strong>但是由于我们仅仅要实现词法分析，不涉及语法分析，所以我们这里实现的是作为一趟。</strong></p>

<h4 id="22-输入和预处理">2.2 输入和预处理</h4>

<p>字符流输入后首先到达<strong>输入缓冲区</strong>，在词法分析器正式对它进行扫描之前，还得先做一些预处理的工作。预处理子程序会对<strong>一定长度</strong>的字符流进行处理，包括去除注释、合并多个空白符、处理回车符和换行符等。处理完之后再把这部分字符流送到<strong>扫描缓冲区</strong>。此时，词法分析器才正式开始拆分字符流的工作。</p>

<p><strong>这里我们可以直接使用input来模拟字符流的输入，然后使用一些方法进行预处理</strong></p>

<h4 id="23-超前扫描">2.3 超前扫描</h4>

<p>像 FORTRAN 这样的语言，关键字不加保护（只要不引起矛盾，用户可以用它们作为普通标识符），关键字和用户自定义的标识符或标号之间没有特殊的界符作间隔。这使得关键字的识别变得很麻烦。比如 <code class="language-plaintext highlighter-rouge">DO99K=1,10</code> 和 <code class="language-plaintext highlighter-rouge">DO99K=1.10</code>。前者的意思是，K 从 1 变到 10 之后，跳转到第 99 行执行；后者的意思是，为变量 DO99K 赋值 1.10。问题在于，我们并不能在扫描到 <code class="language-plaintext highlighter-rouge">DO</code> 的时候就肯定这是一个关键字，事实上，它既有可能是关键字，也有可能作为标识符的一部分。而具体是哪一种，只有在我们扫描到 <code class="language-plaintext highlighter-rouge">=1</code> 后面才能确定 —— 如果后面是逗号，则这是关键字，如果是点号，则是标识符的一部分。</p>

<p><strong>但是我们这里使用PL/0，对关键词是有保护的，所以我们无需进行超前扫描</strong></p>

<h3 id="3-设计词法分析的模型">3 设计词法分析的模型</h3>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/1157683-20170521210839775-1386424259.png" alt="模型" /></p>

<h4 id="31-单词种类及其正规式">3.1 单词种类及其正规式</h4>

<ol>
  <li>基本字</li>
</ol>

<table>
  <thead>
    <tr>
      <th>单词的值</th>
      <th>单词类型</th>
      <th>正规式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>begin</td>
      <td>beginsym</td>
      <td>begin</td>
    </tr>
    <tr>
      <td>call</td>
      <td>callsym</td>
      <td>call</td>
    </tr>
    <tr>
      <td>const</td>
      <td>constsym</td>
      <td>const</td>
    </tr>
    <tr>
      <td>do</td>
      <td>dosym</td>
      <td>do</td>
    </tr>
    <tr>
      <td>end</td>
      <td>endsym</td>
      <td>end</td>
    </tr>
    <tr>
      <td>if</td>
      <td>ifsym</td>
      <td>if</td>
    </tr>
    <tr>
      <td>odd</td>
      <td>oddsym</td>
      <td>odd</td>
    </tr>
    <tr>
      <td>procedure</td>
      <td>proceduresym</td>
      <td>procedure</td>
    </tr>
    <tr>
      <td>read</td>
      <td>readsym</td>
      <td>read</td>
    </tr>
    <tr>
      <td>then</td>
      <td>thensym</td>
      <td>then</td>
    </tr>
    <tr>
      <td>var</td>
      <td>varsym</td>
      <td>var</td>
    </tr>
    <tr>
      <td>while</td>
      <td>whilesym</td>
      <td>while</td>
    </tr>
    <tr>
      <td>write</td>
      <td>writesym</td>
      <td>write</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>标识符</li>
</ol>

<table>
  <thead>
    <tr>
      <th>单词的值</th>
      <th>单词类型</th>
      <th>正规式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>标识符</td>
      <td>ident</td>
      <td>(字母)(字母|数字)*</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>常数</li>
</ol>

<table>
  <thead>
    <tr>
      <th>单词的值</th>
      <th>单词类型</th>
      <th>正规式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>常数</td>
      <td>number</td>
      <td>(数字)(数字)*</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>运算符</li>
</ol>

<table>
  <thead>
    <tr>
      <th>单词的值</th>
      <th>单词类型</th>
      <th>正规式r</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>+</td>
      <td>plus</td>
      <td>+</td>
    </tr>
    <tr>
      <td>-</td>
      <td>minus</td>
      <td>-</td>
    </tr>
    <tr>
      <td>*</td>
      <td>times</td>
      <td>*</td>
    </tr>
    <tr>
      <td>/</td>
      <td>slash</td>
      <td>/</td>
    </tr>
    <tr>
      <td>=</td>
      <td>eql</td>
      <td>=</td>
    </tr>
    <tr>
      <td>&lt;&gt;</td>
      <td>neq</td>
      <td>&lt;&gt;</td>
    </tr>
    <tr>
      <td>&lt;</td>
      <td>lss</td>
      <td>&lt;</td>
    </tr>
    <tr>
      <td>&lt;=</td>
      <td>leq</td>
      <td>&lt;=</td>
    </tr>
    <tr>
      <td>&gt;</td>
      <td>gtr</td>
      <td>&gt;</td>
    </tr>
    <tr>
      <td>&gt;=</td>
      <td>geq</td>
      <td>&gt;=</td>
    </tr>
    <tr>
      <td>:=</td>
      <td>becomes</td>
      <td>:=</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>界符</li>
</ol>

<table>
  <thead>
    <tr>
      <th>单词的值</th>
      <th>单词类型</th>
      <th>正规式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>(</td>
      <td>lparen</td>
      <td>(</td>
    </tr>
    <tr>
      <td>)</td>
      <td>rparen</td>
      <td>)</td>
    </tr>
    <tr>
      <td>，</td>
      <td>comma</td>
      <td>，</td>
    </tr>
    <tr>
      <td>；</td>
      <td>semicolon</td>
      <td>；</td>
    </tr>
    <tr>
      <td>.</td>
      <td>period</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h4 id="32-根据正规式构造nfa">3.2 根据正规式构造NFA</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/2605248-20230430160845156-1512298939.jpg" alt="img" style="zoom:80%;" /></p>

<h4 id="33-将nfa转换为dfa">3.3 将NFA转换为DFA</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616170255817.png" alt="image-20240616170255817" style="zoom:33%;" /></p>

<p>使用这三个规则实现转换</p>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/2605248-20230430160908823-793550145.jpg" alt="img" style="zoom: 67%;" /></p>

<h4 id="33-最小化dfa">3.3 最小化DFA</h4>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/2605248-20230430160927151-1106412564.jpg" alt="img" style="zoom:80%;" /></p>

<h2 id="算法流程">算法流程</h2>

<p><strong>下面说一下整个程序的流程：</strong></p>

<ol>
  <li>词法分析程序<strong>打开源文件</strong>，读取文件内容，直至遇上’$’文件结束符，然后读取结束。</li>
  <li>对读取的文件进行<strong>预处理</strong>，从头到尾进行扫描，<strong>去除//和/* */的内容，以及一些无用的、影响程序执行的符号如换行符、回车符、制表符等</strong>。但是千万注意不要在这个时候去除空格，<strong>因为空格在词法分析中有用，</strong>比如说int i=3;这个语句，如果去除空格就变成了“inti=3”,这样就失去了程序的本意，因此不能在这个时候去除空格。</li>
  <li>选下面就要<strong>对源文件从头到尾进行扫描</strong>了，从头开始扫描，这个时候扫描程序首先要询问当前的字符是不是空格，若是空格，则继续扫描下一个字符，直至不是空格，然后询问这个字符是不是字母，若是则进行标识符和保留字的识别；若这个字符为数字，则进行数字的判断。否则，依次对这个字符可能的情况进行判断，<strong>若是将所有可能都走了一遍还是没有知道它是谁，则认定为错误符号</strong>，输出该错误符号，然后结束。每次成功识别了一个单词后，单词都会存在token[ ]中。<strong>然后确定这个单词的种别码，最后进行下一个单词的识别。</strong>这就是扫描程序进行的工作，可以说这个程序彻底实现了<strong>确定有限自动机</strong>的某些功能，比如说识别标识符，识别数字等。为了简单起见，这里的数字只是整数。</li>
  <li><strong>主控程序</strong>主要负责对每次识别的种别码syn进行判断，对于不同的单词种别做出不同的反应，如对于标识符则将其插入标识符表中。对于保留字则输出该保留字的种别码和助记符，等等吧。<strong>直至遇到syn=0;</strong>程序结束。</li>
</ol>

<p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/2605248-20230430161009075-442898421.png" alt="img" style="zoom:80%;" /></p>

<h2 id="源程序">源程序</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span><span class="p">,</span> <span class="n">auto</span>


<span class="c1"># 定义一个名为TokenType的枚举类型，表示所有可能的标记类型。
</span><span class="k">class</span> <span class="nc">TokenType</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="c1"># 下面的每一行都是定义一个标记类型，例如BEGINSYM、CALLSYM等。
</span>    <span class="n">BEGINSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">CALLSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">CONSTSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">DOSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">ENDSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">IFSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">ODDSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">PROCEDURESYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">READSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">THENSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">VARSYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">WHILESYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">WRITESYM</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>
    <span class="n">IDENT</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 标识符
</span>    <span class="n">NUMBER</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 数字
</span>    <span class="n">PLUS</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 加号
</span>    <span class="n">MINUS</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 减号
</span>    <span class="n">TIMES</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 乘号
</span>    <span class="n">SLASH</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 斜杠
</span>    <span class="n">ODD</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 奇数
</span>    <span class="n">EQL</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 等号
</span>    <span class="n">NEQ</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 不等号
</span>    <span class="n">LSS</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 小于号
</span>    <span class="n">LEQ</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 小于等于号
</span>    <span class="n">GTR</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 大于号
</span>    <span class="n">GEQ</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 大于等于号
</span>    <span class="n">BECOMES</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 赋值号
</span>    <span class="n">LPAREN</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 左括号
</span>    <span class="n">RPAREN</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 右括号
</span>    <span class="n">COMMA</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 逗号
</span>    <span class="n">SEMICOLON</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 分号
</span>    <span class="n">PERIOD</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 句号
</span>    <span class="n">UNKNOWN</span> <span class="o">=</span> <span class="nf">auto</span><span class="p">()</span>  <span class="c1"># 未知标记
</span>

<span class="c1"># 定义一个名为Token的类，用于表示一个标记。每个标记都有一个类型和一个值。
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">type</span> <span class="o">=</span> <span class="nb">type</span>  <span class="c1"># 标记的类型
</span>        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>  <span class="c1"># 标记的值
</span>

<span class="c1"># 定义一个名为Lexer的类，用于执行词法分析。这个类有一个输入字符串和一个位置指针。
</span><span class="k">class</span> <span class="nc">Lexer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">input_str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span> <span class="o">=</span> <span class="n">input_str</span>  <span class="c1"># 将输入字符串保存到self.input中
</span>        <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 初始化位置指针为0
</span>
    <span class="k">def</span> <span class="nf">get_next_token</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">skip_whitespace</span><span class="p">()</span>  <span class="c1"># 跳过空白字符
</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">&gt;=</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">):</span>  <span class="c1"># 如果当前位置超过输入字符串的长度
</span>            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">PERIOD</span><span class="p">,</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 返回一个句号标记
</span>
        <span class="n">current_char</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">]</span>  <span class="c1"># 获取当前位置的字符
</span>
        <span class="k">if</span> <span class="n">current_char</span><span class="p">.</span><span class="nf">isalpha</span><span class="p">():</span>  <span class="c1"># 如果是字母
</span>            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_identifier_or_keyword</span><span class="p">()</span>  <span class="c1"># 获取标识符或关键字
</span>
        <span class="k">if</span> <span class="n">current_char</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>  <span class="c1"># 如果是数字
</span>            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_number</span><span class="p">()</span>  <span class="c1"># 获取数字
</span>
        <span class="c1"># 处理单字符标记
</span>        <span class="k">if</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">PLUS</span><span class="p">,</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">MINUS</span><span class="p">,</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">TIMES</span><span class="p">,</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">SLASH</span><span class="p">,</span> <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">LPAREN</span><span class="p">,</span> <span class="sh">"</span><span class="s">(</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">RPAREN</span><span class="p">,</span> <span class="sh">"</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">COMMA</span><span class="p">,</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">;</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">SEMICOLON</span><span class="p">,</span> <span class="sh">"</span><span class="s">;</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 检查是否是赋值符号 :=
</span>                <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
                <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">BECOMES</span><span class="p">,</span> <span class="sh">"</span><span class="s">:=</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">UNKNOWN</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">EQL</span><span class="p">,</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">current_char</span> <span class="o">==</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">PERIOD</span><span class="p">,</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
            <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">UNKNOWN</span><span class="p">,</span> <span class="n">current_char</span><span class="p">)</span>  <span class="c1"># 未知标记
</span>
    <span class="k">def</span> <span class="nf">advance</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c1"># 前进一个字符
</span>
    <span class="k">def</span> <span class="nf">skip_whitespace</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 跳过空白字符
</span>        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">].</span><span class="nf">isspace</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_identifier_or_keyword</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">identifier</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span>
                <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">].</span><span class="nf">isalnum</span><span class="p">()</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">):</span>  <span class="c1"># 继续读取字母、数字或下划线
</span>            <span class="n">identifier</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">]</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
        <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">get_keyword_type</span><span class="p">(</span><span class="n">identifier</span><span class="p">),</span> <span class="n">identifier</span><span class="p">)</span>  <span class="c1"># 返回标识符或关键字
</span>
    <span class="k">def</span> <span class="nf">get_number</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">number</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">while</span> <span class="n">self</span><span class="p">.</span><span class="n">position</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">)</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">].</span><span class="nf">isdigit</span><span class="p">():</span>  <span class="c1"># 读取数字
</span>            <span class="n">number</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">position</span><span class="p">]</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">advance</span><span class="p">()</span>
        <span class="k">return</span> <span class="nc">Token</span><span class="p">(</span><span class="n">TokenType</span><span class="p">.</span><span class="n">NUMBER</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span>  <span class="c1"># 返回数字标记
</span>
    <span class="k">def</span> <span class="nf">get_keyword_type</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">keyword</span><span class="p">):</span>
        <span class="c1"># 将字符串转换为关键字类型
</span>        <span class="k">if</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">begin</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">BEGINSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">call</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">CALLSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">const</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">CONSTSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">do</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">DOSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">end</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">ENDSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">if</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">IFSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">odd</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">ODDSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">procedure</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">PROCEDURESYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">READSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">then</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">THENSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">var</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">VARSYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">while</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">WHILESYM</span>
        <span class="k">elif</span> <span class="n">keyword</span> <span class="o">==</span> <span class="sh">"</span><span class="s">write</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">WRITESYM</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">IDENT</span>  <span class="c1"># 返回标识符类型
</span>

<span class="c1"># 主程序入口
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>  <span class="c1"># 读取第一行输入
</span>        <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">"</span><span class="s">end.</span><span class="sh">"</span><span class="p">:</span>  <span class="c1"># 检查是否是结束符
</span>            <span class="k">pass</span>
        <span class="n">input_str</span> <span class="o">=</span> <span class="n">line</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>  <span class="c1"># 将输入字符串初始化为第一行
</span>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">line</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>  <span class="c1"># 继续读取输入
</span>                <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">"</span><span class="s">end.</span><span class="sh">"</span><span class="p">:</span>  <span class="c1"># 检查是否是结束符
</span>                    <span class="n">input_str</span> <span class="o">+=</span> <span class="n">line</span>
                    <span class="k">break</span>
                <span class="n">input_str</span> <span class="o">+=</span> <span class="n">line</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
            <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>  <span class="c1"># 处理EOF错误
</span>                <span class="k">break</span>
    <span class="k">except</span> <span class="nb">EOFError</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="n">lexer</span> <span class="o">=</span> <span class="nc">Lexer</span><span class="p">(</span><span class="n">input_str</span><span class="p">)</span>  <span class="c1"># 创建Lexer对象
</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># 初始化tokens列表
</span>    <span class="n">token</span> <span class="o">=</span> <span class="n">lexer</span><span class="p">.</span><span class="nf">get_next_token</span><span class="p">()</span>  <span class="c1"># 获取第一个标记
</span>    <span class="k">while</span> <span class="n">token</span><span class="p">.</span><span class="nb">type</span> <span class="o">!=</span> <span class="n">TokenType</span><span class="p">.</span><span class="n">PERIOD</span><span class="p">:</span>  <span class="c1"># 直到遇到句号标记
</span>        <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
        <span class="n">token</span> <span class="o">=</span> <span class="n">lexer</span><span class="p">.</span><span class="nf">get_next_token</span><span class="p">()</span>  <span class="c1"># 获取下一个标记
</span>    <span class="n">tokens</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>  <span class="c1"># 添加最后一个句号标记
</span>
    <span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">:</span>  <span class="c1"># 输出所有标记
</span>        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">(</span><span class="si">{</span><span class="n">token</span><span class="p">.</span><span class="nb">type</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="n">token</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="调试数据">调试数据</h2>

<h3 id="测试样例一">测试样例一</h3>

<blockquote>
  <p>[样例输入]</p>

  <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="n">var</span> <span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>
<span class="n">begin</span>
<span class="nf">read</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
<span class="n">c</span><span class="o">:=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
<span class="n">write</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="n">end</span><span class="p">.</span>
</code></pre></div>  </div>

  <p>【样例输出】</p>

  <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">(constsym,const)</span>
<span class="err">(ident,a)</span>
<span class="py">(eql,</span><span class="p">=</span><span class="err">)</span>
<span class="err">(number,10)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(varsym,var)</span>
<span class="err">(ident,b)</span>
<span class="err">(comma,,)</span>
<span class="err">(ident,c)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(beginsym,begin)</span>
<span class="err">(readsym,read)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,b)</span>
<span class="err">(rparen,))</span>
<span class="err">(semicolon,;)</span>
<span class="err">(ident,c)</span>
<span class="py">(becomes,:</span><span class="p">=</span><span class="err">)</span>
<span class="err">(ident,a)</span>
<span class="err">(plus,+)</span>
<span class="err">(ident,b)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(writesym,write)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,c)</span>
<span class="err">(rparen,))</span>
<span class="err">(endsym,end)</span>
<span class="err">(period,.)</span>
</code></pre></div>  </div>

  <p>输出结果</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616172443902.png" alt="image-20240616172443902" style="zoom: 33%;" /></p>
</blockquote>

<h3 id="测试样例二">测试样例二</h3>

<blockquote>
  <p>[样例输入]</p>

  <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="n">var</span> <span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
<span class="n">begin</span>
<span class="nf">read</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
<span class="n">read</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
<span class="n">d</span><span class="o">:=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="p">;</span>
<span class="n">write</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="n">end</span><span class="p">.</span>
</code></pre></div>  </div>

  <p>【样例输出】</p>

  <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">(constsym,const)</span>
<span class="err">(ident,a)</span>
<span class="py">(eql,</span><span class="p">=</span><span class="err">)</span>
<span class="err">(number,10)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(varsym,var)</span>
<span class="err">(ident,b)</span>
<span class="err">(comma,,)</span>
<span class="err">(ident,c)</span>
<span class="err">(comma,,)</span>
<span class="err">(ident,d)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(beginsym,begin)</span>
<span class="err">(readsym,read)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,b)</span>
<span class="err">(rparen,))</span>
<span class="err">(semicolon,;)</span>
<span class="err">(readsym,read)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,c)</span>
<span class="err">(rparen,))</span>
<span class="err">(semicolon,;)</span>
<span class="err">(ident,d)</span>
<span class="py">(becomes,:</span><span class="p">=</span><span class="err">)</span>
<span class="err">(ident,a)</span>
<span class="err">(plus,+)</span>
<span class="err">(ident,b)</span>
<span class="err">(plus,+)</span>
<span class="err">(ident,c)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(writesym,write)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,d)</span>
<span class="err">(rparen,))</span>
<span class="err">(endsym,end)</span>
<span class="err">(period,.)</span>
</code></pre></div>  </div>

  <p>输出结果</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616172626283.png" alt="image-20240616172626283" style="zoom: 33%;" /></p>
</blockquote>

<h3 id="测试样例三">测试样例三</h3>

<blockquote>
  <p>[样例输入]</p>

  <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="k">const</span> <span class="n">b</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
<span class="n">var</span> <span class="n">c</span><span class="p">;</span>
<span class="n">begin</span>
<span class="n">c</span><span class="o">:=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>
<span class="n">write</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="n">end</span><span class="p">.</span>
</code></pre></div>  </div>

  <p>【样例输出】</p>

  <div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">(constsym,const)</span>
<span class="err">(ident,a)</span>
<span class="py">(eql,</span><span class="p">=</span><span class="err">)</span>
<span class="err">(number,10)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(constsym,const)</span>
<span class="err">(ident,b)</span>
<span class="py">(eql,</span><span class="p">=</span><span class="err">)</span>
<span class="err">(number,10)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(varsym,var)</span>
<span class="err">(ident,c)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(beginsym,begin)</span>
<span class="err">(ident,c)</span>
<span class="py">(becomes,:</span><span class="p">=</span><span class="err">)</span>
<span class="err">(ident,a)</span>
<span class="err">(plus,+)</span>
<span class="err">(ident,b)</span>
<span class="err">(semicolon,;)</span>
<span class="err">(writesym,write)</span>
<span class="err">(lparen,()</span>
<span class="err">(ident,c)</span>
<span class="err">(rparen,))</span>
<span class="err">(endsym,end)</span>
<span class="err">(period,.)</span>
</code></pre></div>  </div>

  <p>输出结果</p>

  <p><img src="/assets/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90.assets/image-20240616172821800.png" alt="image-20240616172821800" style="zoom: 33%;" /></p>
</blockquote>

<h2 id="实验调试情况及体会">实验调试情况及体会</h2>

<p>每做一次比较大的实验，都应该写一下实验体会，来加深自己对知识的认识。其实这次的实验，算法部分并不难，<strong>只要知道了DFA，这个模块很好写</strong>，比较麻烦的就是五种类型的字符个数越多程序就越长。但为了能识别大部分程序，我还是用了比较大的子集，结果花了一下午的功夫才写完，虽然很累吧，但看着这个词法分析器的处理能力，觉得还是值得的。同时也加深了对字符的认识。程序的可读性还算不错。<strong>程序没有实现的是对所有复合运算的分离，但原理是相同的，比如“+=“，只需在”+“的逻辑之后向前扫描就行了，因此就没有再加上了。</strong>感受最深的是学习编译原理必须要做实验，写程序，这样才会提高自己的动手能力，加深自己对难点的理解，对于以后的求first{},follow{},fisrtVT{},lastVT{}更是应该如此。</p>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="编译原理" /><category term="实验报告" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">嵌入式 第二次实验 嵌入式编程基础实验</title><link href="http://localhost:4000/2024/03/25/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="嵌入式 第二次实验 嵌入式编程基础实验" /><published>2024-03-25T00:00:00+08:00</published><updated>2024-03-25T00:00:00+08:00</updated><id>http://localhost:4000/2024/03/25/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/03/25/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%AE%9E%E9%AA%8C.html"><![CDATA[<h2 id="嵌入式-第二次实验-嵌入式编程基础实验">嵌入式 第二次实验 嵌入式编程基础实验</h2>

<!---more-->
<style> .pdf-embed-wrap-a5a620e9-1f44-4b7b-bebd-f4a5051b7032 { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-a5a620e9-1f44-4b7b-bebd-f4a5051b7032 { height: 100%; } .pdf-embed-container-a5a620e9-1f44-4b7b-bebd-f4a5051b7032 iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-a5a620e9-1f44-4b7b-bebd-f4a5051b7032"> <div class="pdf-embed-container-a5a620e9-1f44-4b7b-bebd-f4a5051b7032"> <iframe src="/assets/pdf/嵌入式/第二次实验.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="嵌入式" /><category term="实验报告" /><summary type="html"><![CDATA[嵌入式 第二次实验 嵌入式编程基础实验]]></summary></entry><entry><title type="html">嵌入式 第一次实验 嵌入式编程基础实验</title><link href="http://localhost:4000/2024/03/11/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C.html" rel="alternate" type="text/html" title="嵌入式 第一次实验 嵌入式编程基础实验" /><published>2024-03-11T00:00:00+08:00</published><updated>2024-03-11T00:00:00+08:00</updated><id>http://localhost:4000/2024/03/11/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/2024/03/11/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C.html"><![CDATA[<h2 id="嵌入式-第一次实验-嵌入式编程基础实验">嵌入式 第一次实验 嵌入式编程基础实验</h2>

<!---more-->
<style> .pdf-embed-wrap-da7674d2-3b4f-4a5c-8278-4c471416840c { display: flex; flex-direction: column; width: 100%; height: 650px; } .pdf-embed-container-da7674d2-3b4f-4a5c-8278-4c471416840c { height: 100%; } .pdf-embed-container-da7674d2-3b4f-4a5c-8278-4c471416840c iframe { width: 100%; height: 100%; } </style>
<div class="pdf-embed-wrap-da7674d2-3b4f-4a5c-8278-4c471416840c"> <div class="pdf-embed-container-da7674d2-3b4f-4a5c-8278-4c471416840c"> <iframe src="/assets/pdf/嵌入式/第一次实验.pdf" frameborder="0" allowfullscreen=""></iframe> </div> </div>]]></content><author><name>Gao Xingjie</name><email>xingjie-gao@outlook.com</email></author><category term="嵌入式" /><category term="实验报告" /><summary type="html"><![CDATA[嵌入式 第一次实验 嵌入式编程基础实验]]></summary></entry></feed>